// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : kosagi_fomu_pvt.v
// Device     : ice40-up5k-uwg30
// LiteX sha1 : 6536b9e39
// Date       : 2025-08-07 12:15:49
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module kosagi_fomu_pvt (
    (* keep = "true" *)
    input  wire          clk48,
    inout  wire          spiflash4x_clk,
    inout  wire          spiflash4x_cs_n,
    inout  wire    [3:0] spiflash4x_dq,
    inout  wire          usb_d_n,
    inout  wire          usb_d_p,
    output wire          usb_pullup,
    output wire          user_led_n0
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
│    └─── pll (iCE40PLL)
│    │    └─── [SB_PLL40_CORE]
└─── bus (SoCBusHandler)
│    └─── offset_0* (Offset)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (CPUNone)
└─── identifier (Identifier)
└─── uart (CDCUsb)
│    └─── phy (CDCUsbPHY)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstorage_5* (CSRStorage)
│    │    └─── csrstatus_5* (CSRStatus)
│    │    └─── csrstatus_6* (CSRStatus)
│    │    └─── csrstatus_7* (CSRStatus)
│    │    └─── csrstorage_6* (CSRStorage)
│    │    └─── csrstatus_8* (CSRStatus)
│    │    └─── csrstorage_7* (CSRStorage)
│    │    └─── csrstatus_9* (CSRStatus)
│    │    └─── csrstatus_10* (CSRStatus)
│    │    └─── csrstatus_11* (CSRStatus)
│    │    └─── csrstorage_8* (CSRStorage)
│    │    └─── eptri (TriEndpointInterface)
│    │    │    └─── usb_core (UsbTransfer)
│    │    │    │    └─── iobuf (IoBuf)
│    │    │    │    └─── tx (TxPipeline)
│    │    │    │    │    └─── tx_pipeline_fsm (FSM)
│    │    │    │    │    └─── shifter (TxShifter)
│    │    │    │    │    └─── bitstuff (TxBitstuffer)
│    │    │    │    │    │    └─── stuff (FSM)
│    │    │    │    │    └─── nrzi (TxNRZIEncoder)
│    │    │    │    │    │    └─── nrzi (FSM)
│    │    │    │    └─── txstate (TxPacketSend)
│    │    │    │    │    └─── tx (TxPipeline)
│    │    │    │    │    │    └─── tx_pipeline_fsm (FSM)
│    │    │    │    │    │    └─── shifter (TxShifter)
│    │    │    │    │    │    └─── bitstuff (TxBitstuffer)
│    │    │    │    │    │    │    └─── stuff (FSM)
│    │    │    │    │    │    └─── nrzi (TxNRZIEncoder)
│    │    │    │    │    │    │    └─── nrzi (FSM)
│    │    │    │    │    └─── fsm (FSM)
│    │    │    │    │    └─── crc (TxParallelCrcGenerator)
│    │    │    │    └─── rx (RxPipeline)
│    │    │    │    │    └─── clock_data_recovery (RxClockDataRecovery)
│    │    │    │    │    │    └─── lsr (FSM)
│    │    │    │    │    └─── nrzi (RxNRZIDecoder)
│    │    │    │    │    └─── detect (RxPacketDetect)
│    │    │    │    │    │    └─── pkt (FSM)
│    │    │    │    │    └─── bitstuff (RxBitstuffRemover)
│    │    │    │    │    │    └─── stuff (FSM)
│    │    │    │    │    └─── shifter (RxShifter)
│    │    │    │    │    └─── payloadFifo (AsyncFIFO)
│    │    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    │    │    │    └─── flagsFifo (AsyncFIFO)
│    │    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    │    │    └─── rxstate (PacketHeaderDecode)
│    │    │    │    │    └─── rx (RxPipeline)
│    │    │    │    │    │    └─── clock_data_recovery (RxClockDataRecovery)
│    │    │    │    │    │    │    └─── lsr (FSM)
│    │    │    │    │    │    └─── nrzi (RxNRZIDecoder)
│    │    │    │    │    │    └─── detect (RxPacketDetect)
│    │    │    │    │    │    │    └─── pkt (FSM)
│    │    │    │    │    │    └─── bitstuff (RxBitstuffRemover)
│    │    │    │    │    │    │    └─── stuff (FSM)
│    │    │    │    │    │    └─── shifter (RxShifter)
│    │    │    │    │    │    └─── payloadFifo (AsyncFIFO)
│    │    │    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    │    │    │    │    └─── flagsFifo (AsyncFIFO)
│    │    │    │    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    │    │    │    └─── graycounter_1* (GrayCounter)
│    │    │    │    │    └─── fsm (FSM)
│    │    │    │    └─── iobuf (IoBuf)
│    │    │    │    └─── transfer (FSM)
│    │    │    └─── pullup (GPIOOut)
│    │    │    └─── setup (SetupHandler)
│    │    │    │    └─── ev (EventManager)
│    │    │    │    │    └─── packet (EventSourcePulse)
│    │    │    │    │    └─── eventsourcepulse_0* (EventSourcePulse)
│    │    │    │    │    └─── reset (EventSourceProcess)
│    │    │    │    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    │    │    └─── inner (SetupHandlerInner)
│    │    │    │    │    └─── data (SyncFIFOBuffered)
│    │    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── in (InHandler)
│    │    │    │    └─── data_buf (SyncFIFOBuffered)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    │    └─── ev (EventManager)
│    │    │    │    │    └─── packet (EventSourcePulse)
│    │    │    │    │    └─── eventsourcepulse_0* (EventSourcePulse)
│    │    │    └─── out (OutHandler)
│    │    │    │    └─── data_buf (SyncFIFOBuffered)
│    │    │    │    │    └─── fifo (SyncFIFO)
│    │    │    │    └─── ev (EventManager)
│    │    │    │    │    └─── packet (EventSourcePulse)
│    │    │    │    │    └─── eventsourcepulse_0* (EventSourcePulse)
│    │    │    └─── ev (SharedIRQ)
│    │    │    └─── stage (FSM)
│    │    └─── config (FSM)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── configure_pulse (PulseSynchronizer)
│    └─── asyncfifo_0* (AsyncFIFO)
│    │    └─── fifo (AsyncFIFO)
│    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    └─── graycounter_1* (GrayCounter)
│    └─── asyncfifo_1* (AsyncFIFO)
│    │    └─── fifo (AsyncFIFO)
│    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    └─── graycounter_1* (GrayCounter)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── spram (Up5kSPRAM)
│    └─── [SB_SPRAM256KA]
│    └─── [SB_SPRAM256KA]
│    └─── [SB_SPRAM256KA]
│    └─── [SB_SPRAM256KA]
└─── spiflash (LiteSPI)
│    └─── crossbar (LiteSPICrossbar)
│    │    └─── rr (RoundRobin)
│    │    └─── tx_mux (Multiplexer)
│    │    └─── rx_demux (Demultiplexer)
│    └─── mmap (LiteSPIMMAP)
│    │    └─── burst_timeout (WaitTimer)
│    │    └─── fsm (FSM)
│    └─── phy (LiteSPIPHY)
│    │    └─── spiflash_phy (LiteSPISDRPHYCore)
│    │    │    └─── resyncreg_0* (ResyncReg)
│    │    │    └─── clkgen (LiteSPIClkGen)
│    │    │    └─── cs_control (LiteSPICSControl)
│    │    │    │    └─── timer (WaitTimer)
│    │    │    └─── fsm (FSM)
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
└─── csr_interconnect (InterconnectShared)
└─── [SB_IO]
└─── [SB_IO]
└─── [SB_IO]
└─── [SB_IO]
└─── [SB_DFFS]
└─── [SB_DFFS]
└─── [SB_IO]
└─── [SB_IO]
└─── [SB_IO]
└─── [SB_DFFS]
└─── [SB_IO]
└─── [SB_DFFS]
└─── [SB_DFFS]
└─── [SB_DFFS]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          adapted_interface_ack;
reg    [29:0] adapted_interface_adr = 30'd0;
reg     [1:0] adapted_interface_bte = 2'd0;
reg     [2:0] adapted_interface_cti = 3'd0;
reg           adapted_interface_cyc = 1'd0;
wire   [31:0] adapted_interface_dat_r;
reg    [31:0] adapted_interface_dat_w = 32'd0;
wire          adapted_interface_err;
reg     [3:0] adapted_interface_sel = 4'd0;
reg           adapted_interface_stb = 1'd0;
reg           adapted_interface_we = 1'd0;
reg           basesoc_bus_error = 1'd0;
reg    [31:0] basesoc_bus_errors = 32'd0;
reg           basesoc_bus_errors_re = 1'd0;
wire   [31:0] basesoc_bus_errors_status;
wire          basesoc_bus_errors_we;
wire          basesoc_cdcusb_async_rst;
wire    [9:0] basesoc_cdcusb_asyncfifo0_asyncfifo0_din;
wire    [9:0] basesoc_cdcusb_asyncfifo0_asyncfifo0_dout;
wire          basesoc_cdcusb_asyncfifo0_asyncfifo0_re;
wire          basesoc_cdcusb_asyncfifo0_asyncfifo0_readable;
wire          basesoc_cdcusb_asyncfifo0_asyncfifo0_we;
wire          basesoc_cdcusb_asyncfifo0_asyncfifo0_writable;
wire    [2:0] basesoc_cdcusb_asyncfifo0_consume_wdomain;
wire          basesoc_cdcusb_asyncfifo0_fifo_in_first;
wire          basesoc_cdcusb_asyncfifo0_fifo_in_last;
wire    [7:0] basesoc_cdcusb_asyncfifo0_fifo_in_payload_data;
wire          basesoc_cdcusb_asyncfifo0_fifo_out_first;
wire          basesoc_cdcusb_asyncfifo0_fifo_out_last;
wire    [7:0] basesoc_cdcusb_asyncfifo0_fifo_out_payload_data;
wire          basesoc_cdcusb_asyncfifo0_graycounter0_ce;
reg     [2:0] basesoc_cdcusb_asyncfifo0_graycounter0_q = 3'd0;
reg     [2:0] basesoc_cdcusb_asyncfifo0_graycounter0_q_binary = 3'd0;
wire    [2:0] basesoc_cdcusb_asyncfifo0_graycounter0_q_next;
reg     [2:0] basesoc_cdcusb_asyncfifo0_graycounter0_q_next_binary = 3'd0;
wire          basesoc_cdcusb_asyncfifo0_graycounter1_ce;
reg     [2:0] basesoc_cdcusb_asyncfifo0_graycounter1_q = 3'd0;
reg     [2:0] basesoc_cdcusb_asyncfifo0_graycounter1_q_binary = 3'd0;
wire    [2:0] basesoc_cdcusb_asyncfifo0_graycounter1_q_next;
reg     [2:0] basesoc_cdcusb_asyncfifo0_graycounter1_q_next_binary = 3'd0;
wire    [2:0] basesoc_cdcusb_asyncfifo0_produce_rdomain;
wire    [1:0] basesoc_cdcusb_asyncfifo0_rdport_adr;
wire    [9:0] basesoc_cdcusb_asyncfifo0_rdport_dat_r;
reg           basesoc_cdcusb_asyncfifo0_sink_first = 1'd0;
reg           basesoc_cdcusb_asyncfifo0_sink_last = 1'd0;
wire    [7:0] basesoc_cdcusb_asyncfifo0_sink_payload_data;
wire          basesoc_cdcusb_asyncfifo0_sink_ready;
wire          basesoc_cdcusb_asyncfifo0_sink_valid;
wire          basesoc_cdcusb_asyncfifo0_source_first;
wire          basesoc_cdcusb_asyncfifo0_source_last;
wire    [7:0] basesoc_cdcusb_asyncfifo0_source_payload_data;
wire          basesoc_cdcusb_asyncfifo0_source_ready;
wire          basesoc_cdcusb_asyncfifo0_source_valid;
wire    [1:0] basesoc_cdcusb_asyncfifo0_wrport_adr;
wire    [9:0] basesoc_cdcusb_asyncfifo0_wrport_dat_r;
wire    [9:0] basesoc_cdcusb_asyncfifo0_wrport_dat_w;
wire          basesoc_cdcusb_asyncfifo0_wrport_we;
wire    [9:0] basesoc_cdcusb_asyncfifo1_asyncfifo1_din;
wire    [9:0] basesoc_cdcusb_asyncfifo1_asyncfifo1_dout;
wire          basesoc_cdcusb_asyncfifo1_asyncfifo1_re;
wire          basesoc_cdcusb_asyncfifo1_asyncfifo1_readable;
wire          basesoc_cdcusb_asyncfifo1_asyncfifo1_we;
wire          basesoc_cdcusb_asyncfifo1_asyncfifo1_writable;
wire    [2:0] basesoc_cdcusb_asyncfifo1_consume_wdomain;
wire          basesoc_cdcusb_asyncfifo1_fifo_in_first;
wire          basesoc_cdcusb_asyncfifo1_fifo_in_last;
wire    [7:0] basesoc_cdcusb_asyncfifo1_fifo_in_payload_data;
wire          basesoc_cdcusb_asyncfifo1_fifo_out_first;
wire          basesoc_cdcusb_asyncfifo1_fifo_out_last;
wire    [7:0] basesoc_cdcusb_asyncfifo1_fifo_out_payload_data;
wire          basesoc_cdcusb_asyncfifo1_graycounter2_ce;
reg     [2:0] basesoc_cdcusb_asyncfifo1_graycounter2_q = 3'd0;
reg     [2:0] basesoc_cdcusb_asyncfifo1_graycounter2_q_binary = 3'd0;
wire    [2:0] basesoc_cdcusb_asyncfifo1_graycounter2_q_next;
reg     [2:0] basesoc_cdcusb_asyncfifo1_graycounter2_q_next_binary = 3'd0;
wire          basesoc_cdcusb_asyncfifo1_graycounter3_ce;
reg     [2:0] basesoc_cdcusb_asyncfifo1_graycounter3_q = 3'd0;
reg     [2:0] basesoc_cdcusb_asyncfifo1_graycounter3_q_binary = 3'd0;
wire    [2:0] basesoc_cdcusb_asyncfifo1_graycounter3_q_next;
reg     [2:0] basesoc_cdcusb_asyncfifo1_graycounter3_q_next_binary = 3'd0;
wire    [2:0] basesoc_cdcusb_asyncfifo1_produce_rdomain;
wire    [1:0] basesoc_cdcusb_asyncfifo1_rdport_adr;
wire    [9:0] basesoc_cdcusb_asyncfifo1_rdport_dat_r;
wire          basesoc_cdcusb_asyncfifo1_sink_first;
wire          basesoc_cdcusb_asyncfifo1_sink_last;
wire    [7:0] basesoc_cdcusb_asyncfifo1_sink_payload_data;
wire          basesoc_cdcusb_asyncfifo1_sink_ready;
wire          basesoc_cdcusb_asyncfifo1_sink_valid;
wire          basesoc_cdcusb_asyncfifo1_source_first;
wire          basesoc_cdcusb_asyncfifo1_source_last;
wire    [7:0] basesoc_cdcusb_asyncfifo1_source_payload_data;
wire          basesoc_cdcusb_asyncfifo1_source_ready;
wire          basesoc_cdcusb_asyncfifo1_source_valid;
wire    [1:0] basesoc_cdcusb_asyncfifo1_wrport_adr;
wire    [9:0] basesoc_cdcusb_asyncfifo1_wrport_dat_r;
wire    [9:0] basesoc_cdcusb_asyncfifo1_wrport_dat_w;
wire          basesoc_cdcusb_asyncfifo1_wrport_we;
wire          basesoc_cdcusb_cdcusbphy_address_reset;
wire    [7:0] basesoc_cdcusb_cdcusbphy_adr;
reg     [8:0] basesoc_cdcusb_cdcusbphy_bytes_addr = 9'd0;
reg     [8:0] basesoc_cdcusb_cdcusbphy_bytes_addr_fsm_f_next_value1 = 9'd0;
reg           basesoc_cdcusb_cdcusbphy_bytes_addr_fsm_f_next_value_ce1 = 1'd0;
reg     [5:0] basesoc_cdcusb_cdcusbphy_bytes_remaining = 6'd0;
reg     [5:0] basesoc_cdcusb_cdcusbphy_bytes_remaining_fsm_f_next_value0 = 6'd0;
reg           basesoc_cdcusb_cdcusbphy_bytes_remaining_fsm_f_next_value_ce0 = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_configure_set;
wire          basesoc_cdcusb_cdcusbphy_configured;
reg    [15:0] basesoc_cdcusb_cdcusbphy_configured_delay = 16'd65535;
wire    [6:0] basesoc_cdcusb_cdcusbphy_csrfield_addr;
reg           basesoc_cdcusb_cdcusbphy_csrfield_in = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrfield_out = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrfield_reset = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrfield_setup = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrstorage_re = 1'd0;
reg     [6:0] basesoc_cdcusb_cdcusbphy_csrstorage_storage = 7'd0;
wire          basesoc_cdcusb_cdcusbphy_csrtransform;
reg     [6:0] basesoc_cdcusb_cdcusbphy_csrtransform_address_addr0 = 7'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_address_re = 1'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_epno0 = 4'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_re = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_reset0 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_stall0 = 1'd0;
reg     [7:0] basesoc_cdcusb_cdcusbphy_csrtransform_in_data_data0 = 8'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_in_data_re = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_in_ev_enable_done0 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_in_ev_enable_re = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_enable0 = 1'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_epno0 = 4'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_re = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_reset0 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_stall0 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_out_ev_enable_done0 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_out_ev_enable_re = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_csrtransform_pullup_out_re;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_setup_ctrl_re = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_setup_ctrl_reset0 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_setup_ev_enable_re = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_setup_ev_enable_ready0 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_csrtransform_setup_ev_enable_reset0 = 1'd0;
wire    [7:0] basesoc_cdcusb_cdcusbphy_dat_r;
reg     [7:0] basesoc_cdcusb_cdcusbphy_data_d1 = 8'd0;
reg     [7:0] basesoc_cdcusb_cdcusbphy_data_d1_fsm_t_next_value0 = 8'd0;
reg           basesoc_cdcusb_cdcusbphy_data_d1_fsm_t_next_value_ce0 = 1'd0;
reg     [7:0] basesoc_cdcusb_cdcusbphy_data_d2 = 8'd0;
reg     [7:0] basesoc_cdcusb_cdcusbphy_data_d2_fsm_t_next_value1 = 8'd0;
reg           basesoc_cdcusb_cdcusbphy_data_d2_fsm_t_next_value_ce1 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_debug_packet_detected = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_delayed_re = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value1 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value_ce1 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_dtr = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_dtr_fsm_t_next_value6 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_dtr_fsm_t_next_value_ce6 = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_ev_irq;
reg           basesoc_cdcusb_cdcusbphy_in_next = 1'd0;
wire    [7:0] basesoc_cdcusb_cdcusbphy_inhandler_csrfield_data;
wire    [3:0] basesoc_cdcusb_cdcusbphy_inhandler_csrfield_epno;
wire          basesoc_cdcusb_cdcusbphy_inhandler_csrfield_have;
wire          basesoc_cdcusb_cdcusbphy_inhandler_csrfield_idle;
wire          basesoc_cdcusb_cdcusbphy_inhandler_csrfield_pend;
reg           basesoc_cdcusb_cdcusbphy_inhandler_csrfield_reset = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_inhandler_csrfield_stall = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_inhandler_ctrl_re = 1'd0;
reg     [6:0] basesoc_cdcusb_cdcusbphy_inhandler_ctrl_storage = 7'd0;
wire          basesoc_cdcusb_cdcusbphy_inhandler_data_buf_reset;
wire    [7:0] basesoc_cdcusb_cdcusbphy_inhandler_data_out;
reg           basesoc_cdcusb_cdcusbphy_inhandler_data_out_advance = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_inhandler_data_out_have;
reg           basesoc_cdcusb_cdcusbphy_inhandler_data_re = 1'd0;
reg     [7:0] basesoc_cdcusb_cdcusbphy_inhandler_data_storage = 8'd0;
wire          basesoc_cdcusb_cdcusbphy_inhandler_done0;
wire          basesoc_cdcusb_cdcusbphy_inhandler_done1;
wire          basesoc_cdcusb_cdcusbphy_inhandler_done2;
wire          basesoc_cdcusb_cdcusbphy_inhandler_dtb;
reg           basesoc_cdcusb_cdcusbphy_inhandler_dtb_reset = 1'd0;
reg    [15:0] basesoc_cdcusb_cdcusbphy_inhandler_dtbs = 16'd1;
reg           basesoc_cdcusb_cdcusbphy_inhandler_enable_re = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_inhandler_enable_storage = 1'd0;
wire   [15:0] basesoc_cdcusb_cdcusbphy_inhandler_ep_stall_mask;
wire          basesoc_cdcusb_cdcusbphy_inhandler_irq;
wire          basesoc_cdcusb_cdcusbphy_inhandler_is_in_packet;
wire          basesoc_cdcusb_cdcusbphy_inhandler_is_our_packet;
reg           basesoc_cdcusb_cdcusbphy_inhandler_packet_clear = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_inhandler_packet_pending = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_inhandler_packet_status;
wire          basesoc_cdcusb_cdcusbphy_inhandler_packet_trigger;
reg           basesoc_cdcusb_cdcusbphy_inhandler_pending_r = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_inhandler_pending_re = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_inhandler_pending_status;
reg           basesoc_cdcusb_cdcusbphy_inhandler_queued = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_inhandler_response;
reg    [15:0] basesoc_cdcusb_cdcusbphy_inhandler_stall_status = 16'd0;
wire          basesoc_cdcusb_cdcusbphy_inhandler_stalled;
reg     [5:0] basesoc_cdcusb_cdcusbphy_inhandler_status_status0 = 6'd0;
wire          basesoc_cdcusb_cdcusbphy_inhandler_status_status1;
reg     [5:0] basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_consume = 6'd0;
wire          basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_do_read;
reg     [6:0] basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_level0 = 7'd0;
wire    [6:0] basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_level1;
reg     [5:0] basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_produce = 6'd0;
wire    [5:0] basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_rdport_adr;
wire    [7:0] basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_rdport_dat_r;
wire          basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_rdport_re;
wire          basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_re;
reg           basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_readable = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_replace = 1'd0;
wire    [7:0] basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_din;
wire    [7:0] basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_dout;
wire          basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_re;
wire          basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_readable;
wire          basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_we;
wire          basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_writable;
reg     [5:0] basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_wrport_adr = 6'd0;
wire    [7:0] basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_wrport_dat_r;
wire    [7:0] basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_wrport_dat_w;
wire          basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_wrport_we;
reg           basesoc_cdcusb_cdcusbphy_inhandler_transmitted = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_inhandler_was_queued = 1'd0;
reg     [6:0] basesoc_cdcusb_cdcusbphy_new_address = 7'd0;
reg     [6:0] basesoc_cdcusb_cdcusbphy_new_address_fsm_t_next_value4 = 7'd0;
reg           basesoc_cdcusb_cdcusbphy_new_address_fsm_t_next_value_ce4 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_out_next = 1'd0;
wire    [7:0] basesoc_cdcusb_cdcusbphy_outhandler_csrfield_data;
wire          basesoc_cdcusb_cdcusbphy_outhandler_csrfield_enable;
wire    [3:0] basesoc_cdcusb_cdcusbphy_outhandler_csrfield_epno0;
wire    [3:0] basesoc_cdcusb_cdcusbphy_outhandler_csrfield_epno1;
wire          basesoc_cdcusb_cdcusbphy_outhandler_csrfield_have;
wire          basesoc_cdcusb_cdcusbphy_outhandler_csrfield_pend;
reg           basesoc_cdcusb_cdcusbphy_outhandler_csrfield_reset = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_outhandler_csrfield_stall;
reg           basesoc_cdcusb_cdcusbphy_outhandler_ctrl_re = 1'd0;
reg     [6:0] basesoc_cdcusb_cdcusbphy_outhandler_ctrl_storage = 7'd0;
wire          basesoc_cdcusb_cdcusbphy_outhandler_data_buf_reset;
reg     [7:0] basesoc_cdcusb_cdcusbphy_outhandler_data_recv_payload = 8'd0;
reg           basesoc_cdcusb_cdcusbphy_outhandler_data_recv_put = 1'd0;
wire    [7:0] basesoc_cdcusb_cdcusbphy_outhandler_data_status;
reg           basesoc_cdcusb_cdcusbphy_outhandler_data_we = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_outhandler_done0;
wire          basesoc_cdcusb_cdcusbphy_outhandler_done1;
wire          basesoc_cdcusb_cdcusbphy_outhandler_done2;
reg           basesoc_cdcusb_cdcusbphy_outhandler_enable_re = 1'd0;
reg    [15:0] basesoc_cdcusb_cdcusbphy_outhandler_enable_status = 16'd0;
reg           basesoc_cdcusb_cdcusbphy_outhandler_enable_storage = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_outhandler_enabled;
reg    [15:0] basesoc_cdcusb_cdcusbphy_outhandler_ep_mask = 16'd1;
reg     [3:0] basesoc_cdcusb_cdcusbphy_outhandler_epno = 4'd0;
wire          basesoc_cdcusb_cdcusbphy_outhandler_irq;
wire          basesoc_cdcusb_cdcusbphy_outhandler_is_out_packet;
reg           basesoc_cdcusb_cdcusbphy_outhandler_packet_clear = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_outhandler_packet_pending = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_outhandler_packet_status;
wire          basesoc_cdcusb_cdcusbphy_outhandler_packet_trigger;
reg           basesoc_cdcusb_cdcusbphy_outhandler_pending_r = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_outhandler_pending_re = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_outhandler_pending_status;
reg           basesoc_cdcusb_cdcusbphy_outhandler_responding = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_outhandler_response;
reg    [15:0] basesoc_cdcusb_cdcusbphy_outhandler_stall_status = 16'd0;
wire          basesoc_cdcusb_cdcusbphy_outhandler_stalled;
reg     [5:0] basesoc_cdcusb_cdcusbphy_outhandler_status_status0 = 6'd0;
wire          basesoc_cdcusb_cdcusbphy_outhandler_status_status1;
reg     [6:0] basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_consume = 7'd0;
wire          basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_do_read;
reg     [6:0] basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_level0 = 7'd0;
wire    [6:0] basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_level1;
reg     [6:0] basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_produce = 7'd0;
wire    [6:0] basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_rdport_adr;
wire    [7:0] basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_rdport_dat_r;
wire          basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_rdport_re;
wire          basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_re;
reg           basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_readable = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_replace = 1'd0;
wire    [7:0] basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_din;
wire    [7:0] basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_dout;
wire          basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_re;
wire          basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_readable;
wire          basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_we;
wire          basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_writable;
reg     [6:0] basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_wrport_adr = 7'd0;
wire    [7:0] basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_wrport_dat_r;
wire    [7:0] basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_wrport_dat_w;
wire          basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_wrport_we;
reg           basesoc_cdcusb_cdcusbphy_outhandler_usb_reset = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_pullup_re = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_pullup_storage = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_re_d1 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_re_d1_fsm_t_next_value2 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_re_d1_fsm_t_next_value_ce2 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_re_d2 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_re_d2_fsm_t_next_value3 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_re_d2_fsm_t_next_value_ce3 = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_resetinserter_reset;
reg     [8:0] basesoc_cdcusb_cdcusbphy_response_addr = 9'd0;
reg     [5:0] basesoc_cdcusb_cdcusbphy_response_len = 6'd0;
reg           basesoc_cdcusb_cdcusbphy_rts = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_rts_fsm_t_next_value5 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_rts_fsm_t_next_value_ce5 = 1'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_setup_index = 4'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_setup_index_fsm_next_value0 = 4'd0;
reg           basesoc_cdcusb_cdcusbphy_setup_index_fsm_next_value_ce0 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_begin = 1'd0;
wire    [7:0] basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_data0;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_data1;
wire    [3:0] basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_epno;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_have;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_is_in;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_pend;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_reset = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_ctrl_re = 1'd0;
reg     [5:0] basesoc_cdcusb_cdcusbphy_setuphandler_ctrl_storage = 6'd0;
reg     [7:0] basesoc_cdcusb_cdcusbphy_setuphandler_data_recv_payload = 8'd0;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_data_recv_put = 1'd0;
wire    [7:0] basesoc_cdcusb_cdcusbphy_setuphandler_data_status;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_data_we = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_epno = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_enable_re = 1'd0;
reg     [1:0] basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_enable_storage = 2'd0;
reg     [1:0] basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_pending_r = 2'd0;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_pending_re = 1'd0;
reg     [1:0] basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_pending_status = 2'd0;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_ready0;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_ready1;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_ready2;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_reset0;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_reset1;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_reset2;
reg     [1:0] basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_status_status = 2'd0;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_inner_reset;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_irq;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_packet_clear = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_packet_pending = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_packet_status;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_packet_trigger;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_reset = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_reset_clear = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_reset_pending = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_reset_status;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_reset_trigger;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_reset_trigger_d = 1'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_consume = 4'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_data_byte = 4'd0;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_do_read;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_empty;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_have_data_stage = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_is_in = 1'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_level0 = 4'd0;
wire    [3:0] basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_level1;
reg     [3:0] basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_produce = 4'd0;
wire    [3:0] basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_rdport_adr;
wire    [7:0] basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_rdport_dat_r;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_rdport_re;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_re;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_readable = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_replace = 1'd0;
reg     [7:0] basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_din = 8'd0;
wire    [7:0] basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_dout;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_re;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_readable;
reg           basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_we = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_writable;
reg     [3:0] basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_wrport_adr = 4'd0;
wire    [7:0] basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_wrport_dat_r;
wire    [7:0] basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_wrport_dat_w;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_wrport_we;
reg     [7:0] basesoc_cdcusb_cdcusbphy_setuphandler_status_status = 8'd0;
wire          basesoc_cdcusb_cdcusbphy_setuphandler_usb_reset;
reg           basesoc_cdcusb_cdcusbphy_sink_first = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_sink_last = 1'd0;
reg     [7:0] basesoc_cdcusb_cdcusbphy_sink_payload_data = 8'd0;
wire          basesoc_cdcusb_cdcusbphy_sink_ready;
reg           basesoc_cdcusb_cdcusbphy_sink_valid = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_source_first;
wire          basesoc_cdcusb_cdcusbphy_source_last;
wire    [7:0] basesoc_cdcusb_cdcusbphy_source_payload_data;
reg           basesoc_cdcusb_cdcusbphy_source_ready = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_source_valid;
reg     [3:0] basesoc_cdcusb_cdcusbphy_status = 4'd0;
reg    [31:0] basesoc_cdcusb_cdcusbphy_usbPacket = 32'd0;
reg    [31:0] basesoc_cdcusb_cdcusbphy_usbPacket_fsm_lowernext_next_value0 = 32'd0;
reg           basesoc_cdcusb_cdcusbphy_usbPacket_fsm_lowernext_next_value_ce0 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_abort = 1'd0;
reg     [6:0] basesoc_cdcusb_cdcusbphy_usb_core_addr = 7'd0;
reg     [6:0] basesoc_cdcusb_cdcusbphy_usb_core_addr_csrtransform_next_value = 7'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_addr_csrtransform_next_value_ce = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_arm = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_commit = 1'd0;
reg     [4:0] basesoc_cdcusb_cdcusbphy_usb_core_crc5 = 5'd0;
reg     [4:0] basesoc_cdcusb_cdcusbphy_usb_core_crc5_csrtransform_packetheaderdecode_next_value3 = 5'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_crc5_csrtransform_packetheaderdecode_next_value_ce3 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_data_end = 1'd0;
wire    [7:0] basesoc_cdcusb_cdcusbphy_usb_core_data_recv_payload;
reg           basesoc_cdcusb_cdcusbphy_usb_core_data_recv_put = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_data_send_get = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_data_send_have = 1'd0;
reg     [7:0] basesoc_cdcusb_cdcusbphy_usb_core_data_send_payload = 8'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_dtb;
wire          basesoc_cdcusb_cdcusbphy_usb_core_end;
reg     [3:0] basesoc_cdcusb_cdcusbphy_usb_core_endp = 4'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_endp4 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_endp4_csrtransform_packetheaderdecode_next_value1 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_endp4_csrtransform_packetheaderdecode_next_value_ce1 = 1'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_usb_core_endp_csrtransform_f_next_value1 = 4'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_endp_csrtransform_f_next_value_ce1 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_error = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_idle = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_is_el0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_is_el1;
reg     [6:0] basesoc_cdcusb_cdcusbphy_usb_core_o_addr = 7'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_o_decoded = 1'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_usb_core_o_endp = 4'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_usb_core_o_endp_csrtransform_packetheaderdecode_next_value2 = 4'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_o_endp_csrtransform_packetheaderdecode_next_value_ce2 = 1'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_usb_core_o_pid = 4'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_usb_core_o_pid_csrtransform_packetheaderdecode_next_value0 = 4'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_o_pid_csrtransform_packetheaderdecode_next_value_ce0 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_poll = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rdy = 1'd1;
wire          basesoc_cdcusb_cdcusbphy_usb_core_reset0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_reset1 = 1'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_usb_core_response_pid = 4'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_usb_core_response_pid_csrtransform_t_next_value = 4'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_response_pid_csrtransform_t_next_value_ce = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_retry = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_drop_bit = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_data;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_valid;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_o_data = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_o_error = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_o_stall = 1'd1;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_reset;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_data;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_se0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_valid;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_o_pkt_active;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_o_pkt_end;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_o_pkt_start;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_pkt_active = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_pkt_end = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_pkt_start = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_reset;
wire    [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_dpair;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_flag_end;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_flag_start;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_flag_valid;
reg     [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_din = 2'd0;
wire    [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_dout;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_re;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_readable;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_we;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_writable;
wire    [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_consume_wdomain;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_ce;
reg     [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q = 2'd0;
reg     [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q_binary = 2'd0;
wire    [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q_next;
reg     [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q_next_binary = 2'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_ce;
reg     [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q = 2'd0;
reg     [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q_binary = 2'd0;
wire    [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q_next;
reg     [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q_next_binary = 2'd0;
wire    [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_produce_rdomain;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_rdport_adr;
wire    [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_rdport_dat_r;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_wrport_adr;
wire    [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_wrport_dat_r;
wire    [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_wrport_dat_w;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_wrport_we;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_i_usbn;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_i_usbp;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_last_reset = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dj0 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dj1 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dk0 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dk1 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dt = 1'd0;
reg     [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_phase = 2'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_se00 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_se01 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_se10 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_se11 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_valid = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_i_dj;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_i_dk;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_i_se0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_i_valid;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_last_data = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_o_data = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_o_se0 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_o_valid = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_o_bit_strobe;
wire    [7:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_o_data_payload;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_o_data_strobe;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_o_pkt_end;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_o_pkt_in_progress = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_o_pkt_start;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_o_reset;
wire    [7:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_din;
wire    [7:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_dout;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_re;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_readable;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_we;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_writable;
wire    [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_consume_wdomain;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_ce;
reg     [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q = 2'd0;
reg     [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q_binary = 2'd0;
wire    [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q_next;
reg     [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q_next_binary = 2'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_ce;
reg     [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q = 2'd0;
reg     [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q_binary = 2'd0;
wire    [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q_next;
reg     [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q_next_binary = 2'd0;
wire    [1:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_produce_rdomain;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_rdport_adr;
wire    [7:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_rdport_dat_r;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_wrport_adr;
wire    [7:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_wrport_dat_r;
wire    [7:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_wrport_dat_w;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_wrport_we;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_reset0 = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_reset1;
reg     [6:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_reset_counter = 7'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_i_data;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_i_valid;
wire    [7:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_o_data;
reg           basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_o_put = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_reset;
reg     [8:0] basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_shift_reg = 9'd1;
reg           basesoc_cdcusb_cdcusbphy_usb_core_setup = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_sta = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_start = 1'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_usb_core_tok = 4'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_usb_core_tok_csrtransform_f_next_value0 = 4'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tok_csrtransform_f_next_value_ce0 = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_transfer_reset;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_i_data;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_o_data = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_o_stall;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_o_will_stall = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_reset;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_stuff_bit = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_valid_data = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_da_reset_bitstuff = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_da_reset_shifter = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_fit_dat;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_fit_oe;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_i_bit_strobe;
reg     [7:0] basesoc_cdcusb_cdcusbphy_usb_core_tx_i_data_payload = 8'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe_csrtransform_txpacketsend_next_value0 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe_csrtransform_txpacketsend_next_value_ce0 = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_dat;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_data;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_oe;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_valid;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_o_oe = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_o_usbn = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_o_usbp = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_oe0 = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_oe1;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbn = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbp = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_o_data_strobe;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_o_oe;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_o_usbn;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_o_usbp;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_ce;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_empty;
wire    [7:0] basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_i_data;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_o_data;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_o_empty;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_o_get = 1'd0;
reg     [7:0] basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_pos = 8'd1;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_reset;
reg     [7:0] basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_shifter = 8'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_sp_bit;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_sp_o_data_strobe;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_sp_reset_bitstuff;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_sp_reset_shifter;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_stall;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_state_data;
reg     [1:0] basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray = 2'd0;
reg     [1:0] basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value1 = 2'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value_ce1 = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_tx_state_sync;
reg     [7:0] basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse = 8'd0;
reg     [7:0] basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse_csrtransform_txpipeline_next_value0 = 8'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse_csrtransform_txpipeline_next_value_ce0 = 1'd0;
reg    [15:0] basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur = 16'd65535;
wire    [7:0] basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat;
reg    [15:0] basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next = 16'd64770;
wire    [7:0] basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_payload0;
wire    [7:0] basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_payload1;
wire          basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_ready;
reg           basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_strobe = 1'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_pid = 4'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_pkt_start = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_txstate_is_ongoing0 = 1'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_txstate_is_ongoing1 = 1'd0;
wire   [15:0] basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_crc;
reg           basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_data_ack = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_oe12;
reg           basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_pkt_end = 1'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_usb_core_txstate_pid = 4'd0;
reg     [3:0] basesoc_cdcusb_cdcusbphy_usb_core_txstate_pid_csrtransform_txpacketsend_next_value1 = 4'd0;
reg           basesoc_cdcusb_cdcusbphy_usb_core_txstate_pid_csrtransform_txpacketsend_next_value_ce1 = 1'd0;
wire          basesoc_cdcusb_cdcusbphy_usb_core_txstate_reset;
wire          basesoc_cdcusb_cdcusbphy_usb_core_usb_reset;
reg     [7:0] basesoc_cdcusb_cdcusbphy_wLength = 8'd0;
reg     [7:0] basesoc_cdcusb_cdcusbphy_wLength_fsm_lowernext_next_value1 = 8'd0;
reg           basesoc_cdcusb_cdcusbphy_wLength_fsm_lowernext_next_value_ce1 = 1'd0;
wire   [15:0] basesoc_cdcusb_cdcusbphy_wRequestAndType;
wire   [15:0] basesoc_cdcusb_cdcusbphy_wValue;
wire          basesoc_cdcusb_configured_r;
reg           basesoc_cdcusb_configured_re = 1'd0;
reg           basesoc_cdcusb_configured_w = 1'd0;
reg           basesoc_cdcusb_configured_we = 1'd0;
wire          basesoc_cdcusb_dtr;
reg           basesoc_cdcusb_enable_re = 1'd0;
reg     [1:0] basesoc_cdcusb_enable_storage = 2'd0;
wire          basesoc_cdcusb_i;
wire          basesoc_cdcusb_irq;
wire          basesoc_cdcusb_o;
reg     [1:0] basesoc_cdcusb_pending_r = 2'd0;
reg           basesoc_cdcusb_pending_re = 1'd0;
reg     [1:0] basesoc_cdcusb_pending_status = 2'd0;
wire          basesoc_cdcusb_pending_we;
wire          basesoc_cdcusb_rts;
wire          basesoc_cdcusb_rx0;
wire          basesoc_cdcusb_rx1;
wire          basesoc_cdcusb_rx2;
reg           basesoc_cdcusb_rx_clear = 1'd0;
reg           basesoc_cdcusb_rx_pending = 1'd0;
wire          basesoc_cdcusb_rx_status;
wire          basesoc_cdcusb_rx_trigger;
reg           basesoc_cdcusb_rx_trigger_d = 1'd0;
reg           basesoc_cdcusb_rxempty_re = 1'd0;
wire          basesoc_cdcusb_rxempty_status;
wire          basesoc_cdcusb_rxempty_we;
wire    [7:0] basesoc_cdcusb_rxtx_r;
reg           basesoc_cdcusb_rxtx_re = 1'd0;
wire    [7:0] basesoc_cdcusb_rxtx_w;
reg           basesoc_cdcusb_rxtx_we = 1'd0;
wire          basesoc_cdcusb_sink_sink_first;
wire          basesoc_cdcusb_sink_sink_last;
wire    [7:0] basesoc_cdcusb_sink_sink_payload_data;
wire          basesoc_cdcusb_sink_sink_ready;
wire          basesoc_cdcusb_sink_sink_valid;
wire          basesoc_cdcusb_source_source_first;
wire          basesoc_cdcusb_source_source_last;
wire    [7:0] basesoc_cdcusb_source_source_payload_data;
wire          basesoc_cdcusb_source_source_ready;
wire          basesoc_cdcusb_source_source_valid;
reg           basesoc_cdcusb_status_re = 1'd0;
reg     [1:0] basesoc_cdcusb_status_status = 2'd0;
wire          basesoc_cdcusb_status_we;
reg           basesoc_cdcusb_toggle_i = 1'd0;
wire          basesoc_cdcusb_toggle_o;
reg           basesoc_cdcusb_toggle_o_r = 1'd0;
reg           basesoc_cdcusb_tuning_word_re = 1'd0;
reg    [31:0] basesoc_cdcusb_tuning_word_storage = 32'd0;
wire          basesoc_cdcusb_tx0;
wire          basesoc_cdcusb_tx1;
wire          basesoc_cdcusb_tx2;
reg           basesoc_cdcusb_tx_clear = 1'd0;
reg           basesoc_cdcusb_tx_pending = 1'd0;
wire          basesoc_cdcusb_tx_status;
wire          basesoc_cdcusb_tx_trigger;
reg           basesoc_cdcusb_tx_trigger_d = 1'd0;
reg           basesoc_cdcusb_txfull_re = 1'd0;
wire          basesoc_cdcusb_txfull_status;
wire          basesoc_cdcusb_txfull_we;
wire          basesoc_cpu_rst;
reg           basesoc_reset_re = 1'd0;
reg     [1:0] basesoc_reset_storage = 2'd0;
reg           basesoc_scratch_re = 1'd0;
reg    [31:0] basesoc_scratch_storage = 32'd305419896;
reg           basesoc_soc_rst = 1'd0;
reg           basesoc_timer_en_re = 1'd0;
reg           basesoc_timer_en_storage = 1'd0;
reg           basesoc_timer_enable_re = 1'd0;
reg           basesoc_timer_enable_storage = 1'd0;
wire          basesoc_timer_irq;
reg           basesoc_timer_load_re = 1'd0;
reg    [31:0] basesoc_timer_load_storage = 32'd0;
reg           basesoc_timer_pending_r = 1'd0;
reg           basesoc_timer_pending_re = 1'd0;
wire          basesoc_timer_pending_status;
wire          basesoc_timer_pending_we;
reg           basesoc_timer_reload_re = 1'd0;
reg    [31:0] basesoc_timer_reload_storage = 32'd0;
reg           basesoc_timer_status_re = 1'd0;
wire          basesoc_timer_status_status;
wire          basesoc_timer_status_we;
reg           basesoc_timer_update_value_re = 1'd0;
reg           basesoc_timer_update_value_storage = 1'd0;
reg    [31:0] basesoc_timer_value = 32'd0;
reg           basesoc_timer_value_re = 1'd0;
reg    [31:0] basesoc_timer_value_status = 32'd0;
wire          basesoc_timer_value_we;
wire          basesoc_timer_zero0;
wire          basesoc_timer_zero1;
wire          basesoc_timer_zero2;
reg           basesoc_timer_zero_clear = 1'd0;
reg           basesoc_timer_zero_pending = 1'd0;
wire          basesoc_timer_zero_status;
wire          basesoc_timer_zero_trigger;
reg           basesoc_timer_zero_trigger_d = 1'd0;
reg           basesoc_usb_iobuf_usb_n_rx = 1'd0;
wire          basesoc_usb_iobuf_usb_n_t_i;
wire          basesoc_usb_iobuf_usb_n_tx;
reg           basesoc_usb_iobuf_usb_p_rx = 1'd0;
wire          basesoc_usb_iobuf_usb_p_t_i;
wire          basesoc_usb_iobuf_usb_p_tx;
wire          basesoc_usb_iobuf_usb_pullup;
wire          basesoc_usb_iobuf_usb_tx_en;
reg           bus_ack = 1'd0;
reg    [29:0] bus_adr = 30'd0;
reg           bus_cyc = 1'd0;
reg    [31:0] bus_dat_r = 32'd0;
reg    [31:0] bus_dat_w = 32'd0;
reg     [3:0] bus_sel = 4'd0;
reg           bus_stb = 1'd0;
reg           bus_we = 1'd0;
reg           chaser = 1'd0;
reg    [22:0] count = 23'd6000000;
wire          crg_clkin;
wire          crg_clkout;
wire          crg_locked;
reg    [15:0] crg_por_count = 16'd65535;
wire          crg_por_done;
reg           crg_reset = 1'd0;
reg           crg_rst = 1'd0;
wire    [5:0] csr_bankarray_adr;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_r;
reg           csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_w;
reg           csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_r;
reg           csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_w;
reg           csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_r;
reg           csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_w;
reg           csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          csr_bankarray_csrbank0_sel;
wire          csr_bankarray_csrbank1_out0_r;
reg           csr_bankarray_csrbank1_out0_re = 1'd0;
wire          csr_bankarray_csrbank1_out0_w;
reg           csr_bankarray_csrbank1_out0_we = 1'd0;
wire          csr_bankarray_csrbank1_sel;
wire    [7:0] csr_bankarray_csrbank2_mmap_dummy_bits0_r;
reg           csr_bankarray_csrbank2_mmap_dummy_bits0_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank2_mmap_dummy_bits0_w;
reg           csr_bankarray_csrbank2_mmap_dummy_bits0_we = 1'd0;
wire    [7:0] csr_bankarray_csrbank2_phy_clk_divisor0_r;
reg           csr_bankarray_csrbank2_phy_clk_divisor0_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank2_phy_clk_divisor0_w;
reg           csr_bankarray_csrbank2_phy_clk_divisor0_we = 1'd0;
wire          csr_bankarray_csrbank2_sel;
wire          csr_bankarray_csrbank3_en0_r;
reg           csr_bankarray_csrbank3_en0_re = 1'd0;
wire          csr_bankarray_csrbank3_en0_w;
reg           csr_bankarray_csrbank3_en0_we = 1'd0;
wire          csr_bankarray_csrbank3_ev_enable0_r;
reg           csr_bankarray_csrbank3_ev_enable0_re = 1'd0;
wire          csr_bankarray_csrbank3_ev_enable0_w;
reg           csr_bankarray_csrbank3_ev_enable0_we = 1'd0;
wire          csr_bankarray_csrbank3_ev_pending_r;
reg           csr_bankarray_csrbank3_ev_pending_re = 1'd0;
wire          csr_bankarray_csrbank3_ev_pending_w;
reg           csr_bankarray_csrbank3_ev_pending_we = 1'd0;
wire          csr_bankarray_csrbank3_ev_status_r;
reg           csr_bankarray_csrbank3_ev_status_re = 1'd0;
wire          csr_bankarray_csrbank3_ev_status_w;
reg           csr_bankarray_csrbank3_ev_status_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_load0_r;
reg           csr_bankarray_csrbank3_load0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_load0_w;
reg           csr_bankarray_csrbank3_load0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_reload0_r;
reg           csr_bankarray_csrbank3_reload0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_reload0_w;
reg           csr_bankarray_csrbank3_reload0_we = 1'd0;
wire          csr_bankarray_csrbank3_sel;
wire          csr_bankarray_csrbank3_update_value0_r;
reg           csr_bankarray_csrbank3_update_value0_re = 1'd0;
wire          csr_bankarray_csrbank3_update_value0_w;
reg           csr_bankarray_csrbank3_update_value0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_value_r;
reg           csr_bankarray_csrbank3_value_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_value_w;
reg           csr_bankarray_csrbank3_value_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank4_ev_enable0_r;
reg           csr_bankarray_csrbank4_ev_enable0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank4_ev_enable0_w;
reg           csr_bankarray_csrbank4_ev_enable0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank4_ev_pending_r;
reg           csr_bankarray_csrbank4_ev_pending_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank4_ev_pending_w;
reg           csr_bankarray_csrbank4_ev_pending_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank4_ev_status_r;
reg           csr_bankarray_csrbank4_ev_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank4_ev_status_w;
reg           csr_bankarray_csrbank4_ev_status_we = 1'd0;
wire          csr_bankarray_csrbank4_rxempty_r;
reg           csr_bankarray_csrbank4_rxempty_re = 1'd0;
wire          csr_bankarray_csrbank4_rxempty_w;
reg           csr_bankarray_csrbank4_rxempty_we = 1'd0;
wire          csr_bankarray_csrbank4_sel;
wire   [31:0] csr_bankarray_csrbank4_tuning_word0_r;
reg           csr_bankarray_csrbank4_tuning_word0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_tuning_word0_w;
reg           csr_bankarray_csrbank4_tuning_word0_we = 1'd0;
wire          csr_bankarray_csrbank4_txfull_r;
reg           csr_bankarray_csrbank4_txfull_re = 1'd0;
wire          csr_bankarray_csrbank4_txfull_w;
reg           csr_bankarray_csrbank4_txfull_we = 1'd0;
wire    [7:0] csr_bankarray_dat_r;
wire   [13:0] csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface0_bank_bus_dat_w;
wire          csr_bankarray_interface0_bank_bus_re;
wire          csr_bankarray_interface0_bank_bus_we;
wire   [13:0] csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface1_bank_bus_dat_w;
wire          csr_bankarray_interface1_bank_bus_re;
wire          csr_bankarray_interface1_bank_bus_we;
wire   [13:0] csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface2_bank_bus_dat_w;
wire          csr_bankarray_interface2_bank_bus_re;
wire          csr_bankarray_interface2_bank_bus_we;
wire   [13:0] csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface3_bank_bus_dat_w;
wire          csr_bankarray_interface3_bank_bus_re;
wire          csr_bankarray_interface3_bank_bus_we;
wire   [13:0] csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface4_bank_bus_dat_w;
wire          csr_bankarray_interface4_bank_bus_re;
wire          csr_bankarray_interface4_bank_bus_we;
wire          csr_bankarray_sel;
reg           csr_bankarray_sel_r = 1'd0;
wire   [13:0] csr_bankarray_sram_bus_adr;
reg    [31:0] csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_sram_bus_dat_w;
wire          csr_bankarray_sram_bus_re;
wire          csr_bankarray_sram_bus_we;
wire   [13:0] csr_interconnect_adr;
wire   [31:0] csr_interconnect_dat_r;
wire   [31:0] csr_interconnect_dat_w;
wire          csr_interconnect_re;
wire          csr_interconnect_we;
reg     [3:0] csrtransform_clockdomainsrenamer_next_state = 4'd0;
reg     [3:0] csrtransform_clockdomainsrenamer_state = 4'd1;
reg     [1:0] csrtransform_fsm_next_state = 2'd0;
reg     [1:0] csrtransform_fsm_state = 2'd0;
reg     [2:0] csrtransform_next_state = 3'd0;
reg     [2:0] csrtransform_packetheaderdecode_next_state = 3'd0;
reg     [6:0] csrtransform_packetheaderdecode_next_value = 7'd0;
reg           csrtransform_packetheaderdecode_next_value_ce = 1'd0;
reg     [2:0] csrtransform_packetheaderdecode_state = 3'd0;
reg     [2:0] csrtransform_resetinserter_next_state = 3'd0;
reg     [2:0] csrtransform_resetinserter_state = 3'd0;
reg     [2:0] csrtransform_rxpipeline_next_state = 3'd0;
reg     [2:0] csrtransform_rxpipeline_rxbitstuffremover_next_state = 3'd0;
reg     [2:0] csrtransform_rxpipeline_rxbitstuffremover_state = 3'd0;
reg     [2:0] csrtransform_rxpipeline_rxpacketdetect_next_state = 3'd0;
reg     [2:0] csrtransform_rxpipeline_rxpacketdetect_state = 3'd0;
reg     [2:0] csrtransform_rxpipeline_state = 3'd0;
reg     [2:0] csrtransform_state = 3'd0;
reg     [2:0] csrtransform_txnrziencoder_next_state = 3'd0;
reg     [2:0] csrtransform_txnrziencoder_state = 3'd0;
reg     [3:0] csrtransform_txpacketsend_next_state = 4'd0;
reg     [3:0] csrtransform_txpacketsend_state = 4'd0;
wire   [15:0] datain0;
wire   [15:0] datain1;
wire   [15:0] datain2;
wire   [15:0] datain3;
wire   [15:0] dataout0;
wire   [15:0] dataout1;
wire   [15:0] dataout2;
wire   [15:0] dataout3;
wire          done;
reg     [2:0] fsm_next_state = 3'd0;
reg     [2:0] fsm_state = 3'd0;
wire          grant;
reg           interface0_ack = 1'd0;
reg    [29:0] interface0_adr = 30'd0;
reg           interface0_cyc = 1'd0;
reg    [31:0] interface0_dat_r = 32'd0;
reg    [31:0] interface0_dat_w = 32'd0;
reg     [3:0] interface0_sel = 4'd0;
reg           interface0_stb = 1'd0;
reg           interface0_we = 1'd0;
reg    [13:0] interface1_adr = 14'd0;
wire   [31:0] interface1_dat_r;
reg    [31:0] interface1_dat_w = 32'd0;
reg           interface1_re = 1'd0;
reg           interface1_we = 1'd0;
reg           leds = 1'd0;
reg     [3:0] litespimmap_next_state = 4'd0;
reg     [3:0] litespimmap_state = 4'd0;
reg     [1:0] litespiphy_next_state = 2'd0;
reg     [1:0] litespiphy_state = 2'd0;
reg     [3:0] maskwren0 = 4'd0;
reg     [3:0] maskwren1 = 4'd0;
reg     [3:0] maskwren2 = 4'd0;
reg     [3:0] maskwren3 = 4'd0;
reg           mode = 1'd0;
reg           multiregimpl00 = 1'd0;
reg           multiregimpl01 = 1'd0;
reg           multiregimpl02 = 1'd0;
reg           multiregimpl10 = 1'd0;
reg     [2:0] multiregimpl100 = 3'd0;
reg     [2:0] multiregimpl101 = 3'd0;
reg           multiregimpl11 = 1'd0;
reg     [2:0] multiregimpl110 = 3'd0;
reg     [2:0] multiregimpl111 = 3'd0;
reg           multiregimpl12 = 1'd0;
reg     [2:0] multiregimpl120 = 3'd0;
reg     [2:0] multiregimpl121 = 3'd0;
reg     [2:0] multiregimpl130 = 3'd0;
reg     [2:0] multiregimpl131 = 3'd0;
reg           multiregimpl2 = 1'd0;
reg     [1:0] multiregimpl30 = 2'd0;
reg     [1:0] multiregimpl31 = 2'd0;
reg     [1:0] multiregimpl40 = 2'd0;
reg     [1:0] multiregimpl41 = 2'd0;
reg     [1:0] multiregimpl50 = 2'd0;
reg     [1:0] multiregimpl51 = 2'd0;
reg     [1:0] multiregimpl60 = 2'd0;
reg     [1:0] multiregimpl61 = 2'd0;
reg           multiregimpl70 = 1'd0;
reg           multiregimpl71 = 1'd0;
reg           multiregimpl80 = 1'd0;
reg           multiregimpl81 = 1'd0;
reg           multiregimpl90 = 1'd0;
reg           multiregimpl91 = 1'd0;
reg           next_state = 1'd0;
wire          por_clk;
reg           por_rst = 1'd0;
reg           re = 1'd0;
wire          request;
wire          rst10;
wire          rst11;
wire          rst12;
wire          rx_demux_sel;
wire          rx_demux_sink_first;
wire          rx_demux_sink_last;
wire   [31:0] rx_demux_sink_payload_data;
reg           rx_demux_sink_ready = 1'd0;
wire          rx_demux_sink_valid;
reg           rx_demux_source_first = 1'd0;
reg           rx_demux_source_last = 1'd0;
reg    [31:0] rx_demux_source_payload_data = 32'd0;
wire          rx_demux_source_ready;
reg           rx_demux_source_valid = 1'd0;
wire    [8:0] slice_proxy;
reg           spiflash_cs = 1'd0;
wire          spiflash_internal_port_sink_first;
wire          spiflash_internal_port_sink_last;
wire   [31:0] spiflash_internal_port_sink_payload_data;
wire    [5:0] spiflash_internal_port_sink_payload_len;
wire    [7:0] spiflash_internal_port_sink_payload_mask;
wire    [3:0] spiflash_internal_port_sink_payload_width;
wire          spiflash_internal_port_sink_ready;
wire          spiflash_internal_port_sink_valid;
wire          spiflash_internal_port_source_first;
wire          spiflash_internal_port_source_last;
wire   [31:0] spiflash_internal_port_source_payload_data;
wire          spiflash_internal_port_source_ready;
wire          spiflash_internal_port_source_valid;
reg           spiflash_litespimmap0 = 1'd0;
reg           spiflash_litespimmap1 = 1'd0;
reg    [29:0] spiflash_litespimmap_burst_adr = 30'd0;
reg    [29:0] spiflash_litespimmap_burst_adr_litespimmap_f_next_value = 30'd0;
reg           spiflash_litespimmap_burst_adr_litespimmap_f_next_value_ce = 1'd0;
reg           spiflash_litespimmap_burst_cs = 1'd0;
reg           spiflash_litespimmap_burst_cs_litespimmap_next_value = 1'd0;
reg           spiflash_litespimmap_burst_cs_litespimmap_next_value_ce = 1'd0;
reg           spiflash_litespimmap_bus_ack = 1'd0;
reg    [29:0] spiflash_litespimmap_bus_adr = 30'd0;
wire    [1:0] spiflash_litespimmap_bus_bte;
wire    [2:0] spiflash_litespimmap_bus_cti;
wire          spiflash_litespimmap_bus_cyc;
reg    [31:0] spiflash_litespimmap_bus_dat_r = 32'd0;
wire   [31:0] spiflash_litespimmap_bus_dat_w;
reg           spiflash_litespimmap_bus_err = 1'd0;
wire    [3:0] spiflash_litespimmap_bus_sel;
wire          spiflash_litespimmap_bus_stb;
wire          spiflash_litespimmap_bus_we;
reg     [1:0] spiflash_litespimmap_byte_count = 2'd0;
reg     [1:0] spiflash_litespimmap_byte_count_litespimmap_t_next_value = 2'd0;
reg           spiflash_litespimmap_byte_count_litespimmap_t_next_value_ce = 1'd0;
reg     [8:0] spiflash_litespimmap_count = 9'd256;
reg           spiflash_litespimmap_cs = 1'd0;
reg    [31:0] spiflash_litespimmap_data_write = 32'd0;
reg    [31:0] spiflash_litespimmap_data_write_litespimmap_t_f_next_value1 = 32'd0;
reg           spiflash_litespimmap_data_write_litespimmap_t_f_next_value_ce1 = 1'd0;
wire          spiflash_litespimmap_done;
reg    [31:0] spiflash_litespimmap_dummy = 32'd57005;
reg           spiflash_litespimmap_re = 1'd0;
reg           spiflash_litespimmap_request = 1'd0;
wire          spiflash_litespimmap_sink_first;
wire          spiflash_litespimmap_sink_last;
wire   [31:0] spiflash_litespimmap_sink_payload_data;
reg           spiflash_litespimmap_sink_ready = 1'd0;
wire          spiflash_litespimmap_sink_valid;
reg           spiflash_litespimmap_source_first = 1'd0;
reg           spiflash_litespimmap_source_last = 1'd0;
reg    [31:0] spiflash_litespimmap_source_payload_data = 32'd0;
reg     [5:0] spiflash_litespimmap_source_payload_len = 6'd0;
reg     [7:0] spiflash_litespimmap_source_payload_mask = 8'd0;
reg     [3:0] spiflash_litespimmap_source_payload_width = 4'd0;
wire          spiflash_litespimmap_source_ready;
reg           spiflash_litespimmap_source_valid = 1'd0;
wire    [7:0] spiflash_litespimmap_spi_dummy_bits;
reg     [7:0] spiflash_litespimmap_storage = 8'd8;
reg           spiflash_litespimmap_wait = 1'd0;
reg           spiflash_litespimmap_write = 1'd0;
wire          spiflash_litespimmap_write_enabled;
reg           spiflash_litespimmap_write_litespimmap_t_t_next_value = 1'd0;
reg           spiflash_litespimmap_write_litespimmap_t_t_next_value_ce = 1'd0;
reg     [3:0] spiflash_litespimmap_write_mask = 4'd0;
reg     [3:0] spiflash_litespimmap_write_mask_litespimmap_t_f_next_value0 = 4'd0;
reg           spiflash_litespimmap_write_mask_litespimmap_t_f_next_value_ce0 = 1'd0;
reg           spiflash_phy_clk = 1'd0;
reg     [7:0] spiflash_phy_cnt = 8'd0;
reg     [3:0] spiflash_phy_count = 4'd11;
wire          spiflash_phy_cs;
wire          spiflash_phy_cs_n;
reg     [7:0] spiflash_phy_div = 8'd0;
wire          spiflash_phy_done;
wire    [3:0] spiflash_phy_dq_i;
reg     [3:0] spiflash_phy_dq_o = 4'd0;
reg     [3:0] spiflash_phy_dq_oe = 4'd0;
reg     [3:0] spiflash_phy_dq_oe_litespiphy_next_value1 = 4'd0;
reg           spiflash_phy_dq_oe_litespiphy_next_value_ce1 = 1'd0;
reg           spiflash_phy_en = 1'd0;
reg           spiflash_phy_en_int = 1'd0;
wire          spiflash_phy_enable;
wire          spiflash_phy_negedge;
wire          spiflash_phy_posedge;
reg           spiflash_phy_posedge_reg = 1'd0;
reg           spiflash_phy_posedge_reg2 = 1'd0;
reg           spiflash_phy_re = 1'd0;
wire          spiflash_phy_sink_first;
wire          spiflash_phy_sink_last;
wire   [31:0] spiflash_phy_sink_payload_data;
wire    [5:0] spiflash_phy_sink_payload_len;
wire    [7:0] spiflash_phy_sink_payload_mask;
wire    [3:0] spiflash_phy_sink_payload_width;
reg           spiflash_phy_sink_ready = 1'd0;
wire          spiflash_phy_sink_valid;
reg           spiflash_phy_source_first = 1'd0;
reg           spiflash_phy_source_last = 1'd0;
wire   [31:0] spiflash_phy_source_payload_data;
wire          spiflash_phy_source_ready;
reg           spiflash_phy_source_valid = 1'd0;
wire    [7:0] spiflash_phy_spi_clk_divisor;
reg     [7:0] spiflash_phy_sr_cnt = 8'd0;
reg     [7:0] spiflash_phy_sr_cnt_litespiphy_next_value0 = 8'd0;
reg           spiflash_phy_sr_cnt_litespiphy_next_value_ce0 = 1'd0;
reg    [31:0] spiflash_phy_sr_in = 32'd0;
reg           spiflash_phy_sr_in_shift = 1'd0;
reg    [31:0] spiflash_phy_sr_out = 32'd0;
reg           spiflash_phy_sr_out_load = 1'd0;
reg           spiflash_phy_sr_out_shift = 1'd0;
reg     [7:0] spiflash_phy_storage = 8'd0;
wire          spiflash_phy_wait;
wire          spiflash_sink_first;
wire          spiflash_sink_last;
wire   [31:0] spiflash_sink_payload_data;
wire          spiflash_sink_ready;
wire          spiflash_sink_valid;
wire          spiflash_source_first;
wire          spiflash_source_last;
wire   [31:0] spiflash_source_payload_data;
wire    [5:0] spiflash_source_payload_len;
wire    [7:0] spiflash_source_payload_mask;
wire    [3:0] spiflash_source_payload_width;
wire          spiflash_source_ready;
wire          spiflash_source_valid;
wire          spiflash_user_port_sink_first;
wire          spiflash_user_port_sink_last;
wire   [31:0] spiflash_user_port_sink_payload_data;
wire    [5:0] spiflash_user_port_sink_payload_len;
wire    [7:0] spiflash_user_port_sink_payload_mask;
wire    [3:0] spiflash_user_port_sink_payload_width;
wire          spiflash_user_port_sink_ready;
wire          spiflash_user_port_sink_valid;
wire          spiflash_user_port_source_first;
wire          spiflash_user_port_source_last;
wire   [31:0] spiflash_user_port_source_payload_data;
wire          spiflash_user_port_source_ready;
wire          spiflash_user_port_source_valid;
reg           state = 1'd0;
reg           storage = 1'd0;
wire          sys_clk;
wire          sys_rst;
wire          sys_usb_clk;
reg           sys_usb_rst = 1'd0;
wire          tx_mux_sel;
wire          tx_mux_sink_first;
wire          tx_mux_sink_last;
wire   [31:0] tx_mux_sink_payload_data;
wire    [5:0] tx_mux_sink_payload_len;
wire    [7:0] tx_mux_sink_payload_mask;
wire    [3:0] tx_mux_sink_payload_width;
reg           tx_mux_sink_ready = 1'd0;
wire          tx_mux_sink_valid;
reg           tx_mux_source_first = 1'd0;
reg           tx_mux_source_last = 1'd0;
reg    [31:0] tx_mux_source_payload_data = 32'd0;
reg     [5:0] tx_mux_source_payload_len = 6'd0;
reg     [7:0] tx_mux_source_payload_mask = 8'd0;
reg     [3:0] tx_mux_source_payload_width = 4'd0;
wire          tx_mux_source_ready;
reg           tx_mux_source_valid = 1'd0;
wire          usb_12_clk;
wire          usb_12_rst;
wire          usb_48_clk;
wire          usb_48_rst;
wire          wait_1;
reg           wren0 = 1'd0;
reg           wren1 = 1'd0;
reg           wren2 = 1'd0;
reg           wren3 = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign sys_usb_clk = sys_clk;
always @(*) begin
    crg_rst <= 1'd0;
    if (basesoc_soc_rst) begin
        crg_rst <= 1'd1;
    end
end
assign por_clk = sys_clk;
assign crg_por_done = (crg_por_count == 1'd0);
assign usb_48_clk = clk48;
assign sys_clk = usb_12_clk;
assign crg_clkin = clk48;
assign usb_12_clk = crg_clkout;
assign spiflash_litespimmap_bus_dat_w = adapted_interface_dat_w;
assign adapted_interface_dat_r = spiflash_litespimmap_bus_dat_r;
assign spiflash_litespimmap_bus_sel = adapted_interface_sel;
assign spiflash_litespimmap_bus_cyc = adapted_interface_cyc;
assign spiflash_litespimmap_bus_stb = adapted_interface_stb;
assign adapted_interface_ack = spiflash_litespimmap_bus_ack;
assign spiflash_litespimmap_bus_we = adapted_interface_we;
assign spiflash_litespimmap_bus_cti = adapted_interface_cti;
assign spiflash_litespimmap_bus_bte = adapted_interface_bte;
assign adapted_interface_err = spiflash_litespimmap_bus_err;
always @(*) begin
    spiflash_litespimmap_bus_adr <= 30'd0;
    spiflash_litespimmap_bus_adr <= adapted_interface_adr;
    spiflash_litespimmap_bus_adr <= (adapted_interface_adr - 27'd67108864);
end
assign basesoc_bus_errors_status = basesoc_bus_errors;
assign basesoc_cdcusb_cdcusbphy_source_valid = basesoc_cdcusb_source_source_valid;
assign basesoc_cdcusb_source_source_ready = basesoc_cdcusb_cdcusbphy_source_ready;
assign basesoc_cdcusb_cdcusbphy_source_first = basesoc_cdcusb_source_source_first;
assign basesoc_cdcusb_cdcusbphy_source_last = basesoc_cdcusb_source_source_last;
assign basesoc_cdcusb_cdcusbphy_source_payload_data = basesoc_cdcusb_source_source_payload_data;
assign basesoc_cdcusb_sink_sink_valid = basesoc_cdcusb_cdcusbphy_sink_valid;
assign basesoc_cdcusb_cdcusbphy_sink_ready = basesoc_cdcusb_sink_sink_ready;
assign basesoc_cdcusb_sink_sink_first = basesoc_cdcusb_cdcusbphy_sink_first;
assign basesoc_cdcusb_sink_sink_last = basesoc_cdcusb_cdcusbphy_sink_last;
assign basesoc_cdcusb_sink_sink_payload_data = basesoc_cdcusb_cdcusbphy_sink_payload_data;
assign basesoc_cdcusb_async_rst = basesoc_cdcusb_cdcusbphy_dtr;
assign basesoc_cdcusb_i = basesoc_cdcusb_configured_re;
assign basesoc_cdcusb_cdcusbphy_configure_set = basesoc_cdcusb_o;
assign basesoc_cdcusb_asyncfifo0_sink_valid = basesoc_cdcusb_rxtx_re;
assign basesoc_cdcusb_asyncfifo0_sink_payload_data = basesoc_cdcusb_rxtx_r;
assign basesoc_cdcusb_txfull_status = (~basesoc_cdcusb_asyncfifo0_sink_ready);
assign basesoc_cdcusb_source_source_valid = basesoc_cdcusb_asyncfifo0_source_valid;
assign basesoc_cdcusb_asyncfifo0_source_ready = basesoc_cdcusb_source_source_ready;
assign basesoc_cdcusb_source_source_first = basesoc_cdcusb_asyncfifo0_source_first;
assign basesoc_cdcusb_source_source_last = basesoc_cdcusb_asyncfifo0_source_last;
assign basesoc_cdcusb_source_source_payload_data = basesoc_cdcusb_asyncfifo0_source_payload_data;
assign basesoc_cdcusb_tx_trigger = (~basesoc_cdcusb_asyncfifo0_sink_ready);
assign basesoc_cdcusb_asyncfifo1_sink_valid = basesoc_cdcusb_sink_sink_valid;
assign basesoc_cdcusb_sink_sink_ready = basesoc_cdcusb_asyncfifo1_sink_ready;
assign basesoc_cdcusb_asyncfifo1_sink_first = basesoc_cdcusb_sink_sink_first;
assign basesoc_cdcusb_asyncfifo1_sink_last = basesoc_cdcusb_sink_sink_last;
assign basesoc_cdcusb_asyncfifo1_sink_payload_data = basesoc_cdcusb_sink_sink_payload_data;
assign basesoc_cdcusb_rxempty_status = (~basesoc_cdcusb_asyncfifo1_source_valid);
assign basesoc_cdcusb_rxtx_w = basesoc_cdcusb_asyncfifo1_source_payload_data;
assign basesoc_cdcusb_asyncfifo1_source_ready = (basesoc_cdcusb_rx_clear | (1'd0 & basesoc_cdcusb_rxtx_we));
assign basesoc_cdcusb_rx_trigger = (~basesoc_cdcusb_asyncfifo1_source_valid);
assign basesoc_cdcusb_cdcusbphy_csrtransform = (~usb_12_rst);
assign basesoc_cdcusb_cdcusbphy_csrtransform_pullup_out_re = 1'd1;
assign basesoc_cdcusb_cdcusbphy_configured = (basesoc_cdcusb_cdcusbphy_configured_delay == 1'd0);
assign basesoc_cdcusb_cdcusbphy_wRequestAndType = basesoc_cdcusb_cdcusbphy_usbPacket[31:16];
assign basesoc_cdcusb_cdcusbphy_wValue = basesoc_cdcusb_cdcusbphy_usbPacket[15:0];
always @(*) begin
    basesoc_cdcusb_cdcusbphy_response_addr <= 9'd0;
    basesoc_cdcusb_cdcusbphy_response_len <= 6'd0;
    case (basesoc_cdcusb_cdcusbphy_usbPacket)
        20'd590080: begin
            basesoc_cdcusb_cdcusbphy_response_len <= 1'd0;
            basesoc_cdcusb_cdcusbphy_response_addr <= 8'd212;
        end
        32'd2147483648: begin
            basesoc_cdcusb_cdcusbphy_response_len <= 2'd2;
            basesoc_cdcusb_cdcusbphy_response_addr <= 8'd210;
        end
        32'd2147876865: begin
            basesoc_cdcusb_cdcusbphy_response_len <= 5'd18;
            basesoc_cdcusb_cdcusbphy_response_addr <= 6'd63;
        end
        32'd2147876866: begin
            basesoc_cdcusb_cdcusbphy_response_len <= 6'd62;
            basesoc_cdcusb_cdcusbphy_response_addr <= 1'd1;
        end
        32'd2147876867: begin
            basesoc_cdcusb_cdcusbphy_response_len <= 3'd4;
            basesoc_cdcusb_cdcusbphy_response_addr <= 7'd81;
        end
        32'd2147876879: begin
            basesoc_cdcusb_cdcusbphy_response_len <= 5'd29;
            basesoc_cdcusb_cdcusbphy_response_addr <= 7'd123;
        end
        32'd2147877123: begin
            basesoc_cdcusb_cdcusbphy_response_len <= 4'd8;
            basesoc_cdcusb_cdcusbphy_response_addr <= 7'd85;
        end
        32'd2147877379: begin
            basesoc_cdcusb_cdcusbphy_response_len <= 5'd30;
            basesoc_cdcusb_cdcusbphy_response_addr <= 7'd93;
        end
        32'd2147937795: begin
            basesoc_cdcusb_cdcusbphy_response_len <= 5'd18;
            basesoc_cdcusb_cdcusbphy_response_addr <= 8'd152;
        end
        32'd2703294464: begin
            basesoc_cdcusb_cdcusbphy_response_len <= 3'd7;
            basesoc_cdcusb_cdcusbphy_response_addr <= 8'd212;
        end
        32'd3229483008: begin
            basesoc_cdcusb_cdcusbphy_response_len <= 6'd40;
            basesoc_cdcusb_cdcusbphy_response_addr <= 8'd170;
        end
    endcase
end
assign basesoc_cdcusb_cdcusbphy_adr = basesoc_cdcusb_cdcusbphy_bytes_addr;
assign basesoc_cdcusb_cdcusbphy_csrfield_addr = basesoc_cdcusb_cdcusbphy_csrstorage_storage;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_status <= 4'd0;
    basesoc_cdcusb_cdcusbphy_status[0] <= basesoc_cdcusb_cdcusbphy_csrfield_in;
    basesoc_cdcusb_cdcusbphy_status[1] <= basesoc_cdcusb_cdcusbphy_csrfield_out;
    basesoc_cdcusb_cdcusbphy_status[2] <= basesoc_cdcusb_cdcusbphy_csrfield_setup;
    basesoc_cdcusb_cdcusbphy_status[3] <= basesoc_cdcusb_cdcusbphy_csrfield_reset;
end
assign basesoc_cdcusb_cdcusbphy_setuphandler_data_status = basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_data0;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_reset <= 1'd0;
    if (basesoc_cdcusb_cdcusbphy_setuphandler_ctrl_re) begin
        basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_reset <= basesoc_cdcusb_cdcusbphy_setuphandler_ctrl_storage[5];
    end
end
always @(*) begin
    basesoc_cdcusb_cdcusbphy_setuphandler_status_status <= 8'd0;
    basesoc_cdcusb_cdcusbphy_setuphandler_status_status[3:0] <= basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_epno;
    basesoc_cdcusb_cdcusbphy_setuphandler_status_status[4] <= basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_have;
    basesoc_cdcusb_cdcusbphy_setuphandler_status_status[5] <= basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_pend;
    basesoc_cdcusb_cdcusbphy_setuphandler_status_status[6] <= basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_is_in;
    basesoc_cdcusb_cdcusbphy_setuphandler_status_status[7] <= basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_data1;
end
always @(*) begin
    basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_status_status <= 2'd0;
    basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_status_status[0] <= basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_ready0;
    basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_status_status[1] <= basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_reset0;
end
always @(*) begin
    basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_pending_status <= 2'd0;
    basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_pending_status[0] <= basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_ready1;
    basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_pending_status[1] <= basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_reset1;
end
assign basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_ready2 = basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_enable_storage[0];
assign basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_reset2 = basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_enable_storage[1];
assign basesoc_cdcusb_cdcusbphy_inhandler_csrfield_data = basesoc_cdcusb_cdcusbphy_inhandler_data_storage;
assign basesoc_cdcusb_cdcusbphy_inhandler_csrfield_epno = basesoc_cdcusb_cdcusbphy_inhandler_ctrl_storage[3:0];
always @(*) begin
    basesoc_cdcusb_cdcusbphy_inhandler_csrfield_reset <= 1'd0;
    if (basesoc_cdcusb_cdcusbphy_inhandler_ctrl_re) begin
        basesoc_cdcusb_cdcusbphy_inhandler_csrfield_reset <= basesoc_cdcusb_cdcusbphy_inhandler_ctrl_storage[5];
    end
end
always @(*) begin
    basesoc_cdcusb_cdcusbphy_inhandler_csrfield_stall <= 1'd0;
    if (basesoc_cdcusb_cdcusbphy_inhandler_ctrl_re) begin
        basesoc_cdcusb_cdcusbphy_inhandler_csrfield_stall <= basesoc_cdcusb_cdcusbphy_inhandler_ctrl_storage[6];
    end
end
always @(*) begin
    basesoc_cdcusb_cdcusbphy_inhandler_status_status0 <= 6'd0;
    basesoc_cdcusb_cdcusbphy_inhandler_status_status0[0] <= basesoc_cdcusb_cdcusbphy_inhandler_csrfield_idle;
    basesoc_cdcusb_cdcusbphy_inhandler_status_status0[4] <= basesoc_cdcusb_cdcusbphy_inhandler_csrfield_have;
    basesoc_cdcusb_cdcusbphy_inhandler_status_status0[5] <= basesoc_cdcusb_cdcusbphy_inhandler_csrfield_pend;
end
assign basesoc_cdcusb_cdcusbphy_inhandler_status_status1 = basesoc_cdcusb_cdcusbphy_inhandler_done0;
assign basesoc_cdcusb_cdcusbphy_inhandler_pending_status = basesoc_cdcusb_cdcusbphy_inhandler_done1;
assign basesoc_cdcusb_cdcusbphy_inhandler_done2 = basesoc_cdcusb_cdcusbphy_inhandler_enable_storage;
assign basesoc_cdcusb_cdcusbphy_outhandler_data_status = basesoc_cdcusb_cdcusbphy_outhandler_csrfield_data;
assign basesoc_cdcusb_cdcusbphy_outhandler_csrfield_epno0 = basesoc_cdcusb_cdcusbphy_outhandler_ctrl_storage[3:0];
assign basesoc_cdcusb_cdcusbphy_outhandler_csrfield_enable = basesoc_cdcusb_cdcusbphy_outhandler_ctrl_storage[4];
always @(*) begin
    basesoc_cdcusb_cdcusbphy_outhandler_csrfield_reset <= 1'd0;
    if (basesoc_cdcusb_cdcusbphy_outhandler_ctrl_re) begin
        basesoc_cdcusb_cdcusbphy_outhandler_csrfield_reset <= basesoc_cdcusb_cdcusbphy_outhandler_ctrl_storage[5];
    end
end
assign basesoc_cdcusb_cdcusbphy_outhandler_csrfield_stall = basesoc_cdcusb_cdcusbphy_outhandler_ctrl_storage[6];
always @(*) begin
    basesoc_cdcusb_cdcusbphy_outhandler_status_status0 <= 6'd0;
    basesoc_cdcusb_cdcusbphy_outhandler_status_status0[3:0] <= basesoc_cdcusb_cdcusbphy_outhandler_csrfield_epno1;
    basesoc_cdcusb_cdcusbphy_outhandler_status_status0[4] <= basesoc_cdcusb_cdcusbphy_outhandler_csrfield_have;
    basesoc_cdcusb_cdcusbphy_outhandler_status_status0[5] <= basesoc_cdcusb_cdcusbphy_outhandler_csrfield_pend;
end
assign basesoc_cdcusb_cdcusbphy_outhandler_status_status1 = basesoc_cdcusb_cdcusbphy_outhandler_done0;
assign basesoc_cdcusb_cdcusbphy_outhandler_pending_status = basesoc_cdcusb_cdcusbphy_outhandler_done1;
assign basesoc_cdcusb_cdcusbphy_outhandler_done2 = basesoc_cdcusb_cdcusbphy_outhandler_enable_storage;
assign basesoc_cdcusb_cdcusbphy_address_reset = basesoc_cdcusb_cdcusbphy_usb_core_usb_reset;
assign basesoc_cdcusb_cdcusbphy_setuphandler_usb_reset = basesoc_cdcusb_cdcusbphy_usb_core_usb_reset;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_csrfield_in <= 1'd0;
    basesoc_cdcusb_cdcusbphy_csrfield_out <= 1'd0;
    basesoc_cdcusb_cdcusbphy_csrfield_reset <= 1'd0;
    basesoc_cdcusb_cdcusbphy_csrfield_setup <= 1'd0;
    if (basesoc_cdcusb_cdcusbphy_setuphandler_reset_pending) begin
        basesoc_cdcusb_cdcusbphy_csrfield_reset <= 1'd1;
    end else begin
        if (basesoc_cdcusb_cdcusbphy_in_next) begin
            basesoc_cdcusb_cdcusbphy_csrfield_in <= 1'd1;
        end else begin
            if (basesoc_cdcusb_cdcusbphy_out_next) begin
                basesoc_cdcusb_cdcusbphy_csrfield_out <= basesoc_cdcusb_cdcusbphy_out_next;
            end else begin
                if (basesoc_cdcusb_cdcusbphy_setuphandler_packet_pending) begin
                    basesoc_cdcusb_cdcusbphy_csrfield_setup <= 1'd1;
                end
            end
        end
    end
end
assign basesoc_cdcusb_cdcusbphy_usb_core_dtb = (basesoc_cdcusb_cdcusbphy_inhandler_dtb | basesoc_cdcusb_cdcusbphy_debug_packet_detected);
assign basesoc_cdcusb_cdcusbphy_resetinserter_reset = basesoc_cdcusb_cdcusbphy_usb_core_usb_reset;
assign basesoc_cdcusb_cdcusbphy_usb_core_reset0 = (basesoc_cdcusb_cdcusbphy_usb_core_error | basesoc_cdcusb_cdcusbphy_usb_core_reset1);
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_i_bit_strobe = basesoc_cdcusb_cdcusbphy_usb_core_rx_o_bit_strobe;
assign basesoc_cdcusb_cdcusbphy_usb_core_usb_reset = basesoc_cdcusb_cdcusbphy_usb_core_rx_o_reset;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_i_usbp = basesoc_usb_iobuf_usb_p_rx;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_i_usbn = basesoc_usb_iobuf_usb_n_rx;
assign basesoc_usb_iobuf_usb_tx_en = basesoc_cdcusb_cdcusbphy_usb_core_tx_o_oe;
assign basesoc_usb_iobuf_usb_p_tx = basesoc_cdcusb_cdcusbphy_usb_core_tx_o_usbp;
assign basesoc_usb_iobuf_usb_n_tx = basesoc_cdcusb_cdcusbphy_usb_core_tx_o_usbn;
assign basesoc_cdcusb_cdcusbphy_usb_core_end = (basesoc_cdcusb_cdcusbphy_usb_core_commit | basesoc_cdcusb_cdcusbphy_usb_core_abort);
assign basesoc_cdcusb_cdcusbphy_usb_core_transfer_reset = basesoc_cdcusb_cdcusbphy_usb_core_reset0;
assign basesoc_cdcusb_cdcusbphy_usb_core_data_recv_payload = basesoc_cdcusb_cdcusbphy_usb_core_rx_o_data_payload;
assign basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_payload0 = basesoc_cdcusb_cdcusbphy_usb_core_data_send_payload;
assign basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_ready = basesoc_cdcusb_cdcusbphy_usb_core_data_send_have;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_rx_reset0 <= 1'd0;
    if (basesoc_cdcusb_cdcusbphy_usb_core_tx_o_oe) begin
        basesoc_cdcusb_cdcusbphy_usb_core_rx_reset0 <= 1'd1;
    end
end
assign usb_pullup = basesoc_usb_iobuf_usb_pullup;
always @(*) begin
    basesoc_usb_iobuf_usb_n_rx <= 1'd0;
    basesoc_usb_iobuf_usb_p_rx <= 1'd0;
    if (basesoc_usb_iobuf_usb_tx_en) begin
        basesoc_usb_iobuf_usb_p_rx <= 1'd1;
        basesoc_usb_iobuf_usb_n_rx <= 1'd0;
    end else begin
        basesoc_usb_iobuf_usb_p_rx <= basesoc_usb_iobuf_usb_p_t_i;
        basesoc_usb_iobuf_usb_n_rx <= basesoc_usb_iobuf_usb_n_t_i;
    end
end
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_i_data = basesoc_cdcusb_cdcusbphy_usb_core_tx_i_data_payload;
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_reset = (basesoc_cdcusb_cdcusbphy_usb_core_tx_da_reset_shifter | basesoc_cdcusb_cdcusbphy_usb_core_tx_sp_reset_shifter);
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_ce = (~basesoc_cdcusb_cdcusbphy_usb_core_tx_stall);
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_reset = basesoc_cdcusb_cdcusbphy_usb_core_tx_da_reset_bitstuff;
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_i_data = basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_o_data;
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_stall = basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_o_stall;
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_sp_bit = basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse[0];
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_sp_reset_bitstuff = basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse[0];
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_sp_reset_shifter = basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse[1];
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_sp_o_data_strobe = basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse[5];
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_state_data = (basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray[0] & basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray[1]);
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_state_sync = (basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray[0] & (~basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray[1]));
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_fit_oe = (basesoc_cdcusb_cdcusbphy_usb_core_tx_state_data | basesoc_cdcusb_cdcusbphy_usb_core_tx_state_sync);
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_fit_dat = (((basesoc_cdcusb_cdcusbphy_usb_core_tx_state_data & basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_o_data) & (~basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_o_stall)) | basesoc_cdcusb_cdcusbphy_usb_core_tx_sp_bit);
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_o_data_strobe = ((((basesoc_cdcusb_cdcusbphy_usb_core_tx_state_data & basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_o_get) & (~basesoc_cdcusb_cdcusbphy_usb_core_tx_stall)) & basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe) | basesoc_cdcusb_cdcusbphy_usb_core_tx_sp_o_data_strobe);
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_valid = basesoc_cdcusb_cdcusbphy_usb_core_tx_i_bit_strobe;
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_data = basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_dat;
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_oe = basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_oe1;
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_o_usbp = basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_o_usbp;
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_o_usbn = basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_o_usbn;
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_o_oe = basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_o_oe;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value1 <= 2'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value_ce1 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse_csrtransform_txpipeline_next_value0 <= 8'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse_csrtransform_txpipeline_next_value_ce0 <= 1'd0;
    csrtransform_fsm_next_state <= 2'd0;
    csrtransform_fsm_next_state <= csrtransform_fsm_state;
    case (csrtransform_fsm_state)
        1'd1: begin
            basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse_csrtransform_txpipeline_next_value0 <= (basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse >>> 1'd1);
            basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse_csrtransform_txpipeline_next_value_ce0 <= 1'd1;
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse[0]) begin
                csrtransform_fsm_next_state <= 2'd2;
                basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value1 <= 2'd3;
                basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value_ce1 <= 1'd1;
            end else begin
                basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value1 <= 1'd1;
                basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value_ce1 <= 1'd1;
            end
        end
        2'd2: begin
            if ((((~basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe) & basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_o_empty) & (~basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_o_stall))) begin
                if (basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_o_will_stall) begin
                    csrtransform_fsm_next_state <= 2'd3;
                end else begin
                    basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value1 <= 2'd2;
                    basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value_ce1 <= 1'd1;
                    csrtransform_fsm_next_state <= 1'd0;
                end
            end else begin
                basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value1 <= 2'd3;
                basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value_ce1 <= 1'd1;
            end
        end
        2'd3: begin
            basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value1 <= 2'd2;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value_ce1 <= 1'd1;
            csrtransform_fsm_next_state <= 1'd0;
        end
        default: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe) begin
                csrtransform_fsm_next_state <= 1'd1;
                basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse_csrtransform_txpipeline_next_value0 <= 8'd128;
                basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse_csrtransform_txpipeline_next_value_ce0 <= 1'd1;
                basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value1 <= 1'd1;
                basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value_ce1 <= 1'd1;
            end else begin
                basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value1 <= 1'd0;
                basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value_ce1 <= 1'd1;
            end
        end
    endcase
end
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_empty = basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_pos[0];
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_o_empty = basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_empty;
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_o_data = basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_shifter[0];
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_o_stall = basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_stuff_bit;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_o_will_stall <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_stuff_bit <= 1'd0;
    csrtransform_resetinserter_next_state <= 3'd0;
    csrtransform_resetinserter_next_state <= csrtransform_resetinserter_state;
    case (csrtransform_resetinserter_state)
        1'd1: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_i_data) begin
                csrtransform_resetinserter_next_state <= 2'd2;
            end else begin
                csrtransform_resetinserter_next_state <= 1'd0;
            end
        end
        2'd2: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_i_data) begin
                csrtransform_resetinserter_next_state <= 2'd3;
            end else begin
                csrtransform_resetinserter_next_state <= 1'd0;
            end
        end
        2'd3: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_i_data) begin
                csrtransform_resetinserter_next_state <= 3'd4;
            end else begin
                csrtransform_resetinserter_next_state <= 1'd0;
            end
        end
        3'd4: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_i_data) begin
                csrtransform_resetinserter_next_state <= 3'd5;
            end else begin
                csrtransform_resetinserter_next_state <= 1'd0;
            end
        end
        3'd5: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_i_data) begin
                basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_o_will_stall <= 1'd1;
                csrtransform_resetinserter_next_state <= 3'd6;
            end else begin
                csrtransform_resetinserter_next_state <= 1'd0;
            end
        end
        3'd6: begin
            basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_stuff_bit <= 1'd1;
            csrtransform_resetinserter_next_state <= 1'd0;
        end
        default: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_i_data) begin
                csrtransform_resetinserter_next_state <= 1'd1;
            end else begin
                csrtransform_resetinserter_next_state <= 1'd0;
            end
        end
    endcase
end
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_oe0 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbn <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbp <= 1'd0;
    csrtransform_txnrziencoder_next_state <= 3'd0;
    csrtransform_txnrziencoder_next_state <= csrtransform_txnrziencoder_state;
    case (csrtransform_txnrziencoder_state)
        1'd1: begin
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbp <= 1'd1;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbn <= 1'd0;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_oe0 <= 1'd1;
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_valid) begin
                if ((~basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_oe)) begin
                    csrtransform_txnrziencoder_next_state <= 2'd3;
                end else begin
                    if (basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_data) begin
                        csrtransform_txnrziencoder_next_state <= 1'd1;
                    end else begin
                        csrtransform_txnrziencoder_next_state <= 2'd2;
                    end
                end
            end
        end
        2'd2: begin
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbp <= 1'd0;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbn <= 1'd1;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_oe0 <= 1'd1;
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_valid) begin
                if ((~basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_oe)) begin
                    csrtransform_txnrziencoder_next_state <= 2'd3;
                end else begin
                    if (basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_data) begin
                        csrtransform_txnrziencoder_next_state <= 2'd2;
                    end else begin
                        csrtransform_txnrziencoder_next_state <= 1'd1;
                    end
                end
            end
        end
        2'd3: begin
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbp <= 1'd0;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbn <= 1'd0;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_oe0 <= 1'd1;
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_valid) begin
                csrtransform_txnrziencoder_next_state <= 3'd4;
            end
        end
        3'd4: begin
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbp <= 1'd0;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbn <= 1'd0;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_oe0 <= 1'd1;
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_valid) begin
                csrtransform_txnrziencoder_next_state <= 3'd5;
            end
        end
        3'd5: begin
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbp <= 1'd1;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbn <= 1'd0;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_oe0 <= 1'd1;
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_valid) begin
                csrtransform_txnrziencoder_next_state <= 1'd0;
            end
        end
        default: begin
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbp <= 1'd1;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbn <= 1'd0;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_oe0 <= 1'd0;
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_valid) begin
                if (basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_i_oe) begin
                    csrtransform_txnrziencoder_next_state <= 2'd2;
                end
            end
        end
    endcase
end
assign basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_payload1 = basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_payload0;
assign basesoc_cdcusb_cdcusbphy_usb_core_txstate_reset = basesoc_cdcusb_cdcusbphy_usb_core_txstate_is_ongoing0;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_strobe <= 1'd0;
    if (basesoc_cdcusb_cdcusbphy_usb_core_txstate_is_ongoing1) begin
        basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_strobe <= basesoc_cdcusb_cdcusbphy_usb_core_tx_o_data_strobe;
    end
end
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_tx_i_data_payload <= 8'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe_csrtransform_txpacketsend_next_value0 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe_csrtransform_txpacketsend_next_value_ce0 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_is_ongoing0 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_is_ongoing1 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_data_ack <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_pkt_end <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_pid_csrtransform_txpacketsend_next_value1 <= 4'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_pid_csrtransform_txpacketsend_next_value_ce1 <= 1'd0;
    csrtransform_txpacketsend_next_state <= 4'd0;
    csrtransform_txpacketsend_next_state <= csrtransform_txpacketsend_state;
    case (csrtransform_txpacketsend_state)
        1'd1: begin
            basesoc_cdcusb_cdcusbphy_usb_core_txstate_pid_csrtransform_txpacketsend_next_value1 <= basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_pid;
            basesoc_cdcusb_cdcusbphy_usb_core_txstate_pid_csrtransform_txpacketsend_next_value_ce1 <= 1'd1;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_i_data_payload <= 1'd1;
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_o_data_strobe) begin
                csrtransform_txpacketsend_next_state <= 2'd2;
            end
        end
        2'd2: begin
            basesoc_cdcusb_cdcusbphy_usb_core_tx_i_data_payload <= {(basesoc_cdcusb_cdcusbphy_usb_core_txstate_pid ^ 4'd15), basesoc_cdcusb_cdcusbphy_usb_core_txstate_pid};
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_o_data_strobe) begin
                if (((basesoc_cdcusb_cdcusbphy_usb_core_txstate_pid & 2'd3) == 2'd2)) begin
                    csrtransform_txpacketsend_next_state <= 3'd7;
                end else begin
                    if (((basesoc_cdcusb_cdcusbphy_usb_core_txstate_pid & 2'd3) == 2'd3)) begin
                        csrtransform_txpacketsend_next_state <= 2'd3;
                    end else begin
                        csrtransform_txpacketsend_next_state <= 4'd8;
                    end
                end
            end
            basesoc_cdcusb_cdcusbphy_usb_core_txstate_is_ongoing0 <= 1'd1;
        end
        2'd3: begin
            if ((~basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_ready)) begin
                csrtransform_txpacketsend_next_state <= 3'd5;
            end else begin
                csrtransform_txpacketsend_next_state <= 3'd4;
            end
        end
        3'd4: begin
            basesoc_cdcusb_cdcusbphy_usb_core_tx_i_data_payload <= basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_payload0;
            basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_data_ack <= basesoc_cdcusb_cdcusbphy_usb_core_tx_o_data_strobe;
            if ((~basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_ready)) begin
                csrtransform_txpacketsend_next_state <= 3'd5;
            end
            basesoc_cdcusb_cdcusbphy_usb_core_txstate_is_ongoing1 <= 1'd1;
        end
        3'd5: begin
            basesoc_cdcusb_cdcusbphy_usb_core_tx_i_data_payload <= basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_crc[7:0];
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_o_data_strobe) begin
                csrtransform_txpacketsend_next_state <= 3'd6;
            end
        end
        3'd6: begin
            basesoc_cdcusb_cdcusbphy_usb_core_tx_i_data_payload <= basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_crc[15:8];
            if (basesoc_cdcusb_cdcusbphy_usb_core_tx_o_data_strobe) begin
                csrtransform_txpacketsend_next_state <= 3'd7;
            end
        end
        3'd7: begin
            basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe_csrtransform_txpacketsend_next_value0 <= 1'd0;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe_csrtransform_txpacketsend_next_value_ce0 <= 1'd1;
            if ((~basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_oe12)) begin
                basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_pkt_end <= 1'd1;
                csrtransform_txpacketsend_next_state <= 1'd0;
            end
        end
        default: begin
            basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe_csrtransform_txpacketsend_next_value0 <= basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_pkt_start;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe_csrtransform_txpacketsend_next_value_ce0 <= 1'd1;
            if (basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_pkt_start) begin
                csrtransform_txpacketsend_next_state <= 1'd1;
            end else begin
                basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe_csrtransform_txpacketsend_next_value0 <= 1'd0;
                basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe_csrtransform_txpacketsend_next_value_ce0 <= 1'd1;
            end
        end
    endcase
end
assign basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat = {basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_payload1[0], basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_payload1[1], basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_payload1[2], basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_payload1[3], basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_payload1[4], basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_payload1[5], basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_payload1[6], basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_payload1[7]};
assign basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_crc = ({basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[0], basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[1], basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[2], basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[3], basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[4], basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[5], basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[6], basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[7], basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[8], basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[9], basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[10], basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[11], basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[12], basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[13], basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[14], basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[15]} ^ 16'd65535);
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next <= 16'd64770;
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next[0] <= (((((((((((((((basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[0] ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[1]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[2]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[3]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[4]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[5]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[6]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[7]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[8]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[9]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[10]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[11]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[12]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[13]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[14]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[15]);
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next[1] <= (((((((((((((basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[1] ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[2]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[3]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[4]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[5]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[6]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[7]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[9]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[10]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[11]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[12]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[13]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[14]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[15]);
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next[2] <= (((basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[0] ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[1]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[8]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[9]);
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next[3] <= (((basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[1] ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[2]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[9]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[10]);
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next[4] <= (((basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[2] ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[3]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[10]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[11]);
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next[5] <= (((basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[3] ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[4]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[11]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[12]);
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next[6] <= (((basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[4] ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[5]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[12]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[13]);
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next[7] <= (((basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[5] ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[6]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[13]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[14]);
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next[8] <= ((((basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[6] ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[7]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[0]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[14]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[15]);
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next[9] <= ((basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[7] ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[1]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[15]);
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next[10] <= basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[2];
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next[11] <= basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[3];
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next[12] <= basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[4];
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next[13] <= basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[5];
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next[14] <= basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[6];
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next[15] <= ((((((((((((((((basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[0] ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[1]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[2]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[3]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[4]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[5]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[6]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_dat[7]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[7]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[8]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[9]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[10]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[11]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[12]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[13]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[14]) ^ basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur[15]);
end
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_o_bit_strobe = basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_valid;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_o_reset = basesoc_cdcusb_cdcusbphy_usb_core_rx_reset_counter[6];
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_i_valid = basesoc_cdcusb_cdcusbphy_usb_core_rx_o_bit_strobe;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_i_dj = basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dj1;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_i_dk = basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dk1;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_i_se0 = basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_se01;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_reset = basesoc_cdcusb_cdcusbphy_usb_core_rx_reset0;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_valid = basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_o_valid;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_se0 = basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_o_se0;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_data = basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_o_data;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_reset1 = (~basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_o_pkt_active);
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_reset = ((~basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_o_pkt_active) | basesoc_cdcusb_cdcusbphy_usb_core_rx_reset0);
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_valid = basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_o_valid;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_data = basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_o_data;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_reset = basesoc_cdcusb_cdcusbphy_usb_core_rx_last_reset;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_i_data = basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_o_data;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_i_valid = ((~basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_o_stall) & basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_o_pkt_active);
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_din = {basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_o_data[0], basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_o_data[1], basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_o_data[2], basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_o_data[3], basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_o_data[4], basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_o_data[5], basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_o_data[6], basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_o_data[7]};
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_we = basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_o_put;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_o_data_payload = basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_dout;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_o_data_strobe = basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_readable;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_re = 1'd1;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_din <= 2'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_din[1] <= basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_o_pkt_start;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_din[0] <= basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_o_pkt_end;
end
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_we = (basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_o_pkt_start | basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_o_pkt_end);
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flag_start = basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_dout[1];
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flag_end = basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_dout[0];
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flag_valid = basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_readable;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_re = 1'd1;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_o_pkt_start = (basesoc_cdcusb_cdcusbphy_usb_core_rx_flag_start & basesoc_cdcusb_cdcusbphy_usb_core_rx_flag_valid);
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_o_pkt_end = (basesoc_cdcusb_cdcusbphy_usb_core_rx_flag_end & basesoc_cdcusb_cdcusbphy_usb_core_rx_flag_valid);
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_dpair = {basesoc_cdcusb_cdcusbphy_usb_core_rx_i_usbp, basesoc_cdcusb_cdcusbphy_usb_core_rx_i_usbn};
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dj0 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dk0 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dt <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_se00 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_se10 <= 1'd0;
    csrtransform_rxpipeline_next_state <= 3'd0;
    csrtransform_rxpipeline_next_state <= csrtransform_rxpipeline_state;
    case (csrtransform_rxpipeline_state)
        1'd1: begin
            basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dj0 <= 1'd1;
            if ((basesoc_cdcusb_cdcusbphy_usb_core_rx_dpair != 2'd2)) begin
                csrtransform_rxpipeline_next_state <= 1'd0;
            end
        end
        2'd2: begin
            basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dk0 <= 1'd1;
            if ((basesoc_cdcusb_cdcusbphy_usb_core_rx_dpair != 1'd1)) begin
                csrtransform_rxpipeline_next_state <= 1'd0;
            end
        end
        2'd3: begin
            basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_se00 <= 1'd1;
            if ((basesoc_cdcusb_cdcusbphy_usb_core_rx_dpair != 1'd0)) begin
                csrtransform_rxpipeline_next_state <= 1'd0;
            end
        end
        3'd4: begin
            basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_se10 <= 1'd1;
            if ((basesoc_cdcusb_cdcusbphy_usb_core_rx_dpair != 2'd3)) begin
                csrtransform_rxpipeline_next_state <= 1'd0;
            end
        end
        default: begin
            basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dt <= 1'd1;
            case (basesoc_cdcusb_cdcusbphy_usb_core_rx_dpair)
                1'd0: begin
                    csrtransform_rxpipeline_next_state <= 2'd3;
                end
                1'd1: begin
                    csrtransform_rxpipeline_next_state <= 2'd2;
                end
                2'd2: begin
                    csrtransform_rxpipeline_next_state <= 1'd1;
                end
                2'd3: begin
                    csrtransform_rxpipeline_next_state <= 3'd4;
                end
            endcase
        end
    endcase
end
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_o_pkt_start = basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_pkt_start;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_o_pkt_active = basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_pkt_active;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_o_pkt_end = basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_pkt_end;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_pkt_active <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_pkt_end <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_pkt_start <= 1'd0;
    csrtransform_rxpipeline_rxpacketdetect_next_state <= 3'd0;
    csrtransform_rxpipeline_rxpacketdetect_next_state <= csrtransform_rxpipeline_rxpacketdetect_state;
    case (csrtransform_rxpipeline_rxpacketdetect_state)
        1'd1: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_valid) begin
                if ((basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_data | basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_se0)) begin
                    csrtransform_rxpipeline_rxpacketdetect_next_state <= 1'd0;
                end else begin
                    csrtransform_rxpipeline_rxpacketdetect_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_valid) begin
                if ((basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_data | basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_se0)) begin
                    csrtransform_rxpipeline_rxpacketdetect_next_state <= 1'd0;
                end else begin
                    csrtransform_rxpipeline_rxpacketdetect_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_valid) begin
                if ((basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_data | basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_se0)) begin
                    csrtransform_rxpipeline_rxpacketdetect_next_state <= 1'd0;
                end else begin
                    csrtransform_rxpipeline_rxpacketdetect_next_state <= 3'd4;
                end
            end
        end
        3'd4: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_valid) begin
                if ((basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_data | basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_se0)) begin
                    csrtransform_rxpipeline_rxpacketdetect_next_state <= 1'd0;
                end else begin
                    csrtransform_rxpipeline_rxpacketdetect_next_state <= 3'd5;
                end
            end
        end
        3'd5: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_valid) begin
                if (basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_se0) begin
                    csrtransform_rxpipeline_rxpacketdetect_next_state <= 1'd0;
                end else begin
                    if (basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_data) begin
                        basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_pkt_start <= 1'd1;
                        csrtransform_rxpipeline_rxpacketdetect_next_state <= 3'd6;
                    end
                end
            end
        end
        3'd6: begin
            basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_pkt_active <= 1'd1;
            if ((basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_valid & basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_se0)) begin
                csrtransform_rxpipeline_rxpacketdetect_next_state <= 1'd0;
                basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_pkt_active <= 1'd0;
                basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_pkt_end <= 1'd1;
            end
        end
        default: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_valid) begin
                if ((basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_data | basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_i_se0)) begin
                    csrtransform_rxpipeline_rxpacketdetect_next_state <= 1'd0;
                end else begin
                    csrtransform_rxpipeline_rxpacketdetect_next_state <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_drop_bit <= 1'd0;
    csrtransform_rxpipeline_rxbitstuffremover_next_state <= 3'd0;
    csrtransform_rxpipeline_rxbitstuffremover_next_state <= csrtransform_rxpipeline_rxbitstuffremover_state;
    case (csrtransform_rxpipeline_rxbitstuffremover_state)
        1'd1: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_valid) begin
                if (basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_data) begin
                    csrtransform_rxpipeline_rxbitstuffremover_next_state <= 2'd2;
                end else begin
                    csrtransform_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
                end
            end
        end
        2'd2: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_valid) begin
                if (basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_data) begin
                    csrtransform_rxpipeline_rxbitstuffremover_next_state <= 2'd3;
                end else begin
                    csrtransform_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
                end
            end
        end
        2'd3: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_valid) begin
                if (basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_data) begin
                    csrtransform_rxpipeline_rxbitstuffremover_next_state <= 3'd4;
                end else begin
                    csrtransform_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
                end
            end
        end
        3'd4: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_valid) begin
                if (basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_data) begin
                    csrtransform_rxpipeline_rxbitstuffremover_next_state <= 3'd5;
                end else begin
                    csrtransform_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
                end
            end
        end
        3'd5: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_valid) begin
                if (basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_data) begin
                    csrtransform_rxpipeline_rxbitstuffremover_next_state <= 3'd6;
                end else begin
                    csrtransform_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
                end
            end
        end
        3'd6: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_valid) begin
                basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_drop_bit <= 1'd1;
                csrtransform_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
            end
        end
        default: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_valid) begin
                if (basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_data) begin
                    csrtransform_rxpipeline_rxbitstuffremover_next_state <= 1'd1;
                end else begin
                    csrtransform_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
                end
            end
        end
    endcase
end
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_o_data = basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_shift_reg[7:0];
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_ce = (basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_writable & basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_we);
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_ce = (basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_readable & basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_re);
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_writable = ((basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q[1] == basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_consume_wdomain[1]) | (basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q[0] == basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_consume_wdomain[0]));
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_readable = (basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q != basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_produce_rdomain);
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_wrport_adr = basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q_binary[0];
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_wrport_dat_w = basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_din;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_wrport_we = basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_ce;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_rdport_adr = basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q_next_binary[0];
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_asyncfifo_dout = basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_rdport_dat_r;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q_next_binary <= 2'd0;
    if (basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_ce) begin
        basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q_next_binary <= (basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q_binary + 1'd1);
    end else begin
        basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q_next_binary <= basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q_binary;
    end
end
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q_next = (basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q_next_binary ^ basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q_next_binary[1]);
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q_next_binary <= 2'd0;
    if (basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_ce) begin
        basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q_next_binary <= (basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q_binary + 1'd1);
    end else begin
        basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q_next_binary <= basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q_binary;
    end
end
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q_next = (basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q_next_binary ^ basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q_next_binary[1]);
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_ce = (basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_writable & basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_we);
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_ce = (basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_readable & basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_re);
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_writable = ((basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q[1] == basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_consume_wdomain[1]) | (basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q[0] == basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_consume_wdomain[0]));
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_readable = (basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q != basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_produce_rdomain);
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_wrport_adr = basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q_binary[0];
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_wrport_dat_w = basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_din;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_wrport_we = basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_ce;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_rdport_adr = basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q_next_binary[0];
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_asyncfifo_dout = basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_rdport_dat_r;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q_next_binary <= 2'd0;
    if (basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_ce) begin
        basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q_next_binary <= (basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q_binary + 1'd1);
    end else begin
        basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q_next_binary <= basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q_binary;
    end
end
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q_next = (basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q_next_binary ^ basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q_next_binary[1]);
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q_next_binary <= 2'd0;
    if (basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_ce) begin
        basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q_next_binary <= (basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q_binary + 1'd1);
    end else begin
        basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q_next_binary <= basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q_binary;
    end
end
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q_next = (basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q_next_binary ^ basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q_next_binary[1]);
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_crc5_csrtransform_packetheaderdecode_next_value3 <= 5'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_crc5_csrtransform_packetheaderdecode_next_value_ce3 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_endp4_csrtransform_packetheaderdecode_next_value1 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_endp4_csrtransform_packetheaderdecode_next_value_ce1 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_o_decoded <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_o_endp_csrtransform_packetheaderdecode_next_value2 <= 4'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_o_endp_csrtransform_packetheaderdecode_next_value_ce2 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_o_pid_csrtransform_packetheaderdecode_next_value0 <= 4'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_o_pid_csrtransform_packetheaderdecode_next_value_ce0 <= 1'd0;
    csrtransform_packetheaderdecode_next_state <= 3'd0;
    csrtransform_packetheaderdecode_next_value <= 7'd0;
    csrtransform_packetheaderdecode_next_value_ce <= 1'd0;
    csrtransform_packetheaderdecode_next_state <= csrtransform_packetheaderdecode_state;
    case (csrtransform_packetheaderdecode_state)
        1'd1: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_o_data_strobe) begin
                basesoc_cdcusb_cdcusbphy_usb_core_o_pid_csrtransform_packetheaderdecode_next_value0 <= basesoc_cdcusb_cdcusbphy_usb_core_rx_o_data_payload[3:0];
                basesoc_cdcusb_cdcusbphy_usb_core_o_pid_csrtransform_packetheaderdecode_next_value_ce0 <= 1'd1;
                case ((basesoc_cdcusb_cdcusbphy_usb_core_rx_o_data_payload[3:0] & 2'd3))
                    1'd1: begin
                        csrtransform_packetheaderdecode_next_state <= 2'd2;
                    end
                    2'd2: begin
                        csrtransform_packetheaderdecode_next_state <= 3'd4;
                    end
                    2'd3: begin
                        csrtransform_packetheaderdecode_next_state <= 3'd4;
                    end
                endcase
            end
        end
        2'd2: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_o_data_strobe) begin
                csrtransform_packetheaderdecode_next_value <= basesoc_cdcusb_cdcusbphy_usb_core_rx_o_data_payload[6:0];
                csrtransform_packetheaderdecode_next_value_ce <= 1'd1;
                basesoc_cdcusb_cdcusbphy_usb_core_endp4_csrtransform_packetheaderdecode_next_value1 <= basesoc_cdcusb_cdcusbphy_usb_core_rx_o_data_payload[7];
                basesoc_cdcusb_cdcusbphy_usb_core_endp4_csrtransform_packetheaderdecode_next_value_ce1 <= 1'd1;
                csrtransform_packetheaderdecode_next_state <= 2'd3;
            end
        end
        2'd3: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_o_data_strobe) begin
                basesoc_cdcusb_cdcusbphy_usb_core_o_endp_csrtransform_packetheaderdecode_next_value2 <= {basesoc_cdcusb_cdcusbphy_usb_core_rx_o_data_payload[2:0], basesoc_cdcusb_cdcusbphy_usb_core_endp4};
                basesoc_cdcusb_cdcusbphy_usb_core_o_endp_csrtransform_packetheaderdecode_next_value_ce2 <= 1'd1;
                basesoc_cdcusb_cdcusbphy_usb_core_crc5_csrtransform_packetheaderdecode_next_value3 <= basesoc_cdcusb_cdcusbphy_usb_core_rx_o_data_payload[7:4];
                basesoc_cdcusb_cdcusbphy_usb_core_crc5_csrtransform_packetheaderdecode_next_value_ce3 <= 1'd1;
                csrtransform_packetheaderdecode_next_state <= 3'd4;
            end
        end
        3'd4: begin
            basesoc_cdcusb_cdcusbphy_usb_core_o_decoded <= 1'd1;
            csrtransform_packetheaderdecode_next_state <= 1'd0;
        end
        default: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_o_pkt_start) begin
                csrtransform_packetheaderdecode_next_state <= 1'd1;
            end
        end
    endcase
end
assign basesoc_cdcusb_cdcusbphy_usb_core_is_el0 = ((~(csrtransform_clockdomainsrenamer_state == 3'd6)) & (csrtransform_clockdomainsrenamer_next_state == 3'd6));
assign basesoc_cdcusb_cdcusbphy_usb_core_is_el1 = ((~(csrtransform_clockdomainsrenamer_state == 4'd8)) & (csrtransform_clockdomainsrenamer_next_state == 4'd8));
always @(*) begin
    basesoc_cdcusb_cdcusbphy_usb_core_abort <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_commit <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_data_end <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_data_recv_put <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_data_send_get <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_endp_csrtransform_f_next_value1 <= 4'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_endp_csrtransform_f_next_value_ce1 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_error <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_idle <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_poll <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_response_pid_csrtransform_t_next_value <= 4'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_response_pid_csrtransform_t_next_value_ce <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_retry <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_setup <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_start <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_tok_csrtransform_f_next_value0 <= 4'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_tok_csrtransform_f_next_value_ce0 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_pid <= 4'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_pkt_start <= 1'd0;
    csrtransform_clockdomainsrenamer_next_state <= 4'd0;
    if (basesoc_cdcusb_cdcusbphy_usb_core_is_el0) begin
        if (basesoc_cdcusb_cdcusbphy_usb_core_dtb) begin
            basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_pid <= 4'd11;
        end else begin
            basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_pid <= 2'd3;
        end
        basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_pkt_start <= 1'd1;
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_is_el1) begin
        basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_pid <= basesoc_cdcusb_cdcusbphy_usb_core_response_pid;
        basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_pkt_start <= 1'd1;
    end
    csrtransform_clockdomainsrenamer_next_state <= csrtransform_clockdomainsrenamer_state;
    case (csrtransform_clockdomainsrenamer_state)
        1'd0: begin
            basesoc_cdcusb_cdcusbphy_usb_core_error <= 1'd1;
        end
        2'd2: begin
            basesoc_cdcusb_cdcusbphy_usb_core_idle <= 1'd0;
            if (basesoc_cdcusb_cdcusbphy_usb_core_o_decoded) begin
                if ((basesoc_cdcusb_cdcusbphy_usb_core_o_addr != basesoc_cdcusb_cdcusbphy_usb_core_addr)) begin
                    csrtransform_clockdomainsrenamer_next_state <= 1'd1;
                end else begin
                    basesoc_cdcusb_cdcusbphy_usb_core_start <= 1'd1;
                    basesoc_cdcusb_cdcusbphy_usb_core_tok_csrtransform_f_next_value0 <= basesoc_cdcusb_cdcusbphy_usb_core_o_pid;
                    basesoc_cdcusb_cdcusbphy_usb_core_tok_csrtransform_f_next_value_ce0 <= 1'd1;
                    basesoc_cdcusb_cdcusbphy_usb_core_endp_csrtransform_f_next_value1 <= basesoc_cdcusb_cdcusbphy_usb_core_o_endp;
                    basesoc_cdcusb_cdcusbphy_usb_core_endp_csrtransform_f_next_value_ce1 <= 1'd1;
                    csrtransform_clockdomainsrenamer_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            basesoc_cdcusb_cdcusbphy_usb_core_poll <= 1'd1;
            if (basesoc_cdcusb_cdcusbphy_usb_core_rdy) begin
                if ((basesoc_cdcusb_cdcusbphy_usb_core_tok == 4'd13)) begin
                    basesoc_cdcusb_cdcusbphy_usb_core_response_pid_csrtransform_t_next_value <= 2'd2;
                    basesoc_cdcusb_cdcusbphy_usb_core_response_pid_csrtransform_t_next_value_ce <= 1'd1;
                end else begin
                    if (basesoc_cdcusb_cdcusbphy_usb_core_sta) begin
                        basesoc_cdcusb_cdcusbphy_usb_core_response_pid_csrtransform_t_next_value <= 4'd14;
                        basesoc_cdcusb_cdcusbphy_usb_core_response_pid_csrtransform_t_next_value_ce <= 1'd1;
                    end else begin
                        if (basesoc_cdcusb_cdcusbphy_usb_core_arm) begin
                            basesoc_cdcusb_cdcusbphy_usb_core_response_pid_csrtransform_t_next_value <= 2'd2;
                            basesoc_cdcusb_cdcusbphy_usb_core_response_pid_csrtransform_t_next_value_ce <= 1'd1;
                        end else begin
                            basesoc_cdcusb_cdcusbphy_usb_core_response_pid_csrtransform_t_next_value <= 4'd10;
                            basesoc_cdcusb_cdcusbphy_usb_core_response_pid_csrtransform_t_next_value_ce <= 1'd1;
                        end
                    end
                end
                if ((basesoc_cdcusb_cdcusbphy_usb_core_o_pid == 3'd5)) begin
                    csrtransform_clockdomainsrenamer_next_state <= 1'd1;
                end else begin
                    if ((basesoc_cdcusb_cdcusbphy_usb_core_tok == 4'd13)) begin
                        csrtransform_clockdomainsrenamer_next_state <= 3'd4;
                    end else begin
                        if ((basesoc_cdcusb_cdcusbphy_usb_core_tok == 1'd1)) begin
                            csrtransform_clockdomainsrenamer_next_state <= 3'd4;
                        end else begin
                            if ((basesoc_cdcusb_cdcusbphy_usb_core_tok == 4'd9)) begin
                                if (((~basesoc_cdcusb_cdcusbphy_usb_core_arm) | basesoc_cdcusb_cdcusbphy_usb_core_sta)) begin
                                    csrtransform_clockdomainsrenamer_next_state <= 4'd8;
                                end else begin
                                    csrtransform_clockdomainsrenamer_next_state <= 3'd6;
                                end
                            end else begin
                                csrtransform_clockdomainsrenamer_next_state <= 1'd1;
                            end
                        end
                    end
                end
            end
        end
        3'd4: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_o_decoded) begin
                if (((basesoc_cdcusb_cdcusbphy_usb_core_o_pid & 2'd3) == 2'd3)) begin
                    csrtransform_clockdomainsrenamer_next_state <= 3'd5;
                end else begin
                    if ((basesoc_cdcusb_cdcusbphy_usb_core_o_pid == 3'd5)) begin
                        csrtransform_clockdomainsrenamer_next_state <= 3'd4;
                    end else begin
                        csrtransform_clockdomainsrenamer_next_state <= 1'd0;
                    end
                end
            end
        end
        3'd5: begin
            if ((basesoc_cdcusb_cdcusbphy_usb_core_response_pid == 2'd2)) begin
                basesoc_cdcusb_cdcusbphy_usb_core_data_recv_put <= basesoc_cdcusb_cdcusbphy_usb_core_rx_o_data_strobe;
            end
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_o_pkt_end) begin
                csrtransform_clockdomainsrenamer_next_state <= 4'd8;
            end
        end
        3'd6: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_dtb) begin
                basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_pid <= 4'd11;
            end else begin
                basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_pid <= 2'd3;
            end
            basesoc_cdcusb_cdcusbphy_usb_core_data_send_get <= basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_data_ack;
            basesoc_cdcusb_cdcusbphy_usb_core_data_end <= basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_pkt_end;
            if (basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_pkt_end) begin
                csrtransform_clockdomainsrenamer_next_state <= 3'd7;
            end
        end
        3'd7: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_o_decoded) begin
                basesoc_cdcusb_cdcusbphy_usb_core_commit <= 1'd1;
                if ((basesoc_cdcusb_cdcusbphy_usb_core_o_pid == 2'd2)) begin
                    csrtransform_clockdomainsrenamer_next_state <= 1'd1;
                end else begin
                    if ((basesoc_cdcusb_cdcusbphy_usb_core_o_pid == 4'd9)) begin
                        basesoc_cdcusb_cdcusbphy_usb_core_retry <= 1'd1;
                        csrtransform_clockdomainsrenamer_next_state <= 3'd6;
                    end else begin
                        csrtransform_clockdomainsrenamer_next_state <= 1'd0;
                    end
                end
            end
        end
        4'd8: begin
            basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_pid <= basesoc_cdcusb_cdcusbphy_usb_core_response_pid;
            if (basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_pkt_end) begin
                basesoc_cdcusb_cdcusbphy_usb_core_setup <= (basesoc_cdcusb_cdcusbphy_usb_core_tok == 4'd13);
                if ((basesoc_cdcusb_cdcusbphy_usb_core_response_pid == 2'd2)) begin
                    basesoc_cdcusb_cdcusbphy_usb_core_commit <= 1'd1;
                end else begin
                    basesoc_cdcusb_cdcusbphy_usb_core_abort <= 1'd1;
                end
                csrtransform_clockdomainsrenamer_next_state <= 1'd1;
            end
        end
        default: begin
            basesoc_cdcusb_cdcusbphy_usb_core_idle <= 1'd1;
            if (basesoc_cdcusb_cdcusbphy_usb_core_rx_o_pkt_start) begin
                csrtransform_clockdomainsrenamer_next_state <= 2'd2;
            end
        end
    endcase
end
assign basesoc_usb_iobuf_usb_pullup = basesoc_cdcusb_cdcusbphy_pullup_storage;
assign basesoc_cdcusb_cdcusbphy_setuphandler_reset_trigger = (~basesoc_cdcusb_cdcusbphy_setuphandler_usb_reset);
assign basesoc_cdcusb_cdcusbphy_setuphandler_inner_reset = ((basesoc_cdcusb_cdcusbphy_setuphandler_reset | basesoc_cdcusb_cdcusbphy_setuphandler_begin) | basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_reset);
assign basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_ready0 = basesoc_cdcusb_cdcusbphy_setuphandler_packet_status;
assign basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_ready1 = basesoc_cdcusb_cdcusbphy_setuphandler_packet_pending;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_setuphandler_packet_clear <= 1'd0;
    basesoc_cdcusb_cdcusbphy_setuphandler_packet_clear <= basesoc_cdcusb_cdcusbphy_setuphandler_begin;
    if ((basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_pending_re & basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_pending_r[0])) begin
        basesoc_cdcusb_cdcusbphy_setuphandler_packet_clear <= 1'd1;
    end
end
assign basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_reset0 = basesoc_cdcusb_cdcusbphy_setuphandler_reset_status;
assign basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_reset1 = basesoc_cdcusb_cdcusbphy_setuphandler_reset_pending;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_setuphandler_reset_clear <= 1'd0;
    if ((basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_pending_re & basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_pending_r[1])) begin
        basesoc_cdcusb_cdcusbphy_setuphandler_reset_clear <= 1'd1;
    end
end
assign basesoc_cdcusb_cdcusbphy_setuphandler_irq = ((basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_pending_status[0] & basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_enable_storage[0]) | (basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_pending_status[1] & basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_enable_storage[1]));
assign basesoc_cdcusb_cdcusbphy_setuphandler_packet_status = 1'd0;
assign basesoc_cdcusb_cdcusbphy_setuphandler_reset_status = basesoc_cdcusb_cdcusbphy_setuphandler_reset_trigger;
assign basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_empty = (~basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_readable);
assign basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_have = basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_readable;
assign basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_is_in = basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_is_in;
assign basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_epno = basesoc_cdcusb_cdcusbphy_setuphandler_epno;
assign basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_pend = basesoc_cdcusb_cdcusbphy_setuphandler_packet_pending;
assign basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_data1 = basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_have_data_stage;
assign basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_data0 = basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_dout;
assign basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_re = basesoc_cdcusb_cdcusbphy_setuphandler_data_we;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_din <= 8'd0;
    basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_we <= 1'd0;
    if ((basesoc_cdcusb_cdcusbphy_usb_core_tok == 4'd13)) begin
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_din <= basesoc_cdcusb_cdcusbphy_setuphandler_data_recv_payload;
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_we <= basesoc_cdcusb_cdcusbphy_setuphandler_data_recv_put;
    end
end
assign basesoc_cdcusb_cdcusbphy_setuphandler_packet_trigger = (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_readable & basesoc_cdcusb_cdcusbphy_usb_core_setup);
assign basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_re = (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_readable & ((~basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_readable) | basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_re));
assign basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_level1 = (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_level0 + basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_readable);
always @(*) begin
    basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_wrport_adr <= 4'd0;
    if (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_replace) begin
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_wrport_adr <= (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_produce - 1'd1);
    end else begin
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_wrport_adr <= basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_produce;
    end
end
assign basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_wrport_dat_w = basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_din;
assign basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_wrport_we = (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_we & (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_writable | basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_replace));
assign basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_do_read = (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_readable & basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_re);
assign basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_rdport_adr = basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_consume;
assign basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_dout = basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_rdport_dat_r;
assign basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_rdport_re = basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_do_read;
assign basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_writable = (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_level0 != 4'd10);
assign basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_readable = (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_level0 != 1'd0);
assign basesoc_cdcusb_cdcusbphy_inhandler_ep_stall_mask = (1'd1 <<< basesoc_cdcusb_cdcusbphy_inhandler_csrfield_epno);
assign basesoc_cdcusb_cdcusbphy_inhandler_stalled = (basesoc_cdcusb_cdcusbphy_inhandler_stall_status >>> basesoc_cdcusb_cdcusbphy_usb_core_endp);
assign basesoc_cdcusb_cdcusbphy_inhandler_data_buf_reset = (basesoc_cdcusb_cdcusbphy_inhandler_csrfield_reset | ((basesoc_cdcusb_cdcusbphy_usb_core_commit & basesoc_cdcusb_cdcusbphy_inhandler_transmitted) & basesoc_cdcusb_cdcusbphy_inhandler_queued));
assign basesoc_cdcusb_cdcusbphy_inhandler_response = ((basesoc_cdcusb_cdcusbphy_inhandler_queued & basesoc_cdcusb_cdcusbphy_inhandler_is_our_packet) & basesoc_cdcusb_cdcusbphy_inhandler_is_in_packet);
assign basesoc_cdcusb_cdcusbphy_inhandler_csrfield_have = basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_readable;
assign basesoc_cdcusb_cdcusbphy_inhandler_csrfield_idle = (~basesoc_cdcusb_cdcusbphy_inhandler_queued);
assign basesoc_cdcusb_cdcusbphy_inhandler_csrfield_pend = basesoc_cdcusb_cdcusbphy_inhandler_packet_pending;
assign basesoc_cdcusb_cdcusbphy_inhandler_packet_trigger = ((~basesoc_cdcusb_cdcusbphy_inhandler_queued) & basesoc_cdcusb_cdcusbphy_inhandler_was_queued);
assign basesoc_cdcusb_cdcusbphy_inhandler_dtb = (basesoc_cdcusb_cdcusbphy_inhandler_dtbs >>> basesoc_cdcusb_cdcusbphy_usb_core_endp);
assign basesoc_cdcusb_cdcusbphy_inhandler_data_out = basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_dout;
assign basesoc_cdcusb_cdcusbphy_inhandler_data_out_have = basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_readable;
assign basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_re = ((basesoc_cdcusb_cdcusbphy_inhandler_data_out_advance & basesoc_cdcusb_cdcusbphy_inhandler_is_in_packet) & basesoc_cdcusb_cdcusbphy_inhandler_is_our_packet);
assign basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_we = basesoc_cdcusb_cdcusbphy_inhandler_data_re;
assign basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_din = basesoc_cdcusb_cdcusbphy_inhandler_data_storage;
assign basesoc_cdcusb_cdcusbphy_inhandler_is_our_packet = (basesoc_cdcusb_cdcusbphy_inhandler_csrfield_epno == basesoc_cdcusb_cdcusbphy_usb_core_endp);
assign basesoc_cdcusb_cdcusbphy_inhandler_is_in_packet = (basesoc_cdcusb_cdcusbphy_usb_core_tok == 4'd9);
assign basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_re = (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_readable & ((~basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_readable) | basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_re));
assign basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_level1 = (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_level0 + basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_readable);
always @(*) begin
    basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_wrport_adr <= 6'd0;
    if (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_replace) begin
        basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_wrport_adr <= (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_produce - 1'd1);
    end else begin
        basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_wrport_adr <= basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_produce;
    end
end
assign basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_wrport_dat_w = basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_din;
assign basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_wrport_we = (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_we & (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_writable | basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_replace));
assign basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_do_read = (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_readable & basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_re);
assign basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_rdport_adr = basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_consume;
assign basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_dout = basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_rdport_dat_r;
assign basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_rdport_re = basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_do_read;
assign basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_writable = (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_level0 != 7'd64);
assign basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_readable = (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_level0 != 1'd0);
assign basesoc_cdcusb_cdcusbphy_inhandler_done0 = basesoc_cdcusb_cdcusbphy_inhandler_packet_status;
assign basesoc_cdcusb_cdcusbphy_inhandler_done1 = basesoc_cdcusb_cdcusbphy_inhandler_packet_pending;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_inhandler_packet_clear <= 1'd0;
    if ((basesoc_cdcusb_cdcusbphy_inhandler_pending_re & basesoc_cdcusb_cdcusbphy_inhandler_pending_r)) begin
        basesoc_cdcusb_cdcusbphy_inhandler_packet_clear <= 1'd1;
    end
end
assign basesoc_cdcusb_cdcusbphy_inhandler_irq = (basesoc_cdcusb_cdcusbphy_inhandler_pending_status & basesoc_cdcusb_cdcusbphy_inhandler_enable_storage);
assign basesoc_cdcusb_cdcusbphy_inhandler_packet_status = 1'd0;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_outhandler_ep_mask <= 16'd1;
    if ((basesoc_cdcusb_cdcusbphy_usb_core_setup | basesoc_cdcusb_cdcusbphy_usb_core_commit)) begin
        basesoc_cdcusb_cdcusbphy_outhandler_ep_mask <= (1'd1 <<< basesoc_cdcusb_cdcusbphy_usb_core_endp);
    end else begin
        basesoc_cdcusb_cdcusbphy_outhandler_ep_mask <= (1'd1 <<< basesoc_cdcusb_cdcusbphy_outhandler_csrfield_epno0);
    end
end
assign basesoc_cdcusb_cdcusbphy_outhandler_stalled = (basesoc_cdcusb_cdcusbphy_outhandler_stall_status >>> basesoc_cdcusb_cdcusbphy_usb_core_endp);
assign basesoc_cdcusb_cdcusbphy_outhandler_enabled = (basesoc_cdcusb_cdcusbphy_outhandler_enable_status >>> basesoc_cdcusb_cdcusbphy_usb_core_endp);
assign basesoc_cdcusb_cdcusbphy_outhandler_is_out_packet = (basesoc_cdcusb_cdcusbphy_usb_core_tok == 1'd1);
assign basesoc_cdcusb_cdcusbphy_outhandler_response = ((basesoc_cdcusb_cdcusbphy_outhandler_enabled & basesoc_cdcusb_cdcusbphy_outhandler_is_out_packet) & (~basesoc_cdcusb_cdcusbphy_outhandler_packet_pending));
assign basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_din = basesoc_cdcusb_cdcusbphy_outhandler_data_recv_payload;
assign basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_we = (basesoc_cdcusb_cdcusbphy_outhandler_data_recv_put & basesoc_cdcusb_cdcusbphy_outhandler_responding);
assign basesoc_cdcusb_cdcusbphy_outhandler_data_buf_reset = basesoc_cdcusb_cdcusbphy_outhandler_csrfield_reset;
assign basesoc_cdcusb_cdcusbphy_outhandler_csrfield_data = basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_dout;
assign basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_re = basesoc_cdcusb_cdcusbphy_outhandler_data_we;
assign basesoc_cdcusb_cdcusbphy_outhandler_csrfield_epno1 = basesoc_cdcusb_cdcusbphy_outhandler_epno;
assign basesoc_cdcusb_cdcusbphy_outhandler_csrfield_have = basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_readable;
assign basesoc_cdcusb_cdcusbphy_outhandler_csrfield_pend = basesoc_cdcusb_cdcusbphy_outhandler_packet_pending;
assign basesoc_cdcusb_cdcusbphy_outhandler_packet_trigger = (basesoc_cdcusb_cdcusbphy_outhandler_responding & basesoc_cdcusb_cdcusbphy_usb_core_commit);
assign basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_re = (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_readable & ((~basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_readable) | basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_re));
assign basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_level1 = (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_level0 + basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_readable);
always @(*) begin
    basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_wrport_adr <= 7'd0;
    if (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_replace) begin
        basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_wrport_adr <= (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_produce - 1'd1);
    end else begin
        basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_wrport_adr <= basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_produce;
    end
end
assign basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_wrport_dat_w = basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_din;
assign basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_wrport_we = (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_we & (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_writable | basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_replace));
assign basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_do_read = (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_readable & basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_re);
assign basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_rdport_adr = basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_consume;
assign basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_dout = basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_rdport_dat_r;
assign basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_rdport_re = basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_do_read;
assign basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_writable = (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_level0 != 7'd66);
assign basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_readable = (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_level0 != 1'd0);
assign basesoc_cdcusb_cdcusbphy_outhandler_done0 = basesoc_cdcusb_cdcusbphy_outhandler_packet_status;
assign basesoc_cdcusb_cdcusbphy_outhandler_done1 = basesoc_cdcusb_cdcusbphy_outhandler_packet_pending;
always @(*) begin
    basesoc_cdcusb_cdcusbphy_outhandler_packet_clear <= 1'd0;
    if ((basesoc_cdcusb_cdcusbphy_outhandler_pending_re & basesoc_cdcusb_cdcusbphy_outhandler_pending_r)) begin
        basesoc_cdcusb_cdcusbphy_outhandler_packet_clear <= 1'd1;
    end
end
assign basesoc_cdcusb_cdcusbphy_outhandler_irq = (basesoc_cdcusb_cdcusbphy_outhandler_pending_status & basesoc_cdcusb_cdcusbphy_outhandler_enable_storage);
assign basesoc_cdcusb_cdcusbphy_outhandler_packet_status = 1'd0;
assign basesoc_cdcusb_cdcusbphy_ev_irq = ((basesoc_cdcusb_cdcusbphy_setuphandler_irq | basesoc_cdcusb_cdcusbphy_inhandler_irq) | basesoc_cdcusb_cdcusbphy_outhandler_irq);
always @(*) begin
    basesoc_cdcusb_cdcusbphy_inhandler_data_out_advance <= 1'd0;
    basesoc_cdcusb_cdcusbphy_inhandler_dtb_reset <= 1'd0;
    basesoc_cdcusb_cdcusbphy_outhandler_data_recv_payload <= 8'd0;
    basesoc_cdcusb_cdcusbphy_outhandler_data_recv_put <= 1'd0;
    basesoc_cdcusb_cdcusbphy_setuphandler_begin <= 1'd0;
    basesoc_cdcusb_cdcusbphy_setuphandler_data_recv_payload <= 8'd0;
    basesoc_cdcusb_cdcusbphy_setuphandler_data_recv_put <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_addr_csrtransform_next_value <= 7'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_addr_csrtransform_next_value_ce <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_arm <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_data_send_have <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_data_send_payload <= 8'd0;
    basesoc_cdcusb_cdcusbphy_usb_core_sta <= 1'd0;
    csrtransform_next_state <= 3'd0;
    csrtransform_next_state <= csrtransform_state;
    case (csrtransform_state)
        1'd1: begin
            if (basesoc_cdcusb_cdcusbphy_usb_core_idle) begin
                csrtransform_next_state <= 1'd0;
            end else begin
                if ((basesoc_cdcusb_cdcusbphy_usb_core_tok == 4'd13)) begin
                    csrtransform_next_state <= 2'd3;
                    basesoc_cdcusb_cdcusbphy_setuphandler_begin <= 1'd1;
                    basesoc_cdcusb_cdcusbphy_inhandler_dtb_reset <= 1'd1;
                    basesoc_cdcusb_cdcusbphy_usb_core_sta <= 1'd0;
                    basesoc_cdcusb_cdcusbphy_usb_core_arm <= 1'd1;
                end else begin
                    if ((basesoc_cdcusb_cdcusbphy_usb_core_tok == 4'd9)) begin
                        csrtransform_next_state <= 3'd4;
                        basesoc_cdcusb_cdcusbphy_usb_core_sta <= basesoc_cdcusb_cdcusbphy_inhandler_stalled;
                        basesoc_cdcusb_cdcusbphy_usb_core_arm <= basesoc_cdcusb_cdcusbphy_inhandler_response;
                    end else begin
                        if ((basesoc_cdcusb_cdcusbphy_usb_core_tok == 1'd1)) begin
                            csrtransform_next_state <= 3'd5;
                            basesoc_cdcusb_cdcusbphy_usb_core_sta <= basesoc_cdcusb_cdcusbphy_outhandler_stalled;
                            basesoc_cdcusb_cdcusbphy_usb_core_arm <= basesoc_cdcusb_cdcusbphy_outhandler_response;
                        end else begin
                            csrtransform_next_state <= 1'd0;
                        end
                    end
                end
            end
        end
        2'd2: begin
            csrtransform_next_state <= 1'd0;
        end
        2'd3: begin
            basesoc_cdcusb_cdcusbphy_setuphandler_data_recv_payload <= basesoc_cdcusb_cdcusbphy_usb_core_data_recv_payload;
            basesoc_cdcusb_cdcusbphy_setuphandler_data_recv_put <= basesoc_cdcusb_cdcusbphy_usb_core_data_recv_put;
            basesoc_cdcusb_cdcusbphy_usb_core_sta <= 1'd0;
            basesoc_cdcusb_cdcusbphy_usb_core_arm <= 1'd1;
            if (basesoc_cdcusb_cdcusbphy_debug_packet_detected) begin
                csrtransform_next_state <= 2'd2;
            end
            if (basesoc_cdcusb_cdcusbphy_usb_core_end) begin
                csrtransform_next_state <= 1'd0;
            end
        end
        3'd4: begin
            if ((basesoc_cdcusb_cdcusbphy_usb_core_tok == 4'd9)) begin
                basesoc_cdcusb_cdcusbphy_usb_core_data_send_have <= basesoc_cdcusb_cdcusbphy_inhandler_data_out_have;
                basesoc_cdcusb_cdcusbphy_usb_core_data_send_payload <= basesoc_cdcusb_cdcusbphy_inhandler_data_out;
                basesoc_cdcusb_cdcusbphy_inhandler_data_out_advance <= basesoc_cdcusb_cdcusbphy_usb_core_data_send_get;
                basesoc_cdcusb_cdcusbphy_usb_core_sta <= basesoc_cdcusb_cdcusbphy_inhandler_stalled;
                basesoc_cdcusb_cdcusbphy_usb_core_arm <= basesoc_cdcusb_cdcusbphy_inhandler_response;
                if (basesoc_cdcusb_cdcusbphy_usb_core_end) begin
                    csrtransform_next_state <= 1'd0;
                end
            end
        end
        3'd5: begin
            if ((basesoc_cdcusb_cdcusbphy_usb_core_tok == 1'd1)) begin
                basesoc_cdcusb_cdcusbphy_outhandler_data_recv_payload <= basesoc_cdcusb_cdcusbphy_usb_core_data_recv_payload;
                basesoc_cdcusb_cdcusbphy_outhandler_data_recv_put <= basesoc_cdcusb_cdcusbphy_usb_core_data_recv_put;
                basesoc_cdcusb_cdcusbphy_usb_core_sta <= basesoc_cdcusb_cdcusbphy_outhandler_stalled;
                basesoc_cdcusb_cdcusbphy_usb_core_arm <= basesoc_cdcusb_cdcusbphy_outhandler_response;
                if (basesoc_cdcusb_cdcusbphy_usb_core_end) begin
                    csrtransform_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_cdcusb_cdcusbphy_usb_core_addr_csrtransform_next_value <= basesoc_cdcusb_cdcusbphy_csrstorage_storage;
            basesoc_cdcusb_cdcusbphy_usb_core_addr_csrtransform_next_value_ce <= 1'd1;
            if (basesoc_cdcusb_cdcusbphy_usb_core_start) begin
                csrtransform_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    basesoc_cdcusb_cdcusbphy_bytes_addr_fsm_f_next_value1 <= 9'd0;
    basesoc_cdcusb_cdcusbphy_bytes_addr_fsm_f_next_value_ce1 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_bytes_remaining_fsm_f_next_value0 <= 6'd0;
    basesoc_cdcusb_cdcusbphy_bytes_remaining_fsm_f_next_value_ce0 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_csrtransform_address_addr0 <= 7'd0;
    basesoc_cdcusb_cdcusbphy_csrtransform_address_re <= 1'd0;
    basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_epno0 <= 4'd0;
    basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_re <= 1'd0;
    basesoc_cdcusb_cdcusbphy_csrtransform_in_data_data0 <= 8'd0;
    basesoc_cdcusb_cdcusbphy_csrtransform_in_data_re <= 1'd0;
    basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_enable0 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_epno0 <= 4'd0;
    basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_re <= 1'd0;
    basesoc_cdcusb_cdcusbphy_data_d1_fsm_t_next_value0 <= 8'd0;
    basesoc_cdcusb_cdcusbphy_data_d1_fsm_t_next_value_ce0 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_data_d2_fsm_t_next_value1 <= 8'd0;
    basesoc_cdcusb_cdcusbphy_data_d2_fsm_t_next_value_ce1 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value1 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value_ce1 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_dtr_fsm_t_next_value6 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_dtr_fsm_t_next_value_ce6 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_inhandler_pending_r <= 1'd0;
    basesoc_cdcusb_cdcusbphy_inhandler_pending_re <= 1'd0;
    basesoc_cdcusb_cdcusbphy_new_address_fsm_t_next_value4 <= 7'd0;
    basesoc_cdcusb_cdcusbphy_new_address_fsm_t_next_value_ce4 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_outhandler_data_we <= 1'd0;
    basesoc_cdcusb_cdcusbphy_outhandler_pending_r <= 1'd0;
    basesoc_cdcusb_cdcusbphy_outhandler_pending_re <= 1'd0;
    basesoc_cdcusb_cdcusbphy_re_d1_fsm_t_next_value2 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_re_d1_fsm_t_next_value_ce2 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_re_d2_fsm_t_next_value3 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_re_d2_fsm_t_next_value_ce3 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_rts_fsm_t_next_value5 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_rts_fsm_t_next_value_ce5 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_setup_index_fsm_next_value0 <= 4'd0;
    basesoc_cdcusb_cdcusbphy_setup_index_fsm_next_value_ce0 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_setuphandler_data_we <= 1'd0;
    basesoc_cdcusb_cdcusbphy_sink_payload_data <= 8'd0;
    basesoc_cdcusb_cdcusbphy_sink_valid <= 1'd0;
    basesoc_cdcusb_cdcusbphy_source_ready <= 1'd0;
    basesoc_cdcusb_cdcusbphy_usbPacket_fsm_lowernext_next_value0 <= 32'd0;
    basesoc_cdcusb_cdcusbphy_usbPacket_fsm_lowernext_next_value_ce0 <= 1'd0;
    basesoc_cdcusb_cdcusbphy_wLength_fsm_lowernext_next_value1 <= 8'd0;
    basesoc_cdcusb_cdcusbphy_wLength_fsm_lowernext_next_value_ce1 <= 1'd0;
    fsm_next_state <= 3'd0;
    fsm_next_state <= fsm_state;
    case (fsm_state)
        1'd1: begin
            basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_epno0 <= 1'd0;
            basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_enable0 <= 1'd1;
            basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_re <= 1'd1;
            if (basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_have) begin
                fsm_next_state <= 3'd4;
                basesoc_cdcusb_cdcusbphy_setup_index_fsm_next_value0 <= 1'd0;
                basesoc_cdcusb_cdcusbphy_setup_index_fsm_next_value_ce0 <= 1'd1;
                basesoc_cdcusb_cdcusbphy_outhandler_pending_r <= 1'd1;
                basesoc_cdcusb_cdcusbphy_outhandler_pending_re <= 1'd1;
            end else begin
                if (basesoc_cdcusb_cdcusbphy_outhandler_csrfield_have) begin
                end
            end
            if (basesoc_cdcusb_cdcusbphy_outhandler_pending_status) begin
                basesoc_cdcusb_cdcusbphy_outhandler_pending_r <= 1'd1;
                basesoc_cdcusb_cdcusbphy_outhandler_pending_re <= 1'd1;
                if (((basesoc_cdcusb_cdcusbphy_outhandler_csrfield_epno1 == 2'd2) & basesoc_cdcusb_cdcusbphy_outhandler_csrfield_pend)) begin
                    fsm_next_state <= 2'd3;
                end
            end
            if ((basesoc_cdcusb_cdcusbphy_source_valid & basesoc_cdcusb_cdcusbphy_configured)) begin
                fsm_next_state <= 2'd2;
            end
        end
        2'd2: begin
            basesoc_cdcusb_cdcusbphy_csrtransform_in_data_data0 <= basesoc_cdcusb_cdcusbphy_source_payload_data;
            basesoc_cdcusb_cdcusbphy_csrtransform_in_data_re <= (basesoc_cdcusb_cdcusbphy_delayed_re & basesoc_cdcusb_cdcusbphy_source_valid);
            basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value1 <= 1'd0;
            basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value_ce1 <= 1'd1;
            basesoc_cdcusb_cdcusbphy_source_ready <= (basesoc_cdcusb_cdcusbphy_delayed_re & basesoc_cdcusb_cdcusbphy_source_valid);
            if (basesoc_cdcusb_cdcusbphy_source_valid) begin
                basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value1 <= basesoc_cdcusb_cdcusbphy_source_valid;
                basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value_ce1 <= 1'd1;
            end else begin
                basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_epno0 <= 2'd2;
                basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_re <= 1'd1;
                fsm_next_state <= 3'd6;
            end
        end
        2'd3: begin
            basesoc_cdcusb_cdcusbphy_sink_payload_data <= basesoc_cdcusb_cdcusbphy_data_d2;
            basesoc_cdcusb_cdcusbphy_outhandler_data_we <= ((basesoc_cdcusb_cdcusbphy_delayed_re & basesoc_cdcusb_cdcusbphy_outhandler_csrfield_have) & basesoc_cdcusb_cdcusbphy_sink_ready);
            basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value1 <= 1'd0;
            basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value_ce1 <= 1'd1;
            basesoc_cdcusb_cdcusbphy_sink_valid <= ((basesoc_cdcusb_cdcusbphy_re_d2 & basesoc_cdcusb_cdcusbphy_outhandler_csrfield_have) & basesoc_cdcusb_cdcusbphy_sink_ready);
            if (basesoc_cdcusb_cdcusbphy_outhandler_csrfield_have) begin
                basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value1 <= basesoc_cdcusb_cdcusbphy_outhandler_csrfield_have;
                basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value_ce1 <= 1'd1;
                if (basesoc_cdcusb_cdcusbphy_sink_ready) begin
                    basesoc_cdcusb_cdcusbphy_data_d1_fsm_t_next_value0 <= basesoc_cdcusb_cdcusbphy_outhandler_csrfield_data;
                    basesoc_cdcusb_cdcusbphy_data_d1_fsm_t_next_value_ce0 <= 1'd1;
                    basesoc_cdcusb_cdcusbphy_data_d2_fsm_t_next_value1 <= basesoc_cdcusb_cdcusbphy_data_d1;
                    basesoc_cdcusb_cdcusbphy_data_d2_fsm_t_next_value_ce1 <= 1'd1;
                    basesoc_cdcusb_cdcusbphy_re_d1_fsm_t_next_value2 <= basesoc_cdcusb_cdcusbphy_delayed_re;
                    basesoc_cdcusb_cdcusbphy_re_d1_fsm_t_next_value_ce2 <= 1'd1;
                    basesoc_cdcusb_cdcusbphy_re_d2_fsm_t_next_value3 <= basesoc_cdcusb_cdcusbphy_re_d1;
                    basesoc_cdcusb_cdcusbphy_re_d2_fsm_t_next_value_ce3 <= 1'd1;
                end
            end else begin
                basesoc_cdcusb_cdcusbphy_data_d1_fsm_t_next_value0 <= 1'd0;
                basesoc_cdcusb_cdcusbphy_data_d1_fsm_t_next_value_ce0 <= 1'd1;
                basesoc_cdcusb_cdcusbphy_data_d2_fsm_t_next_value1 <= 1'd0;
                basesoc_cdcusb_cdcusbphy_data_d2_fsm_t_next_value_ce1 <= 1'd1;
                basesoc_cdcusb_cdcusbphy_re_d1_fsm_t_next_value2 <= 1'd0;
                basesoc_cdcusb_cdcusbphy_re_d1_fsm_t_next_value_ce2 <= 1'd1;
                basesoc_cdcusb_cdcusbphy_re_d2_fsm_t_next_value3 <= 1'd0;
                basesoc_cdcusb_cdcusbphy_re_d2_fsm_t_next_value_ce3 <= 1'd1;
                basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value1 <= 1'd0;
                basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value_ce1 <= 1'd1;
                fsm_next_state <= 1'd0;
            end
        end
        3'd4: begin
            if (basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_have) begin
                basesoc_cdcusb_cdcusbphy_setup_index_fsm_next_value0 <= (basesoc_cdcusb_cdcusbphy_setup_index + 1'd1);
                basesoc_cdcusb_cdcusbphy_setup_index_fsm_next_value_ce0 <= 1'd1;
                case (basesoc_cdcusb_cdcusbphy_setup_index)
                    1'd0: begin
                        basesoc_cdcusb_cdcusbphy_usbPacket_fsm_lowernext_next_value0 <= {basesoc_cdcusb_cdcusbphy_usbPacket[23:0], basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_data0};
                        basesoc_cdcusb_cdcusbphy_usbPacket_fsm_lowernext_next_value_ce0 <= 1'd1;
                    end
                    1'd1: begin
                        basesoc_cdcusb_cdcusbphy_usbPacket_fsm_lowernext_next_value0 <= {basesoc_cdcusb_cdcusbphy_usbPacket[23:0], basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_data0};
                        basesoc_cdcusb_cdcusbphy_usbPacket_fsm_lowernext_next_value_ce0 <= 1'd1;
                    end
                    2'd2: begin
                        basesoc_cdcusb_cdcusbphy_usbPacket_fsm_lowernext_next_value0 <= {basesoc_cdcusb_cdcusbphy_usbPacket[23:0], basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_data0};
                        basesoc_cdcusb_cdcusbphy_usbPacket_fsm_lowernext_next_value_ce0 <= 1'd1;
                    end
                    2'd3: begin
                        basesoc_cdcusb_cdcusbphy_usbPacket_fsm_lowernext_next_value0 <= {basesoc_cdcusb_cdcusbphy_usbPacket[23:0], basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_data0};
                        basesoc_cdcusb_cdcusbphy_usbPacket_fsm_lowernext_next_value_ce0 <= 1'd1;
                    end
                    3'd6: begin
                        basesoc_cdcusb_cdcusbphy_wLength_fsm_lowernext_next_value1 <= basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_data0;
                        basesoc_cdcusb_cdcusbphy_wLength_fsm_lowernext_next_value_ce1 <= 1'd1;
                    end
                    3'd7: begin
                        if ((basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_data0 > 1'd0)) begin
                            basesoc_cdcusb_cdcusbphy_wLength_fsm_lowernext_next_value1 <= 8'd255;
                            basesoc_cdcusb_cdcusbphy_wLength_fsm_lowernext_next_value_ce1 <= 1'd1;
                        end
                    end
                endcase
                basesoc_cdcusb_cdcusbphy_setuphandler_data_we <= 1'd1;
            end
            if ((basesoc_cdcusb_cdcusbphy_setup_index == 4'd10)) begin
                basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_epno0 <= 1'd0;
                basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_re <= 1'd1;
                fsm_next_state <= 3'd6;
                if ((basesoc_cdcusb_cdcusbphy_wRequestAndType == 3'd5)) begin
                    basesoc_cdcusb_cdcusbphy_new_address_fsm_t_next_value4 <= basesoc_cdcusb_cdcusbphy_wValue[14:8];
                    basesoc_cdcusb_cdcusbphy_new_address_fsm_t_next_value_ce4 <= 1'd1;
                    fsm_next_state <= 3'd6;
                end else begin
                    if ((basesoc_cdcusb_cdcusbphy_wRequestAndType == 14'd8482)) begin
                        basesoc_cdcusb_cdcusbphy_rts_fsm_t_next_value5 <= basesoc_cdcusb_cdcusbphy_wValue[9];
                        basesoc_cdcusb_cdcusbphy_rts_fsm_t_next_value_ce5 <= 1'd1;
                        basesoc_cdcusb_cdcusbphy_dtr_fsm_t_next_value6 <= basesoc_cdcusb_cdcusbphy_wValue[8];
                        basesoc_cdcusb_cdcusbphy_dtr_fsm_t_next_value_ce6 <= 1'd1;
                        fsm_next_state <= 3'd6;
                    end else begin
                        if ((basesoc_cdcusb_cdcusbphy_setuphandler_csrfield_is_in & (basesoc_cdcusb_cdcusbphy_response_len > 1'd0))) begin
                            fsm_next_state <= 3'd5;
                            if ((basesoc_cdcusb_cdcusbphy_response_len > basesoc_cdcusb_cdcusbphy_wLength)) begin
                                basesoc_cdcusb_cdcusbphy_bytes_remaining_fsm_f_next_value0 <= basesoc_cdcusb_cdcusbphy_wLength;
                                basesoc_cdcusb_cdcusbphy_bytes_remaining_fsm_f_next_value_ce0 <= 1'd1;
                            end else begin
                                basesoc_cdcusb_cdcusbphy_bytes_remaining_fsm_f_next_value0 <= basesoc_cdcusb_cdcusbphy_response_len;
                                basesoc_cdcusb_cdcusbphy_bytes_remaining_fsm_f_next_value_ce0 <= 1'd1;
                            end
                            basesoc_cdcusb_cdcusbphy_bytes_addr_fsm_f_next_value1 <= basesoc_cdcusb_cdcusbphy_response_addr;
                            basesoc_cdcusb_cdcusbphy_bytes_addr_fsm_f_next_value_ce1 <= 1'd1;
                        end
                    end
                end
            end
        end
        3'd5: begin
            basesoc_cdcusb_cdcusbphy_csrtransform_in_data_data0 <= basesoc_cdcusb_cdcusbphy_dat_r;
            basesoc_cdcusb_cdcusbphy_csrtransform_in_data_re <= basesoc_cdcusb_cdcusbphy_delayed_re;
            basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value1 <= 1'd0;
            basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value_ce1 <= 1'd1;
            if (basesoc_cdcusb_cdcusbphy_bytes_remaining) begin
                basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value1 <= 1'd1;
                basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value_ce1 <= 1'd1;
                basesoc_cdcusb_cdcusbphy_bytes_addr_fsm_f_next_value1 <= (basesoc_cdcusb_cdcusbphy_bytes_addr + 1'd1);
                basesoc_cdcusb_cdcusbphy_bytes_addr_fsm_f_next_value_ce1 <= 1'd1;
                basesoc_cdcusb_cdcusbphy_bytes_remaining_fsm_f_next_value0 <= (basesoc_cdcusb_cdcusbphy_bytes_remaining - 1'd1);
                basesoc_cdcusb_cdcusbphy_bytes_remaining_fsm_f_next_value_ce0 <= 1'd1;
            end else begin
                if (basesoc_cdcusb_cdcusbphy_inhandler_pending_status) begin
                    fsm_next_state <= 3'd6;
                end
            end
        end
        3'd6: begin
            basesoc_cdcusb_cdcusbphy_outhandler_data_we <= 1'd1;
            if (basesoc_cdcusb_cdcusbphy_inhandler_pending_status) begin
                basesoc_cdcusb_cdcusbphy_inhandler_pending_r <= 1'd1;
                basesoc_cdcusb_cdcusbphy_inhandler_pending_re <= 1'd1;
                fsm_next_state <= 1'd0;
            end
        end
        3'd7: begin
            if ((basesoc_cdcusb_cdcusbphy_inhandler_pending_status & basesoc_cdcusb_cdcusbphy_outhandler_pending_status)) begin
                basesoc_cdcusb_cdcusbphy_inhandler_pending_r <= 1'd1;
                basesoc_cdcusb_cdcusbphy_inhandler_pending_re <= 1'd1;
                basesoc_cdcusb_cdcusbphy_outhandler_pending_r <= 1'd1;
                basesoc_cdcusb_cdcusbphy_outhandler_pending_re <= 1'd1;
                fsm_next_state <= 1'd0;
            end
        end
        default: begin
            basesoc_cdcusb_cdcusbphy_csrtransform_address_addr0 <= basesoc_cdcusb_cdcusbphy_new_address;
            basesoc_cdcusb_cdcusbphy_csrtransform_address_re <= 1'd1;
            basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_epno0 <= 2'd2;
            basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_enable0 <= 1'd1;
            basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_re <= 1'd1;
            fsm_next_state <= 1'd1;
        end
    endcase
end
assign basesoc_cdcusb_tx0 = basesoc_cdcusb_tx_status;
assign basesoc_cdcusb_tx1 = basesoc_cdcusb_tx_pending;
always @(*) begin
    basesoc_cdcusb_tx_clear <= 1'd0;
    if ((basesoc_cdcusb_pending_re & basesoc_cdcusb_pending_r[0])) begin
        basesoc_cdcusb_tx_clear <= 1'd1;
    end
end
assign basesoc_cdcusb_rx0 = basesoc_cdcusb_rx_status;
assign basesoc_cdcusb_rx1 = basesoc_cdcusb_rx_pending;
always @(*) begin
    basesoc_cdcusb_rx_clear <= 1'd0;
    if ((basesoc_cdcusb_pending_re & basesoc_cdcusb_pending_r[1])) begin
        basesoc_cdcusb_rx_clear <= 1'd1;
    end
end
assign basesoc_cdcusb_irq = ((basesoc_cdcusb_pending_status[0] & basesoc_cdcusb_enable_storage[0]) | (basesoc_cdcusb_pending_status[1] & basesoc_cdcusb_enable_storage[1]));
assign basesoc_cdcusb_tx_status = basesoc_cdcusb_tx_trigger;
assign basesoc_cdcusb_rx_status = basesoc_cdcusb_rx_trigger;
assign basesoc_cdcusb_o = (basesoc_cdcusb_toggle_o ^ basesoc_cdcusb_toggle_o_r);
assign basesoc_cdcusb_asyncfifo0_asyncfifo0_din = {basesoc_cdcusb_asyncfifo0_fifo_in_last, basesoc_cdcusb_asyncfifo0_fifo_in_first, basesoc_cdcusb_asyncfifo0_fifo_in_payload_data};
assign {basesoc_cdcusb_asyncfifo0_fifo_out_last, basesoc_cdcusb_asyncfifo0_fifo_out_first, basesoc_cdcusb_asyncfifo0_fifo_out_payload_data} = basesoc_cdcusb_asyncfifo0_asyncfifo0_dout;
assign basesoc_cdcusb_asyncfifo0_sink_ready = basesoc_cdcusb_asyncfifo0_asyncfifo0_writable;
assign basesoc_cdcusb_asyncfifo0_asyncfifo0_we = basesoc_cdcusb_asyncfifo0_sink_valid;
assign basesoc_cdcusb_asyncfifo0_fifo_in_first = basesoc_cdcusb_asyncfifo0_sink_first;
assign basesoc_cdcusb_asyncfifo0_fifo_in_last = basesoc_cdcusb_asyncfifo0_sink_last;
assign basesoc_cdcusb_asyncfifo0_fifo_in_payload_data = basesoc_cdcusb_asyncfifo0_sink_payload_data;
assign basesoc_cdcusb_asyncfifo0_source_valid = basesoc_cdcusb_asyncfifo0_asyncfifo0_readable;
assign basesoc_cdcusb_asyncfifo0_source_first = basesoc_cdcusb_asyncfifo0_fifo_out_first;
assign basesoc_cdcusb_asyncfifo0_source_last = basesoc_cdcusb_asyncfifo0_fifo_out_last;
assign basesoc_cdcusb_asyncfifo0_source_payload_data = basesoc_cdcusb_asyncfifo0_fifo_out_payload_data;
assign basesoc_cdcusb_asyncfifo0_asyncfifo0_re = basesoc_cdcusb_asyncfifo0_source_ready;
assign basesoc_cdcusb_asyncfifo0_graycounter0_ce = (basesoc_cdcusb_asyncfifo0_asyncfifo0_writable & basesoc_cdcusb_asyncfifo0_asyncfifo0_we);
assign basesoc_cdcusb_asyncfifo0_graycounter1_ce = (basesoc_cdcusb_asyncfifo0_asyncfifo0_readable & basesoc_cdcusb_asyncfifo0_asyncfifo0_re);
assign basesoc_cdcusb_asyncfifo0_asyncfifo0_writable = (((basesoc_cdcusb_asyncfifo0_graycounter0_q[2] == basesoc_cdcusb_asyncfifo0_consume_wdomain[2]) | (basesoc_cdcusb_asyncfifo0_graycounter0_q[1] == basesoc_cdcusb_asyncfifo0_consume_wdomain[1])) | (basesoc_cdcusb_asyncfifo0_graycounter0_q[0] != basesoc_cdcusb_asyncfifo0_consume_wdomain[0]));
assign basesoc_cdcusb_asyncfifo0_asyncfifo0_readable = (basesoc_cdcusb_asyncfifo0_graycounter1_q != basesoc_cdcusb_asyncfifo0_produce_rdomain);
assign basesoc_cdcusb_asyncfifo0_wrport_adr = basesoc_cdcusb_asyncfifo0_graycounter0_q_binary[1:0];
assign basesoc_cdcusb_asyncfifo0_wrport_dat_w = basesoc_cdcusb_asyncfifo0_asyncfifo0_din;
assign basesoc_cdcusb_asyncfifo0_wrport_we = basesoc_cdcusb_asyncfifo0_graycounter0_ce;
assign basesoc_cdcusb_asyncfifo0_rdport_adr = basesoc_cdcusb_asyncfifo0_graycounter1_q_next_binary[1:0];
assign basesoc_cdcusb_asyncfifo0_asyncfifo0_dout = basesoc_cdcusb_asyncfifo0_rdport_dat_r;
always @(*) begin
    basesoc_cdcusb_asyncfifo0_graycounter0_q_next_binary <= 3'd0;
    if (basesoc_cdcusb_asyncfifo0_graycounter0_ce) begin
        basesoc_cdcusb_asyncfifo0_graycounter0_q_next_binary <= (basesoc_cdcusb_asyncfifo0_graycounter0_q_binary + 1'd1);
    end else begin
        basesoc_cdcusb_asyncfifo0_graycounter0_q_next_binary <= basesoc_cdcusb_asyncfifo0_graycounter0_q_binary;
    end
end
assign basesoc_cdcusb_asyncfifo0_graycounter0_q_next = (basesoc_cdcusb_asyncfifo0_graycounter0_q_next_binary ^ basesoc_cdcusb_asyncfifo0_graycounter0_q_next_binary[2:1]);
always @(*) begin
    basesoc_cdcusb_asyncfifo0_graycounter1_q_next_binary <= 3'd0;
    if (basesoc_cdcusb_asyncfifo0_graycounter1_ce) begin
        basesoc_cdcusb_asyncfifo0_graycounter1_q_next_binary <= (basesoc_cdcusb_asyncfifo0_graycounter1_q_binary + 1'd1);
    end else begin
        basesoc_cdcusb_asyncfifo0_graycounter1_q_next_binary <= basesoc_cdcusb_asyncfifo0_graycounter1_q_binary;
    end
end
assign basesoc_cdcusb_asyncfifo0_graycounter1_q_next = (basesoc_cdcusb_asyncfifo0_graycounter1_q_next_binary ^ basesoc_cdcusb_asyncfifo0_graycounter1_q_next_binary[2:1]);
assign basesoc_cdcusb_asyncfifo1_asyncfifo1_din = {basesoc_cdcusb_asyncfifo1_fifo_in_last, basesoc_cdcusb_asyncfifo1_fifo_in_first, basesoc_cdcusb_asyncfifo1_fifo_in_payload_data};
assign {basesoc_cdcusb_asyncfifo1_fifo_out_last, basesoc_cdcusb_asyncfifo1_fifo_out_first, basesoc_cdcusb_asyncfifo1_fifo_out_payload_data} = basesoc_cdcusb_asyncfifo1_asyncfifo1_dout;
assign basesoc_cdcusb_asyncfifo1_sink_ready = basesoc_cdcusb_asyncfifo1_asyncfifo1_writable;
assign basesoc_cdcusb_asyncfifo1_asyncfifo1_we = basesoc_cdcusb_asyncfifo1_sink_valid;
assign basesoc_cdcusb_asyncfifo1_fifo_in_first = basesoc_cdcusb_asyncfifo1_sink_first;
assign basesoc_cdcusb_asyncfifo1_fifo_in_last = basesoc_cdcusb_asyncfifo1_sink_last;
assign basesoc_cdcusb_asyncfifo1_fifo_in_payload_data = basesoc_cdcusb_asyncfifo1_sink_payload_data;
assign basesoc_cdcusb_asyncfifo1_source_valid = basesoc_cdcusb_asyncfifo1_asyncfifo1_readable;
assign basesoc_cdcusb_asyncfifo1_source_first = basesoc_cdcusb_asyncfifo1_fifo_out_first;
assign basesoc_cdcusb_asyncfifo1_source_last = basesoc_cdcusb_asyncfifo1_fifo_out_last;
assign basesoc_cdcusb_asyncfifo1_source_payload_data = basesoc_cdcusb_asyncfifo1_fifo_out_payload_data;
assign basesoc_cdcusb_asyncfifo1_asyncfifo1_re = basesoc_cdcusb_asyncfifo1_source_ready;
assign basesoc_cdcusb_asyncfifo1_graycounter2_ce = (basesoc_cdcusb_asyncfifo1_asyncfifo1_writable & basesoc_cdcusb_asyncfifo1_asyncfifo1_we);
assign basesoc_cdcusb_asyncfifo1_graycounter3_ce = (basesoc_cdcusb_asyncfifo1_asyncfifo1_readable & basesoc_cdcusb_asyncfifo1_asyncfifo1_re);
assign basesoc_cdcusb_asyncfifo1_asyncfifo1_writable = (((basesoc_cdcusb_asyncfifo1_graycounter2_q[2] == basesoc_cdcusb_asyncfifo1_consume_wdomain[2]) | (basesoc_cdcusb_asyncfifo1_graycounter2_q[1] == basesoc_cdcusb_asyncfifo1_consume_wdomain[1])) | (basesoc_cdcusb_asyncfifo1_graycounter2_q[0] != basesoc_cdcusb_asyncfifo1_consume_wdomain[0]));
assign basesoc_cdcusb_asyncfifo1_asyncfifo1_readable = (basesoc_cdcusb_asyncfifo1_graycounter3_q != basesoc_cdcusb_asyncfifo1_produce_rdomain);
assign basesoc_cdcusb_asyncfifo1_wrport_adr = basesoc_cdcusb_asyncfifo1_graycounter2_q_binary[1:0];
assign basesoc_cdcusb_asyncfifo1_wrport_dat_w = basesoc_cdcusb_asyncfifo1_asyncfifo1_din;
assign basesoc_cdcusb_asyncfifo1_wrport_we = basesoc_cdcusb_asyncfifo1_graycounter2_ce;
assign basesoc_cdcusb_asyncfifo1_rdport_adr = basesoc_cdcusb_asyncfifo1_graycounter3_q_next_binary[1:0];
assign basesoc_cdcusb_asyncfifo1_asyncfifo1_dout = basesoc_cdcusb_asyncfifo1_rdport_dat_r;
always @(*) begin
    basesoc_cdcusb_asyncfifo1_graycounter2_q_next_binary <= 3'd0;
    if (basesoc_cdcusb_asyncfifo1_graycounter2_ce) begin
        basesoc_cdcusb_asyncfifo1_graycounter2_q_next_binary <= (basesoc_cdcusb_asyncfifo1_graycounter2_q_binary + 1'd1);
    end else begin
        basesoc_cdcusb_asyncfifo1_graycounter2_q_next_binary <= basesoc_cdcusb_asyncfifo1_graycounter2_q_binary;
    end
end
assign basesoc_cdcusb_asyncfifo1_graycounter2_q_next = (basesoc_cdcusb_asyncfifo1_graycounter2_q_next_binary ^ basesoc_cdcusb_asyncfifo1_graycounter2_q_next_binary[2:1]);
always @(*) begin
    basesoc_cdcusb_asyncfifo1_graycounter3_q_next_binary <= 3'd0;
    if (basesoc_cdcusb_asyncfifo1_graycounter3_ce) begin
        basesoc_cdcusb_asyncfifo1_graycounter3_q_next_binary <= (basesoc_cdcusb_asyncfifo1_graycounter3_q_binary + 1'd1);
    end else begin
        basesoc_cdcusb_asyncfifo1_graycounter3_q_next_binary <= basesoc_cdcusb_asyncfifo1_graycounter3_q_binary;
    end
end
assign basesoc_cdcusb_asyncfifo1_graycounter3_q_next = (basesoc_cdcusb_asyncfifo1_graycounter3_q_next_binary ^ basesoc_cdcusb_asyncfifo1_graycounter3_q_next_binary[2:1]);
assign basesoc_timer_zero_trigger = (basesoc_timer_value == 1'd0);
assign basesoc_timer_zero0 = basesoc_timer_zero_status;
assign basesoc_timer_zero1 = basesoc_timer_zero_pending;
always @(*) begin
    basesoc_timer_zero_clear <= 1'd0;
    if ((basesoc_timer_pending_re & basesoc_timer_pending_r)) begin
        basesoc_timer_zero_clear <= 1'd1;
    end
end
assign basesoc_timer_irq = (basesoc_timer_pending_status & basesoc_timer_enable_storage);
assign basesoc_timer_zero_status = basesoc_timer_zero_trigger;
assign datain0 = bus_dat_w[15:0];
always @(*) begin
    maskwren0 <= 4'd0;
    maskwren0[0] <= bus_sel[0];
    maskwren0[1] <= bus_sel[0];
    maskwren0[2] <= bus_sel[1];
    maskwren0[3] <= bus_sel[1];
end
assign datain1 = bus_dat_w[31:16];
always @(*) begin
    maskwren1 <= 4'd0;
    maskwren1[0] <= bus_sel[2];
    maskwren1[1] <= bus_sel[2];
    maskwren1[2] <= bus_sel[3];
    maskwren1[3] <= bus_sel[3];
end
assign datain2 = bus_dat_w[15:0];
always @(*) begin
    maskwren2 <= 4'd0;
    maskwren2[0] <= bus_sel[0];
    maskwren2[1] <= bus_sel[0];
    maskwren2[2] <= bus_sel[1];
    maskwren2[3] <= bus_sel[1];
end
assign datain3 = bus_dat_w[31:16];
always @(*) begin
    bus_dat_r <= 32'd0;
    wren0 <= 1'd0;
    wren1 <= 1'd0;
    wren2 <= 1'd0;
    wren3 <= 1'd0;
    if ((bus_adr[15:14] == 1'd0)) begin
        wren0 <= ((bus_we & bus_stb) & bus_cyc);
        bus_dat_r[15:0] <= dataout0;
    end
    if ((bus_adr[15:14] == 1'd0)) begin
        wren1 <= ((bus_we & bus_stb) & bus_cyc);
        bus_dat_r[31:16] <= dataout1;
    end
    if ((bus_adr[15:14] == 1'd1)) begin
        wren2 <= ((bus_we & bus_stb) & bus_cyc);
        bus_dat_r[15:0] <= dataout2;
    end
    if ((bus_adr[15:14] == 1'd1)) begin
        wren3 <= ((bus_we & bus_stb) & bus_cyc);
        bus_dat_r[31:16] <= dataout3;
    end
end
always @(*) begin
    maskwren3 <= 4'd0;
    maskwren3[0] <= bus_sel[2];
    maskwren3[1] <= bus_sel[2];
    maskwren3[2] <= bus_sel[3];
    maskwren3[3] <= bus_sel[3];
end
assign spiflash_phy_cs = spiflash_cs;
assign spiflash_litespimmap_sink_valid = spiflash_user_port_source_valid;
assign spiflash_user_port_source_ready = spiflash_litespimmap_sink_ready;
assign spiflash_litespimmap_sink_first = spiflash_user_port_source_first;
assign spiflash_litespimmap_sink_last = spiflash_user_port_source_last;
assign spiflash_litespimmap_sink_payload_data = spiflash_user_port_source_payload_data;
assign spiflash_user_port_sink_valid = spiflash_litespimmap_source_valid;
assign spiflash_litespimmap_source_ready = spiflash_user_port_sink_ready;
assign spiflash_user_port_sink_first = spiflash_litespimmap_source_first;
assign spiflash_user_port_sink_last = spiflash_litespimmap_source_last;
assign spiflash_user_port_sink_payload_data = spiflash_litespimmap_source_payload_data;
assign spiflash_user_port_sink_payload_len = spiflash_litespimmap_source_payload_len;
assign spiflash_user_port_sink_payload_width = spiflash_litespimmap_source_payload_width;
assign spiflash_user_port_sink_payload_mask = spiflash_litespimmap_source_payload_mask;
assign spiflash_phy_sink_valid = spiflash_source_valid;
assign spiflash_source_ready = spiflash_phy_sink_ready;
assign spiflash_phy_sink_first = spiflash_source_first;
assign spiflash_phy_sink_last = spiflash_source_last;
assign spiflash_phy_sink_payload_data = spiflash_source_payload_data;
assign spiflash_phy_sink_payload_len = spiflash_source_payload_len;
assign spiflash_phy_sink_payload_width = spiflash_source_payload_width;
assign spiflash_phy_sink_payload_mask = spiflash_source_payload_mask;
assign spiflash_sink_valid = spiflash_phy_source_valid;
assign spiflash_phy_source_ready = spiflash_sink_ready;
assign spiflash_sink_first = spiflash_phy_source_first;
assign spiflash_sink_last = spiflash_phy_source_last;
assign spiflash_sink_payload_data = spiflash_phy_source_payload_data;
assign spiflash_internal_port_sink_valid = spiflash_user_port_sink_valid;
assign spiflash_user_port_sink_ready = spiflash_internal_port_sink_ready;
assign spiflash_internal_port_sink_first = spiflash_user_port_sink_first;
assign spiflash_internal_port_sink_last = spiflash_user_port_sink_last;
assign spiflash_internal_port_sink_payload_data = spiflash_user_port_sink_payload_data;
assign spiflash_internal_port_sink_payload_len = spiflash_user_port_sink_payload_len;
assign spiflash_internal_port_sink_payload_width = spiflash_user_port_sink_payload_width;
assign spiflash_internal_port_sink_payload_mask = spiflash_user_port_sink_payload_mask;
assign spiflash_user_port_source_valid = spiflash_internal_port_source_valid;
assign spiflash_internal_port_source_ready = spiflash_user_port_source_ready;
assign spiflash_user_port_source_first = spiflash_internal_port_source_first;
assign spiflash_user_port_source_last = spiflash_internal_port_source_last;
assign spiflash_user_port_source_payload_data = spiflash_internal_port_source_payload_data;
assign tx_mux_sink_valid = spiflash_internal_port_sink_valid;
assign spiflash_internal_port_sink_ready = tx_mux_sink_ready;
assign tx_mux_sink_first = spiflash_internal_port_sink_first;
assign tx_mux_sink_last = spiflash_internal_port_sink_last;
assign tx_mux_sink_payload_data = spiflash_internal_port_sink_payload_data;
assign tx_mux_sink_payload_len = spiflash_internal_port_sink_payload_len;
assign tx_mux_sink_payload_width = spiflash_internal_port_sink_payload_width;
assign tx_mux_sink_payload_mask = spiflash_internal_port_sink_payload_mask;
assign spiflash_internal_port_source_valid = rx_demux_source_valid;
assign rx_demux_source_ready = spiflash_internal_port_source_ready;
assign spiflash_internal_port_source_first = rx_demux_source_first;
assign spiflash_internal_port_source_last = rx_demux_source_last;
assign spiflash_internal_port_source_payload_data = rx_demux_source_payload_data;
assign request = {spiflash_litespimmap_request};
assign spiflash_source_valid = tx_mux_source_valid;
assign tx_mux_source_ready = spiflash_source_ready;
assign spiflash_source_first = tx_mux_source_first;
assign spiflash_source_last = tx_mux_source_last;
assign spiflash_source_payload_data = tx_mux_source_payload_data;
assign spiflash_source_payload_len = tx_mux_source_payload_len;
assign spiflash_source_payload_width = tx_mux_source_payload_width;
assign spiflash_source_payload_mask = tx_mux_source_payload_mask;
assign tx_mux_sel = grant;
assign rx_demux_sink_valid = spiflash_sink_valid;
assign spiflash_sink_ready = rx_demux_sink_ready;
assign rx_demux_sink_first = spiflash_sink_first;
assign rx_demux_sink_last = spiflash_sink_last;
assign rx_demux_sink_payload_data = spiflash_sink_payload_data;
assign rx_demux_sel = grant;
always @(*) begin
    spiflash_cs <= 1'd0;
    case (grant)
        1'd0: begin
            spiflash_cs <= spiflash_litespimmap_cs;
        end
    endcase
end
assign grant = 1'd0;
always @(*) begin
    tx_mux_sink_ready <= 1'd0;
    tx_mux_source_first <= 1'd0;
    tx_mux_source_last <= 1'd0;
    tx_mux_source_payload_data <= 32'd0;
    tx_mux_source_payload_len <= 6'd0;
    tx_mux_source_payload_mask <= 8'd0;
    tx_mux_source_payload_width <= 4'd0;
    tx_mux_source_valid <= 1'd0;
    case (tx_mux_sel)
        1'd0: begin
            tx_mux_source_valid <= tx_mux_sink_valid;
            tx_mux_sink_ready <= tx_mux_source_ready;
            tx_mux_source_first <= tx_mux_sink_first;
            tx_mux_source_last <= tx_mux_sink_last;
            tx_mux_source_payload_data <= tx_mux_sink_payload_data;
            tx_mux_source_payload_len <= tx_mux_sink_payload_len;
            tx_mux_source_payload_width <= tx_mux_sink_payload_width;
            tx_mux_source_payload_mask <= tx_mux_sink_payload_mask;
        end
    endcase
end
always @(*) begin
    rx_demux_sink_ready <= 1'd0;
    rx_demux_source_first <= 1'd0;
    rx_demux_source_last <= 1'd0;
    rx_demux_source_payload_data <= 32'd0;
    rx_demux_source_valid <= 1'd0;
    case (rx_demux_sel)
        1'd0: begin
            rx_demux_source_valid <= rx_demux_sink_valid;
            rx_demux_sink_ready <= rx_demux_source_ready;
            rx_demux_source_first <= rx_demux_sink_first;
            rx_demux_source_last <= rx_demux_sink_last;
            rx_demux_source_payload_data <= rx_demux_sink_payload_data;
        end
    endcase
end
assign spiflash_litespimmap_spi_dummy_bits = spiflash_litespimmap_storage;
assign spiflash_litespimmap_write_enabled = 1'd0;
always @(*) begin
    spiflash_litespimmap_cs <= 1'd0;
    if (spiflash_litespimmap_request) begin
        spiflash_litespimmap_cs <= 1'd1;
    end
end
assign spiflash_litespimmap_done = (spiflash_litespimmap_count == 1'd0);
always @(*) begin
    litespimmap_next_state <= 4'd0;
    spiflash_litespimmap_burst_adr_litespimmap_f_next_value <= 30'd0;
    spiflash_litespimmap_burst_adr_litespimmap_f_next_value_ce <= 1'd0;
    spiflash_litespimmap_burst_cs_litespimmap_next_value <= 1'd0;
    spiflash_litespimmap_burst_cs_litespimmap_next_value_ce <= 1'd0;
    spiflash_litespimmap_bus_ack <= 1'd0;
    spiflash_litespimmap_bus_dat_r <= 32'd0;
    spiflash_litespimmap_byte_count_litespimmap_t_next_value <= 2'd0;
    spiflash_litespimmap_byte_count_litespimmap_t_next_value_ce <= 1'd0;
    spiflash_litespimmap_data_write_litespimmap_t_f_next_value1 <= 32'd0;
    spiflash_litespimmap_data_write_litespimmap_t_f_next_value_ce1 <= 1'd0;
    spiflash_litespimmap_request <= 1'd0;
    spiflash_litespimmap_sink_ready <= 1'd0;
    spiflash_litespimmap_source_payload_data <= 32'd0;
    spiflash_litespimmap_source_payload_len <= 6'd0;
    spiflash_litespimmap_source_payload_mask <= 8'd0;
    spiflash_litespimmap_source_payload_width <= 4'd0;
    spiflash_litespimmap_source_valid <= 1'd0;
    spiflash_litespimmap_wait <= 1'd0;
    spiflash_litespimmap_write_litespimmap_t_t_next_value <= 1'd0;
    spiflash_litespimmap_write_litespimmap_t_t_next_value_ce <= 1'd0;
    spiflash_litespimmap_write_mask_litespimmap_t_f_next_value0 <= 4'd0;
    spiflash_litespimmap_write_mask_litespimmap_t_f_next_value_ce0 <= 1'd0;
    litespimmap_next_state <= litespimmap_state;
    case (litespimmap_state)
        1'd1: begin
            spiflash_litespimmap_request <= 1'd0;
            if (spiflash_litespimmap_write_mask[0]) begin
                litespimmap_next_state <= 2'd2;
                spiflash_litespimmap_write_litespimmap_t_t_next_value <= 1'd1;
                spiflash_litespimmap_write_litespimmap_t_t_next_value_ce <= 1'd1;
            end else begin
                if ((spiflash_litespimmap_byte_count == 2'd3)) begin
                    spiflash_litespimmap_bus_ack <= 1'd1;
                    spiflash_litespimmap_burst_adr_litespimmap_f_next_value <= (spiflash_litespimmap_burst_adr + 1'd1);
                    spiflash_litespimmap_burst_adr_litespimmap_f_next_value_ce <= 1'd1;
                    litespimmap_next_state <= 1'd0;
                    spiflash_litespimmap_write_litespimmap_t_t_next_value <= 1'd0;
                    spiflash_litespimmap_write_litespimmap_t_t_next_value_ce <= 1'd1;
                end else begin
                    spiflash_litespimmap_byte_count_litespimmap_t_next_value <= (spiflash_litespimmap_byte_count + 1'd1);
                    spiflash_litespimmap_byte_count_litespimmap_t_next_value_ce <= 1'd1;
                    spiflash_litespimmap_write_mask_litespimmap_t_f_next_value0 <= {spiflash_litespimmap0, spiflash_litespimmap_write_mask[3:1]};
                    spiflash_litespimmap_write_mask_litespimmap_t_f_next_value_ce0 <= 1'd1;
                end
            end
        end
        2'd2: begin
            spiflash_litespimmap_request <= 1'd1;
            spiflash_litespimmap_source_valid <= 1'd1;
            if ((spiflash_litespimmap_write_enabled & spiflash_litespimmap_write)) begin
                spiflash_litespimmap_source_payload_data <= 2'd2;
            end else begin
                spiflash_litespimmap_source_payload_data <= 7'd107;
            end
            spiflash_litespimmap_source_payload_len <= 4'd8;
            spiflash_litespimmap_source_payload_width <= 1'd1;
            spiflash_litespimmap_source_payload_mask <= 1'd1;
            spiflash_litespimmap_burst_adr_litespimmap_f_next_value <= spiflash_litespimmap_bus_adr;
            spiflash_litespimmap_burst_adr_litespimmap_f_next_value_ce <= 1'd1;
            if (spiflash_litespimmap_source_ready) begin
                litespimmap_next_state <= 2'd3;
            end
        end
        2'd3: begin
            spiflash_litespimmap_request <= 1'd1;
            spiflash_litespimmap_sink_ready <= 1'd1;
            if (spiflash_litespimmap_sink_valid) begin
                litespimmap_next_state <= 3'd4;
            end
        end
        3'd4: begin
            spiflash_litespimmap_request <= 1'd1;
            spiflash_litespimmap_source_valid <= 1'd1;
            spiflash_litespimmap_source_payload_width <= 1'd1;
            spiflash_litespimmap_source_payload_mask <= 1'd1;
            spiflash_litespimmap_source_payload_data <= {spiflash_litespimmap_bus_adr, spiflash_litespimmap_byte_count};
            spiflash_litespimmap_source_payload_len <= 5'd24;
            spiflash_litespimmap_burst_cs_litespimmap_next_value <= 1'd1;
            spiflash_litespimmap_burst_cs_litespimmap_next_value_ce <= 1'd1;
            spiflash_litespimmap_burst_adr_litespimmap_f_next_value <= spiflash_litespimmap_bus_adr;
            spiflash_litespimmap_burst_adr_litespimmap_f_next_value_ce <= 1'd1;
            if (spiflash_litespimmap_source_ready) begin
                litespimmap_next_state <= 3'd5;
            end
        end
        3'd5: begin
            spiflash_litespimmap_request <= 1'd1;
            spiflash_litespimmap_sink_ready <= 1'd1;
            if (spiflash_litespimmap_sink_valid) begin
                if ((spiflash_litespimmap_write_enabled & spiflash_litespimmap_write)) begin
                    litespimmap_next_state <= 4'd10;
                end else begin
                    if ((spiflash_litespimmap_spi_dummy_bits == 1'd0)) begin
                        litespimmap_next_state <= 4'd8;
                    end else begin
                        litespimmap_next_state <= 3'd6;
                    end
                end
            end
        end
        3'd6: begin
            spiflash_litespimmap_request <= 1'd1;
            spiflash_litespimmap_source_valid <= 1'd1;
            spiflash_litespimmap_source_payload_width <= 1'd1;
            spiflash_litespimmap_source_payload_mask <= 1'd0;
            spiflash_litespimmap_source_payload_data <= spiflash_litespimmap_dummy;
            spiflash_litespimmap_source_payload_len <= spiflash_litespimmap_spi_dummy_bits;
            if (spiflash_litespimmap_source_ready) begin
                litespimmap_next_state <= 3'd7;
            end
        end
        3'd7: begin
            spiflash_litespimmap_request <= 1'd1;
            spiflash_litespimmap_sink_ready <= 1'd1;
            if (spiflash_litespimmap_sink_valid) begin
                litespimmap_next_state <= 4'd8;
            end
        end
        4'd8: begin
            spiflash_litespimmap_request <= 1'd1;
            spiflash_litespimmap_source_valid <= 1'd1;
            spiflash_litespimmap_source_payload_width <= 3'd4;
            spiflash_litespimmap_source_payload_len <= 6'd32;
            spiflash_litespimmap_source_payload_mask <= 1'd0;
            if (spiflash_litespimmap_source_ready) begin
                litespimmap_next_state <= 4'd9;
            end
        end
        4'd9: begin
            spiflash_litespimmap_request <= 1'd1;
            spiflash_litespimmap_sink_ready <= 1'd1;
            spiflash_litespimmap_bus_dat_r <= {spiflash_litespimmap_sink_payload_data[7:0], spiflash_litespimmap_sink_payload_data[15:8], spiflash_litespimmap_sink_payload_data[23:16], spiflash_litespimmap_sink_payload_data[31:24]};
            if (spiflash_litespimmap_sink_valid) begin
                spiflash_litespimmap_bus_ack <= 1'd1;
                spiflash_litespimmap_burst_adr_litespimmap_f_next_value <= (spiflash_litespimmap_burst_adr + 1'd1);
                spiflash_litespimmap_burst_adr_litespimmap_f_next_value_ce <= 1'd1;
                litespimmap_next_state <= 1'd0;
            end
        end
        4'd10: begin
            spiflash_litespimmap_request <= 1'd1;
            spiflash_litespimmap_source_valid <= 1'd1;
            spiflash_litespimmap_source_payload_width <= 1'd1;
            spiflash_litespimmap_source_payload_mask <= 4'd15;
            spiflash_litespimmap_source_payload_data <= spiflash_litespimmap_data_write;
            spiflash_litespimmap_source_payload_len <= 4'd8;
            if (spiflash_litespimmap_source_ready) begin
                litespimmap_next_state <= 4'd11;
            end
        end
        4'd11: begin
            spiflash_litespimmap_request <= 1'd1;
            spiflash_litespimmap_sink_ready <= 1'd1;
            if (spiflash_litespimmap_sink_valid) begin
                if ((spiflash_litespimmap_byte_count != 2'd3)) begin
                    spiflash_litespimmap_write_mask_litespimmap_t_f_next_value0 <= {spiflash_litespimmap1, spiflash_litespimmap_write_mask[3:1]};
                    spiflash_litespimmap_write_mask_litespimmap_t_f_next_value_ce0 <= 1'd1;
                    spiflash_litespimmap_byte_count_litespimmap_t_next_value <= (spiflash_litespimmap_byte_count + 1'd1);
                    spiflash_litespimmap_byte_count_litespimmap_t_next_value_ce <= 1'd1;
                    spiflash_litespimmap_data_write_litespimmap_t_f_next_value1 <= (spiflash_litespimmap_data_write >>> 4'd8);
                    spiflash_litespimmap_data_write_litespimmap_t_f_next_value_ce1 <= 1'd1;
                    if (spiflash_litespimmap_write_mask[1]) begin
                        litespimmap_next_state <= 4'd10;
                    end else begin
                        spiflash_litespimmap_request <= 1'd0;
                        spiflash_litespimmap_write_litespimmap_t_t_next_value <= 1'd0;
                        spiflash_litespimmap_write_litespimmap_t_t_next_value_ce <= 1'd1;
                        litespimmap_next_state <= 1'd1;
                    end
                end else begin
                    spiflash_litespimmap_bus_ack <= 1'd1;
                    spiflash_litespimmap_burst_adr_litespimmap_f_next_value <= (spiflash_litespimmap_burst_adr + 1'd1);
                    spiflash_litespimmap_burst_adr_litespimmap_f_next_value_ce <= 1'd1;
                    litespimmap_next_state <= 1'd0;
                end
            end
        end
        default: begin
            spiflash_litespimmap_wait <= 1'd1;
            spiflash_litespimmap_burst_cs_litespimmap_next_value <= (spiflash_litespimmap_burst_cs & (~spiflash_litespimmap_done));
            spiflash_litespimmap_burst_cs_litespimmap_next_value_ce <= 1'd1;
            spiflash_litespimmap_request <= spiflash_litespimmap_burst_cs;
            if ((spiflash_litespimmap_bus_cyc & spiflash_litespimmap_bus_stb)) begin
                spiflash_litespimmap_byte_count_litespimmap_t_next_value <= 1'd0;
                spiflash_litespimmap_byte_count_litespimmap_t_next_value_ce <= 1'd1;
                if ((~spiflash_litespimmap_bus_we)) begin
                    if (((spiflash_litespimmap_burst_cs & (spiflash_litespimmap_bus_adr == spiflash_litespimmap_burst_adr)) & ((~spiflash_litespimmap_write_enabled) | (~spiflash_litespimmap_write)))) begin
                        litespimmap_next_state <= 4'd8;
                    end else begin
                        spiflash_litespimmap_request <= 1'd0;
                        litespimmap_next_state <= 2'd2;
                    end
                    spiflash_litespimmap_write_litespimmap_t_t_next_value <= 1'd0;
                    spiflash_litespimmap_write_litespimmap_t_t_next_value_ce <= 1'd1;
                end else begin
                    if (spiflash_litespimmap_write_enabled) begin
                        spiflash_litespimmap_write_mask_litespimmap_t_f_next_value0 <= spiflash_litespimmap_bus_sel;
                        spiflash_litespimmap_write_mask_litespimmap_t_f_next_value_ce0 <= 1'd1;
                        spiflash_litespimmap_data_write_litespimmap_t_f_next_value1 <= spiflash_litespimmap_bus_dat_w;
                        spiflash_litespimmap_data_write_litespimmap_t_f_next_value_ce1 <= 1'd1;
                        if ((((spiflash_litespimmap_burst_cs & (spiflash_litespimmap_bus_adr == spiflash_litespimmap_burst_adr)) & spiflash_litespimmap_bus_sel[0]) & spiflash_litespimmap_write)) begin
                            litespimmap_next_state <= 4'd10;
                        end else begin
                            spiflash_litespimmap_request <= 1'd0;
                            litespimmap_next_state <= 1'd1;
                        end
                        spiflash_litespimmap_write_litespimmap_t_t_next_value <= 1'd1;
                        spiflash_litespimmap_write_litespimmap_t_t_next_value_ce <= 1'd1;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    spiflash_phy_dq_o <= 4'd0;
    case (spiflash_phy_sink_payload_width)
        1'd1: begin
            spiflash_phy_dq_o <= spiflash_phy_sr_out[31];
        end
        2'd2: begin
            spiflash_phy_dq_o <= spiflash_phy_sr_out[31:30];
        end
        3'd4: begin
            spiflash_phy_dq_o <= spiflash_phy_sr_out[31:28];
        end
        4'd8: begin
            spiflash_phy_dq_o <= spiflash_phy_sr_out[31:24];
        end
    endcase
end
assign spiflash_phy_source_payload_data = spiflash_phy_sr_in;
assign spiflash_phy_spi_clk_divisor = spiflash_phy_storage;
assign spiflash_phy_posedge = ((spiflash_phy_en & (~spiflash_phy_clk)) & (spiflash_phy_cnt == spiflash_phy_div));
assign spiflash_phy_negedge = ((spiflash_phy_en & spiflash_phy_clk) & (spiflash_phy_cnt == spiflash_phy_div));
assign spiflash_phy_wait = (spiflash_phy_cs != 1'd0);
assign spiflash_phy_enable = spiflash_phy_done;
assign spiflash_phy_cs_n = (~({1{spiflash_phy_enable}} & spiflash_phy_cs));
assign spiflash_phy_done = (spiflash_phy_count == 1'd0);
always @(*) begin
    litespiphy_next_state <= 2'd0;
    spiflash_phy_dq_oe_litespiphy_next_value1 <= 4'd0;
    spiflash_phy_dq_oe_litespiphy_next_value_ce1 <= 1'd0;
    spiflash_phy_en <= 1'd0;
    spiflash_phy_sink_ready <= 1'd0;
    spiflash_phy_source_valid <= 1'd0;
    spiflash_phy_sr_cnt_litespiphy_next_value0 <= 8'd0;
    spiflash_phy_sr_cnt_litespiphy_next_value_ce0 <= 1'd0;
    spiflash_phy_sr_in_shift <= 1'd0;
    spiflash_phy_sr_out_load <= 1'd0;
    spiflash_phy_sr_out_shift <= 1'd0;
    litespiphy_next_state <= litespiphy_state;
    case (litespiphy_state)
        1'd1: begin
            spiflash_phy_en <= 1'd1;
            if (spiflash_phy_posedge_reg2) begin
                spiflash_phy_sr_in_shift <= 1'd1;
            end
            if (spiflash_phy_negedge) begin
                spiflash_phy_sr_out_shift <= 1'd1;
            end
            if (spiflash_phy_negedge) begin
                spiflash_phy_sr_cnt_litespiphy_next_value0 <= (spiflash_phy_sr_cnt - spiflash_phy_sink_payload_width);
                spiflash_phy_sr_cnt_litespiphy_next_value_ce0 <= 1'd1;
                if ((spiflash_phy_sr_cnt == 1'd0)) begin
                    litespiphy_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            if (((spiflash_phy_spi_clk_divisor > 1'd0) | spiflash_phy_posedge_reg2)) begin
                spiflash_phy_sink_ready <= 1'd1;
                spiflash_phy_sr_in_shift <= (spiflash_phy_spi_clk_divisor == 1'd0);
                litespiphy_next_state <= 2'd3;
            end
        end
        2'd3: begin
            spiflash_phy_source_valid <= 1'd1;
            spiflash_phy_dq_oe_litespiphy_next_value1 <= 1'd0;
            spiflash_phy_dq_oe_litespiphy_next_value_ce1 <= 1'd1;
            if (spiflash_phy_source_ready) begin
                litespiphy_next_state <= 1'd0;
            end
        end
        default: begin
            if ((spiflash_phy_enable & spiflash_phy_sink_valid)) begin
                spiflash_phy_sr_cnt_litespiphy_next_value0 <= (spiflash_phy_sink_payload_len - spiflash_phy_sink_payload_width);
                spiflash_phy_sr_cnt_litespiphy_next_value_ce0 <= 1'd1;
                spiflash_phy_dq_oe_litespiphy_next_value1 <= spiflash_phy_sink_payload_mask;
                spiflash_phy_dq_oe_litespiphy_next_value_ce1 <= 1'd1;
                spiflash_phy_sr_out_load <= 1'd1;
                litespiphy_next_state <= 1'd1;
            end
        end
    endcase
end
assign wait_1 = (~done);
always @(*) begin
    leds <= 1'd0;
    if ((mode == 1'd1)) begin
        leds <= storage;
    end else begin
        leds <= chaser;
    end
end
assign {user_led_n0} = (leds ^ 1'd0);
assign done = (count == 1'd0);
always @(*) begin
    interface0_ack <= 1'd0;
    interface0_dat_r <= 32'd0;
    interface1_adr <= 14'd0;
    interface1_dat_w <= 32'd0;
    interface1_re <= 1'd0;
    interface1_we <= 1'd0;
    next_state <= 1'd0;
    next_state <= state;
    case (state)
        1'd1: begin
            interface0_ack <= 1'd1;
            interface0_dat_r <= interface1_dat_r;
            next_state <= 1'd0;
        end
        default: begin
            interface1_dat_w <= interface0_dat_w;
            if ((interface0_cyc & interface0_stb)) begin
                interface1_adr <= interface0_adr;
                interface1_re <= ((~interface0_we) & (interface0_sel != 1'd0));
                interface1_we <= (interface0_we & (interface0_sel != 1'd0));
                next_state <= 1'd1;
            end
        end
    endcase
end
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign csr_bankarray_csrbank0_reset0_r = csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank0_reset0_re <= 1'd0;
    csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank0_reset0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_reset0_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
assign csr_bankarray_csrbank0_scratch0_r = csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank0_scratch0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_scratch0_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
assign csr_bankarray_csrbank0_bus_errors_r = csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank0_bus_errors_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_bus_errors_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    basesoc_soc_rst <= 1'd0;
    if (basesoc_reset_re) begin
        basesoc_soc_rst <= basesoc_reset_storage[0];
    end
end
assign basesoc_cpu_rst = basesoc_reset_storage[1];
assign csr_bankarray_csrbank0_reset0_w = basesoc_reset_storage;
assign csr_bankarray_csrbank0_scratch0_w = basesoc_scratch_storage;
assign csr_bankarray_csrbank0_bus_errors_w = basesoc_bus_errors_status;
assign basesoc_bus_errors_we = csr_bankarray_csrbank0_bus_errors_we;
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
    csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (csr_bankarray_sel_r) begin
        csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
    end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[5:0];
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign csr_bankarray_csrbank1_out0_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_out0_re <= 1'd0;
    csr_bankarray_csrbank1_out0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank1_out0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_out0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_out0_w = storage;
assign csr_bankarray_csrbank2_sel = (csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign csr_bankarray_csrbank2_phy_clk_divisor0_r = csr_bankarray_interface2_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank2_phy_clk_divisor0_re <= 1'd0;
    csr_bankarray_csrbank2_phy_clk_divisor0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank2_phy_clk_divisor0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_phy_clk_divisor0_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_mmap_dummy_bits0_r = csr_bankarray_interface2_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank2_mmap_dummy_bits0_re <= 1'd0;
    csr_bankarray_csrbank2_mmap_dummy_bits0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank2_mmap_dummy_bits0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_mmap_dummy_bits0_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_phy_clk_divisor0_w = spiflash_phy_storage;
assign csr_bankarray_csrbank2_mmap_dummy_bits0_w = spiflash_litespimmap_storage;
assign csr_bankarray_csrbank3_sel = (csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign csr_bankarray_csrbank3_load0_r = csr_bankarray_interface3_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank3_load0_re <= 1'd0;
    csr_bankarray_csrbank3_load0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank3_load0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_load0_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_reload0_r = csr_bankarray_interface3_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank3_reload0_re <= 1'd0;
    csr_bankarray_csrbank3_reload0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank3_reload0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_reload0_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_en0_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_en0_re <= 1'd0;
    csr_bankarray_csrbank3_en0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank3_en0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_en0_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_update_value0_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_update_value0_re <= 1'd0;
    csr_bankarray_csrbank3_update_value0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank3_update_value0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_update_value0_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_value_r = csr_bankarray_interface3_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank3_value_re <= 1'd0;
    csr_bankarray_csrbank3_value_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank3_value_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_value_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_ev_status_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_ev_status_re <= 1'd0;
    csr_bankarray_csrbank3_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank3_ev_status_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_status_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_ev_pending_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank3_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank3_ev_pending_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_pending_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_ev_enable0_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank3_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank3_ev_enable0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_enable0_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_load0_w = basesoc_timer_load_storage;
assign csr_bankarray_csrbank3_reload0_w = basesoc_timer_reload_storage;
assign csr_bankarray_csrbank3_en0_w = basesoc_timer_en_storage;
assign csr_bankarray_csrbank3_update_value0_w = basesoc_timer_update_value_storage;
assign csr_bankarray_csrbank3_value_w = basesoc_timer_value_status;
assign basesoc_timer_value_we = csr_bankarray_csrbank3_value_we;
assign basesoc_timer_status_status = basesoc_timer_zero0;
assign csr_bankarray_csrbank3_ev_status_w = basesoc_timer_status_status;
assign basesoc_timer_status_we = csr_bankarray_csrbank3_ev_status_we;
assign basesoc_timer_pending_status = basesoc_timer_zero1;
assign csr_bankarray_csrbank3_ev_pending_w = basesoc_timer_pending_status;
assign basesoc_timer_pending_we = csr_bankarray_csrbank3_ev_pending_we;
assign basesoc_timer_zero2 = basesoc_timer_enable_storage;
assign csr_bankarray_csrbank3_ev_enable0_w = basesoc_timer_enable_storage;
assign csr_bankarray_csrbank4_sel = (csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign basesoc_cdcusb_rxtx_r = csr_bankarray_interface4_bank_bus_dat_w[7:0];
always @(*) begin
    basesoc_cdcusb_rxtx_re <= 1'd0;
    basesoc_cdcusb_rxtx_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        basesoc_cdcusb_rxtx_re <= csr_bankarray_interface4_bank_bus_we;
        basesoc_cdcusb_rxtx_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_txfull_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_txfull_re <= 1'd0;
    csr_bankarray_csrbank4_txfull_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank4_txfull_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_txfull_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_rxempty_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_rxempty_re <= 1'd0;
    csr_bankarray_csrbank4_rxempty_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank4_rxempty_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_rxempty_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_ev_status_r = csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank4_ev_status_re <= 1'd0;
    csr_bankarray_csrbank4_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank4_ev_status_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_ev_status_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_ev_pending_r = csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank4_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank4_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank4_ev_pending_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_ev_pending_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_ev_enable0_r = csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank4_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank4_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank4_ev_enable0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_ev_enable0_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_tuning_word0_r = csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank4_tuning_word0_re <= 1'd0;
    csr_bankarray_csrbank4_tuning_word0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank4_tuning_word0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_tuning_word0_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign basesoc_cdcusb_configured_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    basesoc_cdcusb_configured_re <= 1'd0;
    basesoc_cdcusb_configured_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        basesoc_cdcusb_configured_re <= csr_bankarray_interface4_bank_bus_we;
        basesoc_cdcusb_configured_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_txfull_w = basesoc_cdcusb_txfull_status;
assign basesoc_cdcusb_txfull_we = csr_bankarray_csrbank4_txfull_we;
assign csr_bankarray_csrbank4_rxempty_w = basesoc_cdcusb_rxempty_status;
assign basesoc_cdcusb_rxempty_we = csr_bankarray_csrbank4_rxempty_we;
always @(*) begin
    basesoc_cdcusb_status_status <= 2'd0;
    basesoc_cdcusb_status_status[0] <= basesoc_cdcusb_tx0;
    basesoc_cdcusb_status_status[1] <= basesoc_cdcusb_rx0;
end
assign csr_bankarray_csrbank4_ev_status_w = basesoc_cdcusb_status_status;
assign basesoc_cdcusb_status_we = csr_bankarray_csrbank4_ev_status_we;
always @(*) begin
    basesoc_cdcusb_pending_status <= 2'd0;
    basesoc_cdcusb_pending_status[0] <= basesoc_cdcusb_tx1;
    basesoc_cdcusb_pending_status[1] <= basesoc_cdcusb_rx1;
end
assign csr_bankarray_csrbank4_ev_pending_w = basesoc_cdcusb_pending_status;
assign basesoc_cdcusb_pending_we = csr_bankarray_csrbank4_ev_pending_we;
assign basesoc_cdcusb_tx2 = basesoc_cdcusb_enable_storage[0];
assign basesoc_cdcusb_rx2 = basesoc_cdcusb_enable_storage[1];
assign csr_bankarray_csrbank4_ev_enable0_w = basesoc_cdcusb_enable_storage;
assign csr_bankarray_csrbank4_tuning_word0_w = basesoc_cdcusb_tuning_word_storage;
assign csr_interconnect_adr = interface1_adr;
assign csr_interconnect_re = interface1_re;
assign csr_interconnect_we = interface1_we;
assign csr_interconnect_dat_w = interface1_dat_w;
assign interface1_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface2_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface3_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface4_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface1_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface2_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface3_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface4_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_sram_bus_re = csr_interconnect_re;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface2_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface3_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface4_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_interface2_bank_bus_dat_r) | csr_bankarray_interface3_bank_bus_dat_r) | csr_bankarray_interface4_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
assign slice_proxy = 9'd1;
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_dat = multiregimpl02;
assign basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_oe1 = multiregimpl12;
assign basesoc_cdcusb_cdcusbphy_usb_core_txstate_o_oe12 = multiregimpl2;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_produce_rdomain = multiregimpl31;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_consume_wdomain = multiregimpl41;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_produce_rdomain = multiregimpl51;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_consume_wdomain = multiregimpl61;
assign basesoc_cdcusb_rts = multiregimpl71;
assign basesoc_cdcusb_dtr = multiregimpl81;
assign basesoc_cdcusb_toggle_o = multiregimpl91;
assign basesoc_cdcusb_asyncfifo0_produce_rdomain = multiregimpl101;
assign basesoc_cdcusb_asyncfifo0_consume_wdomain = multiregimpl111;
assign basesoc_cdcusb_asyncfifo1_produce_rdomain = multiregimpl121;
assign basesoc_cdcusb_asyncfifo1_consume_wdomain = multiregimpl131;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    if ((~crg_por_done)) begin
        crg_por_count <= (crg_por_count - 1'd1);
    end
    if (por_rst) begin
        crg_por_count <= 16'd65535;
    end
end

always @(posedge sys_clk) begin
    if ((basesoc_bus_errors != 32'd4294967295)) begin
        if (basesoc_bus_error) begin
            basesoc_bus_errors <= (basesoc_bus_errors + 1'd1);
        end
    end
    if (basesoc_timer_en_storage) begin
        if ((basesoc_timer_value == 1'd0)) begin
            basesoc_timer_value <= basesoc_timer_reload_storage;
        end else begin
            basesoc_timer_value <= (basesoc_timer_value - 1'd1);
        end
    end else begin
        basesoc_timer_value <= basesoc_timer_load_storage;
    end
    if (basesoc_timer_update_value_re) begin
        basesoc_timer_value_status <= basesoc_timer_value;
    end
    if (basesoc_timer_zero_clear) begin
        basesoc_timer_zero_pending <= 1'd0;
    end
    basesoc_timer_zero_trigger_d <= basesoc_timer_zero_trigger;
    if ((basesoc_timer_zero_trigger & (~basesoc_timer_zero_trigger_d))) begin
        basesoc_timer_zero_pending <= 1'd1;
    end
    bus_ack <= ((bus_stb & bus_cyc) & (~bus_ack));
    if (spiflash_litespimmap_wait) begin
        if ((~spiflash_litespimmap_done)) begin
            spiflash_litespimmap_count <= (spiflash_litespimmap_count - 1'd1);
        end
    end else begin
        spiflash_litespimmap_count <= 9'd256;
    end
    litespimmap_state <= litespimmap_next_state;
    if (spiflash_litespimmap_burst_cs_litespimmap_next_value_ce) begin
        spiflash_litespimmap_burst_cs <= spiflash_litespimmap_burst_cs_litespimmap_next_value;
    end
    if (spiflash_litespimmap_byte_count_litespimmap_t_next_value_ce) begin
        spiflash_litespimmap_byte_count <= spiflash_litespimmap_byte_count_litespimmap_t_next_value;
    end
    if (spiflash_litespimmap_write_litespimmap_t_t_next_value_ce) begin
        spiflash_litespimmap_write <= spiflash_litespimmap_write_litespimmap_t_t_next_value;
    end
    if (spiflash_litespimmap_write_mask_litespimmap_t_f_next_value_ce0) begin
        spiflash_litespimmap_write_mask <= spiflash_litespimmap_write_mask_litespimmap_t_f_next_value0;
    end
    if (spiflash_litespimmap_data_write_litespimmap_t_f_next_value_ce1) begin
        spiflash_litespimmap_data_write <= spiflash_litespimmap_data_write_litespimmap_t_f_next_value1;
    end
    if (spiflash_litespimmap_burst_adr_litespimmap_f_next_value_ce) begin
        spiflash_litespimmap_burst_adr <= spiflash_litespimmap_burst_adr_litespimmap_f_next_value;
    end
    if ((~spiflash_phy_enable)) begin
        spiflash_phy_div <= spiflash_phy_spi_clk_divisor;
    end
    if (spiflash_phy_sr_out_load) begin
        spiflash_phy_sr_out <= (spiflash_phy_sink_payload_data <<< (6'd32 - spiflash_phy_sink_payload_len));
        spiflash_phy_sr_in <= 1'd0;
    end
    if (spiflash_phy_sr_out_shift) begin
        spiflash_phy_sr_out <= (spiflash_phy_sr_out <<< spiflash_phy_sink_payload_width);
    end
    if (spiflash_phy_sr_in_shift) begin
        case (spiflash_phy_sink_payload_width)
            1'd1: begin
                spiflash_phy_sr_in <= {spiflash_phy_sr_in, spiflash_phy_dq_i[1]};
            end
            2'd2: begin
                spiflash_phy_sr_in <= {spiflash_phy_sr_in, spiflash_phy_dq_i[1:0]};
            end
            3'd4: begin
                spiflash_phy_sr_in <= {spiflash_phy_sr_in, spiflash_phy_dq_i};
            end
            4'd8: begin
                spiflash_phy_sr_in <= {spiflash_phy_sr_in, spiflash_phy_dq_i};
            end
        endcase
    end
    spiflash_phy_posedge_reg <= spiflash_phy_posedge;
    spiflash_phy_posedge_reg2 <= spiflash_phy_posedge_reg;
    if ((spiflash_phy_en | spiflash_phy_en_int)) begin
        if ((spiflash_phy_cnt < spiflash_phy_div)) begin
            spiflash_phy_cnt <= (spiflash_phy_cnt + 1'd1);
        end else begin
            spiflash_phy_cnt <= 1'd0;
            spiflash_phy_clk <= (~spiflash_phy_clk);
        end
    end else begin
        spiflash_phy_clk <= 1'd0;
        spiflash_phy_cnt <= 1'd0;
    end
    if (spiflash_phy_wait) begin
        if ((~spiflash_phy_done)) begin
            spiflash_phy_count <= (spiflash_phy_count - 1'd1);
        end
    end else begin
        spiflash_phy_count <= 4'd11;
    end
    litespiphy_state <= litespiphy_next_state;
    if (spiflash_phy_sr_cnt_litespiphy_next_value_ce0) begin
        spiflash_phy_sr_cnt <= spiflash_phy_sr_cnt_litespiphy_next_value0;
    end
    if (spiflash_phy_dq_oe_litespiphy_next_value_ce1) begin
        spiflash_phy_dq_oe <= spiflash_phy_dq_oe_litespiphy_next_value1;
    end
    if (done) begin
        chaser <= {chaser, (~chaser)};
    end
    if (re) begin
        mode <= 1'd1;
    end
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 23'd6000000;
    end
    state <= next_state;
    csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank0_sel) begin
        case (csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank0_reset0_re) begin
        basesoc_reset_storage <= csr_bankarray_csrbank0_reset0_r;
    end
    basesoc_reset_re <= csr_bankarray_csrbank0_reset0_re;
    if (csr_bankarray_csrbank0_scratch0_re) begin
        basesoc_scratch_storage <= csr_bankarray_csrbank0_scratch0_r;
    end
    basesoc_scratch_re <= csr_bankarray_csrbank0_scratch0_re;
    basesoc_bus_errors_re <= csr_bankarray_csrbank0_bus_errors_re;
    csr_bankarray_sel_r <= csr_bankarray_sel;
    csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank1_sel) begin
        case (csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_out0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank1_out0_re) begin
        storage <= csr_bankarray_csrbank1_out0_r;
    end
    re <= csr_bankarray_csrbank1_out0_re;
    csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank2_sel) begin
        case (csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_phy_clk_divisor0_w;
            end
            1'd1: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_mmap_dummy_bits0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank2_phy_clk_divisor0_re) begin
        spiflash_phy_storage <= csr_bankarray_csrbank2_phy_clk_divisor0_r;
    end
    spiflash_phy_re <= csr_bankarray_csrbank2_phy_clk_divisor0_re;
    if (csr_bankarray_csrbank2_mmap_dummy_bits0_re) begin
        spiflash_litespimmap_storage <= csr_bankarray_csrbank2_mmap_dummy_bits0_r;
    end
    spiflash_litespimmap_re <= csr_bankarray_csrbank2_mmap_dummy_bits0_re;
    csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank3_sel) begin
        case (csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_load0_w;
            end
            1'd1: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_reload0_w;
            end
            2'd2: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_en0_w;
            end
            2'd3: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_update_value0_w;
            end
            3'd4: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_value_w;
            end
            3'd5: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_status_w;
            end
            3'd6: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_pending_w;
            end
            3'd7: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_enable0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank3_load0_re) begin
        basesoc_timer_load_storage <= csr_bankarray_csrbank3_load0_r;
    end
    basesoc_timer_load_re <= csr_bankarray_csrbank3_load0_re;
    if (csr_bankarray_csrbank3_reload0_re) begin
        basesoc_timer_reload_storage <= csr_bankarray_csrbank3_reload0_r;
    end
    basesoc_timer_reload_re <= csr_bankarray_csrbank3_reload0_re;
    if (csr_bankarray_csrbank3_en0_re) begin
        basesoc_timer_en_storage <= csr_bankarray_csrbank3_en0_r;
    end
    basesoc_timer_en_re <= csr_bankarray_csrbank3_en0_re;
    if (csr_bankarray_csrbank3_update_value0_re) begin
        basesoc_timer_update_value_storage <= csr_bankarray_csrbank3_update_value0_r;
    end
    basesoc_timer_update_value_re <= csr_bankarray_csrbank3_update_value0_re;
    basesoc_timer_value_re <= csr_bankarray_csrbank3_value_re;
    basesoc_timer_status_re <= csr_bankarray_csrbank3_ev_status_re;
    if (csr_bankarray_csrbank3_ev_pending_re) begin
        basesoc_timer_pending_r <= csr_bankarray_csrbank3_ev_pending_r;
    end
    basesoc_timer_pending_re <= csr_bankarray_csrbank3_ev_pending_re;
    if (csr_bankarray_csrbank3_ev_enable0_re) begin
        basesoc_timer_enable_storage <= csr_bankarray_csrbank3_ev_enable0_r;
    end
    basesoc_timer_enable_re <= csr_bankarray_csrbank3_ev_enable0_re;
    csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank4_sel) begin
        case (csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface4_bank_bus_dat_r <= basesoc_cdcusb_rxtx_w;
            end
            1'd1: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_txfull_w;
            end
            2'd2: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_rxempty_w;
            end
            2'd3: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_ev_status_w;
            end
            3'd4: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_ev_pending_w;
            end
            3'd5: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_ev_enable0_w;
            end
            3'd6: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_tuning_word0_w;
            end
            3'd7: begin
                csr_bankarray_interface4_bank_bus_dat_r <= basesoc_cdcusb_configured_w;
            end
        endcase
    end
    basesoc_cdcusb_txfull_re <= csr_bankarray_csrbank4_txfull_re;
    basesoc_cdcusb_rxempty_re <= csr_bankarray_csrbank4_rxempty_re;
    basesoc_cdcusb_status_re <= csr_bankarray_csrbank4_ev_status_re;
    if (csr_bankarray_csrbank4_ev_pending_re) begin
        basesoc_cdcusb_pending_r <= csr_bankarray_csrbank4_ev_pending_r;
    end
    basesoc_cdcusb_pending_re <= csr_bankarray_csrbank4_ev_pending_re;
    if (csr_bankarray_csrbank4_ev_enable0_re) begin
        basesoc_cdcusb_enable_storage <= csr_bankarray_csrbank4_ev_enable0_r;
    end
    basesoc_cdcusb_enable_re <= csr_bankarray_csrbank4_ev_enable0_re;
    if (csr_bankarray_csrbank4_tuning_word0_re) begin
        basesoc_cdcusb_tuning_word_storage <= csr_bankarray_csrbank4_tuning_word0_r;
    end
    basesoc_cdcusb_tuning_word_re <= csr_bankarray_csrbank4_tuning_word0_re;
    if (sys_rst) begin
        basesoc_reset_storage <= 2'd0;
        basesoc_reset_re <= 1'd0;
        basesoc_scratch_storage <= 32'd305419896;
        basesoc_scratch_re <= 1'd0;
        basesoc_bus_errors_re <= 1'd0;
        basesoc_bus_errors <= 32'd0;
        basesoc_cdcusb_txfull_re <= 1'd0;
        basesoc_cdcusb_rxempty_re <= 1'd0;
        basesoc_cdcusb_status_re <= 1'd0;
        basesoc_cdcusb_pending_re <= 1'd0;
        basesoc_cdcusb_pending_r <= 2'd0;
        basesoc_cdcusb_enable_storage <= 2'd0;
        basesoc_cdcusb_enable_re <= 1'd0;
        basesoc_cdcusb_tuning_word_storage <= 32'd0;
        basesoc_cdcusb_tuning_word_re <= 1'd0;
        basesoc_timer_load_storage <= 32'd0;
        basesoc_timer_load_re <= 1'd0;
        basesoc_timer_reload_storage <= 32'd0;
        basesoc_timer_reload_re <= 1'd0;
        basesoc_timer_en_storage <= 1'd0;
        basesoc_timer_en_re <= 1'd0;
        basesoc_timer_update_value_storage <= 1'd0;
        basesoc_timer_update_value_re <= 1'd0;
        basesoc_timer_value_status <= 32'd0;
        basesoc_timer_value_re <= 1'd0;
        basesoc_timer_zero_pending <= 1'd0;
        basesoc_timer_zero_trigger_d <= 1'd0;
        basesoc_timer_status_re <= 1'd0;
        basesoc_timer_pending_re <= 1'd0;
        basesoc_timer_pending_r <= 1'd0;
        basesoc_timer_enable_storage <= 1'd0;
        basesoc_timer_enable_re <= 1'd0;
        basesoc_timer_value <= 32'd0;
        bus_ack <= 1'd0;
        spiflash_phy_storage <= 8'd0;
        spiflash_phy_re <= 1'd0;
        spiflash_phy_div <= 8'd0;
        spiflash_phy_cnt <= 8'd0;
        spiflash_phy_clk <= 1'd0;
        spiflash_phy_posedge_reg <= 1'd0;
        spiflash_phy_posedge_reg2 <= 1'd0;
        spiflash_phy_count <= 4'd11;
        spiflash_phy_dq_oe <= 4'd0;
        spiflash_phy_sr_out <= 32'd0;
        spiflash_phy_sr_in <= 32'd0;
        spiflash_litespimmap_burst_cs <= 1'd0;
        spiflash_litespimmap_count <= 9'd256;
        spiflash_litespimmap_write <= 1'd0;
        spiflash_litespimmap_write_mask <= 4'd0;
        spiflash_litespimmap_storage <= 8'd8;
        spiflash_litespimmap_re <= 1'd0;
        spiflash_litespimmap_data_write <= 32'd0;
        storage <= 1'd0;
        re <= 1'd0;
        chaser <= 1'd0;
        mode <= 1'd0;
        count <= 23'd6000000;
        csr_bankarray_sel_r <= 1'd0;
        litespimmap_state <= 4'd0;
        litespiphy_state <= 2'd0;
        state <= 1'd0;
    end
end

always @(posedge sys_usb_clk) begin
    if (basesoc_cdcusb_tx_clear) begin
        basesoc_cdcusb_tx_pending <= 1'd0;
    end
    basesoc_cdcusb_tx_trigger_d <= basesoc_cdcusb_tx_trigger;
    if (((~basesoc_cdcusb_tx_trigger) & basesoc_cdcusb_tx_trigger_d)) begin
        basesoc_cdcusb_tx_pending <= 1'd1;
    end
    if (basesoc_cdcusb_rx_clear) begin
        basesoc_cdcusb_rx_pending <= 1'd0;
    end
    basesoc_cdcusb_rx_trigger_d <= basesoc_cdcusb_rx_trigger;
    if (((~basesoc_cdcusb_rx_trigger) & basesoc_cdcusb_rx_trigger_d)) begin
        basesoc_cdcusb_rx_pending <= 1'd1;
    end
    if (basesoc_cdcusb_i) begin
        basesoc_cdcusb_toggle_i <= (~basesoc_cdcusb_toggle_i);
    end
    basesoc_cdcusb_asyncfifo0_graycounter0_q_binary <= basesoc_cdcusb_asyncfifo0_graycounter0_q_next_binary;
    basesoc_cdcusb_asyncfifo0_graycounter0_q <= basesoc_cdcusb_asyncfifo0_graycounter0_q_next;
    basesoc_cdcusb_asyncfifo1_graycounter3_q_binary <= basesoc_cdcusb_asyncfifo1_graycounter3_q_next_binary;
    basesoc_cdcusb_asyncfifo1_graycounter3_q <= basesoc_cdcusb_asyncfifo1_graycounter3_q_next;
    if (sys_usb_rst) begin
        basesoc_cdcusb_tx_pending <= 1'd0;
        basesoc_cdcusb_tx_trigger_d <= 1'd0;
        basesoc_cdcusb_rx_pending <= 1'd0;
        basesoc_cdcusb_rx_trigger_d <= 1'd0;
        basesoc_cdcusb_asyncfifo0_graycounter0_q <= 3'd0;
        basesoc_cdcusb_asyncfifo0_graycounter0_q_binary <= 3'd0;
        basesoc_cdcusb_asyncfifo1_graycounter3_q <= 3'd0;
        basesoc_cdcusb_asyncfifo1_graycounter3_q_binary <= 3'd0;
    end
    multiregimpl70 <= basesoc_cdcusb_cdcusbphy_rts;
    multiregimpl71 <= multiregimpl70;
    multiregimpl80 <= basesoc_cdcusb_cdcusbphy_dtr;
    multiregimpl81 <= multiregimpl80;
    multiregimpl110 <= basesoc_cdcusb_asyncfifo0_graycounter1_q;
    multiregimpl111 <= multiregimpl110;
    multiregimpl120 <= basesoc_cdcusb_asyncfifo1_graycounter2_q;
    multiregimpl121 <= multiregimpl120;
end

always @(posedge usb_12_clk) begin
    basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_valid_data <= (((~basesoc_cdcusb_cdcusbphy_usb_core_tx_stall) & basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_o_get) & basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe);
    csrtransform_fsm_state <= csrtransform_fsm_next_state;
    if (basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse_csrtransform_txpipeline_next_value_ce0) begin
        basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse <= basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse_csrtransform_txpipeline_next_value0;
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value_ce1) begin
        basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray <= basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray_csrtransform_txpipeline_next_value1;
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_ce) begin
        basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_pos <= (basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_pos >>> 1'd1);
        basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_shifter <= (basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_shifter >>> 1'd1);
        if (basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_empty) begin
            basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_shifter <= basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_i_data;
            basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_pos <= 8'd128;
        end
        basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_o_get <= basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_empty;
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_reset) begin
        basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_o_get <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_shifter <= 8'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_pos <= 8'd1;
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_stuff_bit) begin
        basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_o_data <= 1'd0;
    end else begin
        basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_o_data <= basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_i_data;
    end
    csrtransform_resetinserter_state <= csrtransform_resetinserter_next_state;
    if (basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_reset) begin
        basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_o_data <= 1'd0;
        csrtransform_resetinserter_state <= 3'd0;
    end
    csrtransform_txpacketsend_state <= csrtransform_txpacketsend_next_state;
    if (basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe_csrtransform_txpacketsend_next_value_ce0) begin
        basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe <= basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe_csrtransform_txpacketsend_next_value0;
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_txstate_pid_csrtransform_txpacketsend_next_value_ce1) begin
        basesoc_cdcusb_cdcusbphy_usb_core_txstate_pid <= basesoc_cdcusb_cdcusbphy_usb_core_txstate_pid_csrtransform_txpacketsend_next_value1;
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_txstate_i_data_strobe) begin
        basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur <= basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_next;
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_txstate_reset) begin
        basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur <= 16'd65535;
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_rx_o_pkt_start) begin
        basesoc_cdcusb_cdcusbphy_usb_core_rx_o_pkt_in_progress <= 1'd1;
    end else begin
        if (basesoc_cdcusb_cdcusbphy_usb_core_rx_o_pkt_end) begin
            basesoc_cdcusb_cdcusbphy_usb_core_rx_o_pkt_in_progress <= 1'd0;
        end
    end
    basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q_binary <= basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q_next_binary;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q <= basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q_next;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q_binary <= basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q_next_binary;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q <= basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q_next;
    csrtransform_packetheaderdecode_state <= csrtransform_packetheaderdecode_next_state;
    if (basesoc_cdcusb_cdcusbphy_usb_core_o_pid_csrtransform_packetheaderdecode_next_value_ce0) begin
        basesoc_cdcusb_cdcusbphy_usb_core_o_pid <= basesoc_cdcusb_cdcusbphy_usb_core_o_pid_csrtransform_packetheaderdecode_next_value0;
    end
    if (csrtransform_packetheaderdecode_next_value_ce) begin
        basesoc_cdcusb_cdcusbphy_usb_core_o_addr <= csrtransform_packetheaderdecode_next_value;
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_endp4_csrtransform_packetheaderdecode_next_value_ce1) begin
        basesoc_cdcusb_cdcusbphy_usb_core_endp4 <= basesoc_cdcusb_cdcusbphy_usb_core_endp4_csrtransform_packetheaderdecode_next_value1;
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_o_endp_csrtransform_packetheaderdecode_next_value_ce2) begin
        basesoc_cdcusb_cdcusbphy_usb_core_o_endp <= basesoc_cdcusb_cdcusbphy_usb_core_o_endp_csrtransform_packetheaderdecode_next_value2;
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_crc5_csrtransform_packetheaderdecode_next_value_ce3) begin
        basesoc_cdcusb_cdcusbphy_usb_core_crc5 <= basesoc_cdcusb_cdcusbphy_usb_core_crc5_csrtransform_packetheaderdecode_next_value3;
    end
    csrtransform_clockdomainsrenamer_state <= csrtransform_clockdomainsrenamer_next_state;
    if (basesoc_cdcusb_cdcusbphy_usb_core_tok_csrtransform_f_next_value_ce0) begin
        basesoc_cdcusb_cdcusbphy_usb_core_tok <= basesoc_cdcusb_cdcusbphy_usb_core_tok_csrtransform_f_next_value0;
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_endp_csrtransform_f_next_value_ce1) begin
        basesoc_cdcusb_cdcusbphy_usb_core_endp <= basesoc_cdcusb_cdcusbphy_usb_core_endp_csrtransform_f_next_value1;
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_response_pid_csrtransform_t_next_value_ce) begin
        basesoc_cdcusb_cdcusbphy_usb_core_response_pid <= basesoc_cdcusb_cdcusbphy_usb_core_response_pid_csrtransform_t_next_value;
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_transfer_reset) begin
        basesoc_cdcusb_cdcusbphy_usb_core_tok <= 4'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_endp <= 4'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_response_pid <= 4'd0;
        csrtransform_clockdomainsrenamer_state <= 4'd1;
    end
    if (basesoc_cdcusb_cdcusbphy_setuphandler_packet_clear) begin
        basesoc_cdcusb_cdcusbphy_setuphandler_packet_pending <= 1'd0;
    end
    if (basesoc_cdcusb_cdcusbphy_setuphandler_packet_trigger) begin
        basesoc_cdcusb_cdcusbphy_setuphandler_packet_pending <= 1'd1;
    end
    if (basesoc_cdcusb_cdcusbphy_setuphandler_reset_clear) begin
        basesoc_cdcusb_cdcusbphy_setuphandler_reset_pending <= 1'd0;
    end
    basesoc_cdcusb_cdcusbphy_setuphandler_reset_trigger_d <= basesoc_cdcusb_cdcusbphy_setuphandler_reset_trigger;
    if (((~basesoc_cdcusb_cdcusbphy_setuphandler_reset_trigger) & basesoc_cdcusb_cdcusbphy_setuphandler_reset_trigger_d)) begin
        basesoc_cdcusb_cdcusbphy_setuphandler_reset_pending <= 1'd1;
    end
    if (basesoc_cdcusb_cdcusbphy_setuphandler_data_recv_put) begin
        if ((basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_data_byte == 1'd0)) begin
            basesoc_cdcusb_cdcusbphy_setuphandler_epno <= basesoc_cdcusb_cdcusbphy_usb_core_endp;
            basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_is_in <= basesoc_cdcusb_cdcusbphy_setuphandler_data_recv_payload[7];
        end else begin
            if ((basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_data_byte == 3'd6)) begin
                if (basesoc_cdcusb_cdcusbphy_setuphandler_data_recv_payload) begin
                    basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_have_data_stage <= 1'd1;
                end
            end else begin
                if ((basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_data_byte == 3'd7)) begin
                    if (basesoc_cdcusb_cdcusbphy_setuphandler_data_recv_payload) begin
                        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_have_data_stage <= 1'd1;
                    end
                end
            end
        end
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_data_byte <= (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_data_byte + 1'd1);
    end
    if (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_re) begin
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_readable <= 1'd1;
    end else begin
        if (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_re) begin
            basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_readable <= 1'd0;
        end
    end
    if (((basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_we & basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_writable) & (~basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_replace))) begin
        if ((basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_produce == 4'd9)) begin
            basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_produce <= 1'd0;
        end else begin
            basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_produce <= (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_produce + 1'd1);
        end
    end
    if (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_do_read) begin
        if ((basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_consume == 4'd9)) begin
            basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_consume <= 1'd0;
        end else begin
            basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_consume <= (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_consume + 1'd1);
        end
    end
    if (((basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_we & basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_syncfifo_writable) & (~basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_replace))) begin
        if ((~basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_do_read)) begin
            basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_level0 <= (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_level0 + 1'd1);
        end
    end else begin
        if (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_do_read) begin
            basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_level0 <= (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_level0 - 1'd1);
        end
    end
    if (basesoc_cdcusb_cdcusbphy_setuphandler_inner_reset) begin
        basesoc_cdcusb_cdcusbphy_setuphandler_epno <= 1'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_readable <= 1'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_level0 <= 4'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_produce <= 4'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_consume <= 4'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_data_byte <= 4'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_have_data_stage <= 1'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_is_in <= 1'd0;
    end
    if (basesoc_cdcusb_cdcusbphy_inhandler_csrfield_reset) begin
        basesoc_cdcusb_cdcusbphy_inhandler_stall_status <= 1'd0;
    end else begin
        if ((basesoc_cdcusb_cdcusbphy_usb_core_setup | (basesoc_cdcusb_cdcusbphy_inhandler_ctrl_re & (~basesoc_cdcusb_cdcusbphy_inhandler_csrfield_stall)))) begin
            basesoc_cdcusb_cdcusbphy_inhandler_stall_status <= (basesoc_cdcusb_cdcusbphy_inhandler_stall_status & (~basesoc_cdcusb_cdcusbphy_inhandler_ep_stall_mask));
        end else begin
            if (basesoc_cdcusb_cdcusbphy_inhandler_ctrl_re) begin
                basesoc_cdcusb_cdcusbphy_inhandler_stall_status <= (basesoc_cdcusb_cdcusbphy_inhandler_stall_status | basesoc_cdcusb_cdcusbphy_inhandler_ep_stall_mask);
            end
        end
    end
    if (basesoc_cdcusb_cdcusbphy_inhandler_csrfield_reset) begin
        basesoc_cdcusb_cdcusbphy_inhandler_queued <= 1'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_was_queued <= 1'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_transmitted <= 1'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_dtbs <= 1'd1;
    end else begin
        if (basesoc_cdcusb_cdcusbphy_inhandler_dtb_reset) begin
            basesoc_cdcusb_cdcusbphy_inhandler_dtbs <= (basesoc_cdcusb_cdcusbphy_inhandler_dtbs | 1'd1);
        end else begin
            if ((basesoc_cdcusb_cdcusbphy_inhandler_ctrl_re & (~basesoc_cdcusb_cdcusbphy_inhandler_csrfield_stall))) begin
                basesoc_cdcusb_cdcusbphy_inhandler_queued <= 1'd1;
            end else begin
                if ((basesoc_cdcusb_cdcusbphy_usb_core_poll & basesoc_cdcusb_cdcusbphy_inhandler_response)) begin
                    basesoc_cdcusb_cdcusbphy_inhandler_transmitted <= 1'd1;
                end else begin
                    if ((((basesoc_cdcusb_cdcusbphy_usb_core_commit & basesoc_cdcusb_cdcusbphy_inhandler_transmitted) & basesoc_cdcusb_cdcusbphy_inhandler_response) & (~basesoc_cdcusb_cdcusbphy_inhandler_stalled))) begin
                        basesoc_cdcusb_cdcusbphy_inhandler_queued <= 1'd0;
                        basesoc_cdcusb_cdcusbphy_inhandler_transmitted <= 1'd0;
                        basesoc_cdcusb_cdcusbphy_inhandler_dtbs <= (basesoc_cdcusb_cdcusbphy_inhandler_dtbs ^ (1'd1 <<< basesoc_cdcusb_cdcusbphy_inhandler_csrfield_epno));
                    end else begin
                        basesoc_cdcusb_cdcusbphy_inhandler_was_queued <= basesoc_cdcusb_cdcusbphy_inhandler_queued;
                    end
                end
            end
        end
    end
    if (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_re) begin
        basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_readable <= 1'd1;
    end else begin
        if (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_re) begin
            basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_readable <= 1'd0;
        end
    end
    if (((basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_we & basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_writable) & (~basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_replace))) begin
        basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_produce <= (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_produce + 1'd1);
    end
    if (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_do_read) begin
        basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_consume <= (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_consume + 1'd1);
    end
    if (((basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_we & basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_syncfifo_writable) & (~basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_replace))) begin
        if ((~basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_do_read)) begin
            basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_level0 <= (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_level0 + 1'd1);
        end
    end else begin
        if (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_do_read) begin
            basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_level0 <= (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_level0 - 1'd1);
        end
    end
    if (basesoc_cdcusb_cdcusbphy_inhandler_data_buf_reset) begin
        basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_readable <= 1'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_level0 <= 7'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_produce <= 6'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_consume <= 6'd0;
    end
    if (basesoc_cdcusb_cdcusbphy_inhandler_packet_clear) begin
        basesoc_cdcusb_cdcusbphy_inhandler_packet_pending <= 1'd0;
    end
    if (basesoc_cdcusb_cdcusbphy_inhandler_packet_trigger) begin
        basesoc_cdcusb_cdcusbphy_inhandler_packet_pending <= 1'd1;
    end
    if ((basesoc_cdcusb_cdcusbphy_outhandler_csrfield_reset | basesoc_cdcusb_cdcusbphy_outhandler_usb_reset)) begin
        basesoc_cdcusb_cdcusbphy_outhandler_stall_status <= 1'd0;
    end else begin
        if ((basesoc_cdcusb_cdcusbphy_usb_core_setup | (basesoc_cdcusb_cdcusbphy_outhandler_ctrl_re & (~basesoc_cdcusb_cdcusbphy_outhandler_csrfield_stall)))) begin
            basesoc_cdcusb_cdcusbphy_outhandler_stall_status <= (basesoc_cdcusb_cdcusbphy_outhandler_stall_status & (~basesoc_cdcusb_cdcusbphy_outhandler_ep_mask));
        end else begin
            if (basesoc_cdcusb_cdcusbphy_outhandler_ctrl_re) begin
                basesoc_cdcusb_cdcusbphy_outhandler_stall_status <= (basesoc_cdcusb_cdcusbphy_outhandler_stall_status | basesoc_cdcusb_cdcusbphy_outhandler_ep_mask);
            end
        end
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_poll) begin
        basesoc_cdcusb_cdcusbphy_outhandler_responding <= basesoc_cdcusb_cdcusbphy_outhandler_response;
    end
    if (basesoc_cdcusb_cdcusbphy_outhandler_csrfield_reset) begin
        basesoc_cdcusb_cdcusbphy_outhandler_enable_status <= 1'd0;
    end else begin
        if ((basesoc_cdcusb_cdcusbphy_usb_core_commit & basesoc_cdcusb_cdcusbphy_outhandler_responding)) begin
            basesoc_cdcusb_cdcusbphy_outhandler_epno <= basesoc_cdcusb_cdcusbphy_usb_core_endp;
            basesoc_cdcusb_cdcusbphy_outhandler_enable_status <= (basesoc_cdcusb_cdcusbphy_outhandler_enable_status & (~basesoc_cdcusb_cdcusbphy_outhandler_ep_mask));
            basesoc_cdcusb_cdcusbphy_outhandler_responding <= 1'd0;
        end else begin
            if (basesoc_cdcusb_cdcusbphy_outhandler_ctrl_re) begin
                if (basesoc_cdcusb_cdcusbphy_outhandler_csrfield_enable) begin
                    basesoc_cdcusb_cdcusbphy_outhandler_enable_status <= (basesoc_cdcusb_cdcusbphy_outhandler_enable_status | basesoc_cdcusb_cdcusbphy_outhandler_ep_mask);
                end else begin
                    basesoc_cdcusb_cdcusbphy_outhandler_enable_status <= (basesoc_cdcusb_cdcusbphy_outhandler_enable_status & (~basesoc_cdcusb_cdcusbphy_outhandler_ep_mask));
                end
            end
        end
    end
    if (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_re) begin
        basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_readable <= 1'd1;
    end else begin
        if (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_re) begin
            basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_readable <= 1'd0;
        end
    end
    if (((basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_we & basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_writable) & (~basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_replace))) begin
        if ((basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_produce == 7'd65)) begin
            basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_produce <= 1'd0;
        end else begin
            basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_produce <= (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_produce + 1'd1);
        end
    end
    if (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_do_read) begin
        if ((basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_consume == 7'd65)) begin
            basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_consume <= 1'd0;
        end else begin
            basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_consume <= (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_consume + 1'd1);
        end
    end
    if (((basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_we & basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_syncfifo_writable) & (~basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_replace))) begin
        if ((~basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_do_read)) begin
            basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_level0 <= (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_level0 + 1'd1);
        end
    end else begin
        if (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_do_read) begin
            basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_level0 <= (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_level0 - 1'd1);
        end
    end
    if (basesoc_cdcusb_cdcusbphy_outhandler_data_buf_reset) begin
        basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_readable <= 1'd0;
        basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_level0 <= 7'd0;
        basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_produce <= 7'd0;
        basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_consume <= 7'd0;
    end
    if (basesoc_cdcusb_cdcusbphy_outhandler_packet_clear) begin
        basesoc_cdcusb_cdcusbphy_outhandler_packet_pending <= 1'd0;
    end
    if (basesoc_cdcusb_cdcusbphy_outhandler_packet_trigger) begin
        basesoc_cdcusb_cdcusbphy_outhandler_packet_pending <= 1'd1;
    end
    csrtransform_state <= csrtransform_next_state;
    if (basesoc_cdcusb_cdcusbphy_usb_core_addr_csrtransform_next_value_ce) begin
        basesoc_cdcusb_cdcusbphy_usb_core_addr <= basesoc_cdcusb_cdcusbphy_usb_core_addr_csrtransform_next_value;
    end
    if (basesoc_cdcusb_cdcusbphy_resetinserter_reset) begin
        basesoc_cdcusb_cdcusbphy_usb_core_addr <= 7'd0;
        csrtransform_state <= 3'd0;
    end
    if ((basesoc_cdcusb_cdcusbphy_dtr & (basesoc_cdcusb_cdcusbphy_configured_delay > 1'd0))) begin
        basesoc_cdcusb_cdcusbphy_configured_delay <= (basesoc_cdcusb_cdcusbphy_configured_delay - 1'd1);
    end else begin
        if (basesoc_cdcusb_cdcusbphy_configure_set) begin
            basesoc_cdcusb_cdcusbphy_configured_delay <= 1'd0;
        end
    end
    basesoc_cdcusb_cdcusbphy_pullup_re <= basesoc_cdcusb_cdcusbphy_csrtransform_pullup_out_re;
    if (basesoc_cdcusb_cdcusbphy_csrtransform_pullup_out_re) begin
        basesoc_cdcusb_cdcusbphy_pullup_storage <= basesoc_cdcusb_cdcusbphy_csrtransform;
    end
    basesoc_cdcusb_cdcusbphy_csrstorage_re <= basesoc_cdcusb_cdcusbphy_csrtransform_address_re;
    if (basesoc_cdcusb_cdcusbphy_csrtransform_address_re) begin
        basesoc_cdcusb_cdcusbphy_csrstorage_storage <= basesoc_cdcusb_cdcusbphy_csrtransform_address_addr0;
    end
    if (basesoc_cdcusb_cdcusbphy_address_reset) begin
        basesoc_cdcusb_cdcusbphy_csrstorage_storage <= 7'd0;
        basesoc_cdcusb_cdcusbphy_csrstorage_re <= 1'd0;
    end
    basesoc_cdcusb_cdcusbphy_setuphandler_ctrl_re <= basesoc_cdcusb_cdcusbphy_csrtransform_setup_ctrl_re;
    if (basesoc_cdcusb_cdcusbphy_csrtransform_setup_ctrl_re) begin
        basesoc_cdcusb_cdcusbphy_setuphandler_ctrl_storage[5] <= basesoc_cdcusb_cdcusbphy_csrtransform_setup_ctrl_reset0;
    end
    basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_enable_re <= basesoc_cdcusb_cdcusbphy_csrtransform_setup_ev_enable_re;
    if (basesoc_cdcusb_cdcusbphy_csrtransform_setup_ev_enable_re) begin
        basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_enable_storage[0] <= basesoc_cdcusb_cdcusbphy_csrtransform_setup_ev_enable_ready0;
    end
    if (basesoc_cdcusb_cdcusbphy_csrtransform_setup_ev_enable_re) begin
        basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_enable_storage[1] <= basesoc_cdcusb_cdcusbphy_csrtransform_setup_ev_enable_reset0;
    end
    basesoc_cdcusb_cdcusbphy_inhandler_data_re <= basesoc_cdcusb_cdcusbphy_csrtransform_in_data_re;
    if (basesoc_cdcusb_cdcusbphy_csrtransform_in_data_re) begin
        basesoc_cdcusb_cdcusbphy_inhandler_data_storage <= basesoc_cdcusb_cdcusbphy_csrtransform_in_data_data0;
    end
    basesoc_cdcusb_cdcusbphy_inhandler_ctrl_re <= basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_re;
    if (basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_re) begin
        basesoc_cdcusb_cdcusbphy_inhandler_ctrl_storage[3:0] <= basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_epno0;
    end
    if (basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_re) begin
        basesoc_cdcusb_cdcusbphy_inhandler_ctrl_storage[5] <= basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_reset0;
    end
    if (basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_re) begin
        basesoc_cdcusb_cdcusbphy_inhandler_ctrl_storage[6] <= basesoc_cdcusb_cdcusbphy_csrtransform_in_ctrl_stall0;
    end
    basesoc_cdcusb_cdcusbphy_inhandler_enable_re <= basesoc_cdcusb_cdcusbphy_csrtransform_in_ev_enable_re;
    if (basesoc_cdcusb_cdcusbphy_csrtransform_in_ev_enable_re) begin
        basesoc_cdcusb_cdcusbphy_inhandler_enable_storage <= basesoc_cdcusb_cdcusbphy_csrtransform_in_ev_enable_done0;
    end
    basesoc_cdcusb_cdcusbphy_outhandler_ctrl_re <= basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_re;
    if (basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_re) begin
        basesoc_cdcusb_cdcusbphy_outhandler_ctrl_storage[3:0] <= basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_epno0;
    end
    if (basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_re) begin
        basesoc_cdcusb_cdcusbphy_outhandler_ctrl_storage[4] <= basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_enable0;
    end
    if (basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_re) begin
        basesoc_cdcusb_cdcusbphy_outhandler_ctrl_storage[5] <= basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_reset0;
    end
    if (basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_re) begin
        basesoc_cdcusb_cdcusbphy_outhandler_ctrl_storage[6] <= basesoc_cdcusb_cdcusbphy_csrtransform_out_ctrl_stall0;
    end
    basesoc_cdcusb_cdcusbphy_outhandler_enable_re <= basesoc_cdcusb_cdcusbphy_csrtransform_out_ev_enable_re;
    if (basesoc_cdcusb_cdcusbphy_csrtransform_out_ev_enable_re) begin
        basesoc_cdcusb_cdcusbphy_outhandler_enable_storage <= basesoc_cdcusb_cdcusbphy_csrtransform_out_ev_enable_done0;
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_usb_reset) begin
        basesoc_cdcusb_cdcusbphy_in_next <= 1'd0;
        basesoc_cdcusb_cdcusbphy_out_next <= 1'd0;
    end else begin
        if ((basesoc_cdcusb_cdcusbphy_inhandler_packet_pending & (~basesoc_cdcusb_cdcusbphy_outhandler_packet_pending))) begin
            basesoc_cdcusb_cdcusbphy_in_next <= 1'd1;
            basesoc_cdcusb_cdcusbphy_out_next <= 1'd0;
        end else begin
            if (((~basesoc_cdcusb_cdcusbphy_inhandler_packet_pending) & basesoc_cdcusb_cdcusbphy_outhandler_packet_pending)) begin
                basesoc_cdcusb_cdcusbphy_in_next <= 1'd0;
                basesoc_cdcusb_cdcusbphy_out_next <= 1'd1;
            end else begin
                if (((~basesoc_cdcusb_cdcusbphy_inhandler_packet_pending) & (~basesoc_cdcusb_cdcusbphy_outhandler_packet_pending))) begin
                    basesoc_cdcusb_cdcusbphy_in_next <= 1'd0;
                    basesoc_cdcusb_cdcusbphy_out_next <= 1'd0;
                end
            end
        end
    end
    fsm_state <= fsm_next_state;
    if (basesoc_cdcusb_cdcusbphy_setup_index_fsm_next_value_ce0) begin
        basesoc_cdcusb_cdcusbphy_setup_index <= basesoc_cdcusb_cdcusbphy_setup_index_fsm_next_value0;
    end
    if (basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value_ce1) begin
        basesoc_cdcusb_cdcusbphy_delayed_re <= basesoc_cdcusb_cdcusbphy_delayed_re_fsm_next_value1;
    end
    if (basesoc_cdcusb_cdcusbphy_data_d1_fsm_t_next_value_ce0) begin
        basesoc_cdcusb_cdcusbphy_data_d1 <= basesoc_cdcusb_cdcusbphy_data_d1_fsm_t_next_value0;
    end
    if (basesoc_cdcusb_cdcusbphy_data_d2_fsm_t_next_value_ce1) begin
        basesoc_cdcusb_cdcusbphy_data_d2 <= basesoc_cdcusb_cdcusbphy_data_d2_fsm_t_next_value1;
    end
    if (basesoc_cdcusb_cdcusbphy_re_d1_fsm_t_next_value_ce2) begin
        basesoc_cdcusb_cdcusbphy_re_d1 <= basesoc_cdcusb_cdcusbphy_re_d1_fsm_t_next_value2;
    end
    if (basesoc_cdcusb_cdcusbphy_re_d2_fsm_t_next_value_ce3) begin
        basesoc_cdcusb_cdcusbphy_re_d2 <= basesoc_cdcusb_cdcusbphy_re_d2_fsm_t_next_value3;
    end
    if (basesoc_cdcusb_cdcusbphy_usbPacket_fsm_lowernext_next_value_ce0) begin
        basesoc_cdcusb_cdcusbphy_usbPacket <= basesoc_cdcusb_cdcusbphy_usbPacket_fsm_lowernext_next_value0;
    end
    if (basesoc_cdcusb_cdcusbphy_wLength_fsm_lowernext_next_value_ce1) begin
        basesoc_cdcusb_cdcusbphy_wLength <= basesoc_cdcusb_cdcusbphy_wLength_fsm_lowernext_next_value1;
    end
    if (basesoc_cdcusb_cdcusbphy_new_address_fsm_t_next_value_ce4) begin
        basesoc_cdcusb_cdcusbphy_new_address <= basesoc_cdcusb_cdcusbphy_new_address_fsm_t_next_value4;
    end
    if (basesoc_cdcusb_cdcusbphy_rts_fsm_t_next_value_ce5) begin
        basesoc_cdcusb_cdcusbphy_rts <= basesoc_cdcusb_cdcusbphy_rts_fsm_t_next_value5;
    end
    if (basesoc_cdcusb_cdcusbphy_dtr_fsm_t_next_value_ce6) begin
        basesoc_cdcusb_cdcusbphy_dtr <= basesoc_cdcusb_cdcusbphy_dtr_fsm_t_next_value6;
    end
    if (basesoc_cdcusb_cdcusbphy_bytes_remaining_fsm_f_next_value_ce0) begin
        basesoc_cdcusb_cdcusbphy_bytes_remaining <= basesoc_cdcusb_cdcusbphy_bytes_remaining_fsm_f_next_value0;
    end
    if (basesoc_cdcusb_cdcusbphy_bytes_addr_fsm_f_next_value_ce1) begin
        basesoc_cdcusb_cdcusbphy_bytes_addr <= basesoc_cdcusb_cdcusbphy_bytes_addr_fsm_f_next_value1;
    end
    basesoc_cdcusb_toggle_o_r <= basesoc_cdcusb_toggle_o;
    basesoc_cdcusb_asyncfifo0_graycounter1_q_binary <= basesoc_cdcusb_asyncfifo0_graycounter1_q_next_binary;
    basesoc_cdcusb_asyncfifo0_graycounter1_q <= basesoc_cdcusb_asyncfifo0_graycounter1_q_next;
    basesoc_cdcusb_asyncfifo1_graycounter2_q_binary <= basesoc_cdcusb_asyncfifo1_graycounter2_q_next_binary;
    basesoc_cdcusb_asyncfifo1_graycounter2_q <= basesoc_cdcusb_asyncfifo1_graycounter2_q_next;
    if (usb_12_rst) begin
        basesoc_cdcusb_cdcusbphy_usb_core_tx_i_oe <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_o_get <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_shifter <= 8'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_tx_shifter_pos <= 8'd1;
        basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_o_data <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_tx_sync_pulse <= 8'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_tx_bitstuff_valid_data <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_tx_state_gray <= 2'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_txstate_pid <= 4'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_txstate_crc_cur <= 16'd65535;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_o_pkt_in_progress <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q <= 2'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q_binary <= 2'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q <= 2'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q_binary <= 2'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_o_pid <= 4'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_o_addr <= 7'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_endp4 <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_o_endp <= 4'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_crc5 <= 5'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_addr <= 7'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_tok <= 4'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_endp <= 4'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_response_pid <= 4'd0;
        basesoc_cdcusb_cdcusbphy_pullup_storage <= 1'd0;
        basesoc_cdcusb_cdcusbphy_pullup_re <= 1'd0;
        basesoc_cdcusb_cdcusbphy_csrstorage_storage <= 7'd0;
        basesoc_cdcusb_cdcusbphy_csrstorage_re <= 1'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_epno <= 1'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_ctrl_storage <= 6'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_ctrl_re <= 1'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_packet_pending <= 1'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_reset_pending <= 1'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_reset_trigger_d <= 1'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_enable_storage <= 2'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_eventmanager_enable_re <= 1'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_readable <= 1'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_level0 <= 4'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_produce <= 4'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_consume <= 4'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_data_byte <= 4'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_have_data_stage <= 1'd0;
        basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_is_in <= 1'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_dtbs <= 16'd1;
        basesoc_cdcusb_cdcusbphy_inhandler_stall_status <= 16'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_readable <= 1'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_level0 <= 7'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_produce <= 6'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_consume <= 6'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_data_storage <= 8'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_data_re <= 1'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_ctrl_storage <= 7'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_ctrl_re <= 1'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_packet_pending <= 1'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_enable_storage <= 1'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_enable_re <= 1'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_queued <= 1'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_was_queued <= 1'd0;
        basesoc_cdcusb_cdcusbphy_inhandler_transmitted <= 1'd0;
        basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_readable <= 1'd0;
        basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_level0 <= 7'd0;
        basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_produce <= 7'd0;
        basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_consume <= 7'd0;
        basesoc_cdcusb_cdcusbphy_outhandler_ctrl_storage <= 7'd0;
        basesoc_cdcusb_cdcusbphy_outhandler_ctrl_re <= 1'd0;
        basesoc_cdcusb_cdcusbphy_outhandler_packet_pending <= 1'd0;
        basesoc_cdcusb_cdcusbphy_outhandler_enable_storage <= 1'd0;
        basesoc_cdcusb_cdcusbphy_outhandler_enable_re <= 1'd0;
        basesoc_cdcusb_cdcusbphy_outhandler_stall_status <= 16'd0;
        basesoc_cdcusb_cdcusbphy_outhandler_enable_status <= 16'd0;
        basesoc_cdcusb_cdcusbphy_outhandler_epno <= 4'd0;
        basesoc_cdcusb_cdcusbphy_outhandler_responding <= 1'd0;
        basesoc_cdcusb_cdcusbphy_in_next <= 1'd0;
        basesoc_cdcusb_cdcusbphy_out_next <= 1'd0;
        basesoc_cdcusb_cdcusbphy_rts <= 1'd0;
        basesoc_cdcusb_cdcusbphy_dtr <= 1'd0;
        basesoc_cdcusb_cdcusbphy_bytes_remaining <= 6'd0;
        basesoc_cdcusb_cdcusbphy_bytes_addr <= 9'd0;
        basesoc_cdcusb_cdcusbphy_new_address <= 7'd0;
        basesoc_cdcusb_cdcusbphy_configured_delay <= 16'd65535;
        basesoc_cdcusb_cdcusbphy_usbPacket <= 32'd0;
        basesoc_cdcusb_cdcusbphy_wLength <= 8'd0;
        basesoc_cdcusb_cdcusbphy_setup_index <= 4'd0;
        basesoc_cdcusb_cdcusbphy_delayed_re <= 1'd0;
        basesoc_cdcusb_cdcusbphy_data_d1 <= 8'd0;
        basesoc_cdcusb_cdcusbphy_re_d1 <= 1'd0;
        basesoc_cdcusb_cdcusbphy_data_d2 <= 8'd0;
        basesoc_cdcusb_cdcusbphy_re_d2 <= 1'd0;
        basesoc_cdcusb_asyncfifo0_graycounter1_q <= 3'd0;
        basesoc_cdcusb_asyncfifo0_graycounter1_q_binary <= 3'd0;
        basesoc_cdcusb_asyncfifo1_graycounter2_q <= 3'd0;
        basesoc_cdcusb_asyncfifo1_graycounter2_q_binary <= 3'd0;
        csrtransform_fsm_state <= 2'd0;
        csrtransform_resetinserter_state <= 3'd0;
        csrtransform_txpacketsend_state <= 4'd0;
        csrtransform_packetheaderdecode_state <= 3'd0;
        csrtransform_clockdomainsrenamer_state <= 4'd1;
        csrtransform_state <= 3'd0;
        fsm_state <= 3'd0;
    end
    multiregimpl2 <= basesoc_cdcusb_cdcusbphy_usb_core_tx_o_oe;
    multiregimpl30 <= basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q;
    multiregimpl31 <= multiregimpl30;
    multiregimpl50 <= basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q;
    multiregimpl51 <= multiregimpl50;
    multiregimpl90 <= basesoc_cdcusb_toggle_i;
    multiregimpl91 <= multiregimpl90;
    multiregimpl100 <= basesoc_cdcusb_asyncfifo0_graycounter0_q;
    multiregimpl101 <= multiregimpl100;
    multiregimpl130 <= basesoc_cdcusb_asyncfifo1_graycounter3_q;
    multiregimpl131 <= multiregimpl130;
end

always @(posedge usb_48_clk) begin
    basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_o_oe <= basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_oe0;
    basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_o_usbp <= basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbp;
    basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_o_usbn <= basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_usbn;
    csrtransform_txnrziencoder_state <= csrtransform_txnrziencoder_next_state;
    if (basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_valid) begin
        if (basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_se01) begin
            if ((~basesoc_cdcusb_cdcusbphy_usb_core_rx_reset_counter[6])) begin
                basesoc_cdcusb_cdcusbphy_usb_core_rx_reset_counter <= (basesoc_cdcusb_cdcusbphy_usb_core_rx_reset_counter + 1'd1);
            end
        end else begin
            basesoc_cdcusb_cdcusbphy_usb_core_rx_reset_counter <= 1'd0;
        end
    end
    basesoc_cdcusb_cdcusbphy_usb_core_rx_last_reset <= basesoc_cdcusb_cdcusbphy_usb_core_rx_reset1;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_valid <= (basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_phase == 1'd1);
    if (basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dt) begin
        basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_phase <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_valid <= 1'd0;
    end else begin
        basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_phase <= (basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_phase + 1'd1);
    end
    basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dj1 <= basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dj0;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dk1 <= basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dk0;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_se01 <= basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_se00;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_se11 <= basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_se10;
    csrtransform_rxpipeline_state <= csrtransform_rxpipeline_next_state;
    if (basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_i_valid) begin
        basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_last_data <= basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_i_dk;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_o_data <= (~(basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_i_dk ^ basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_last_data));
        basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_o_se0 <= ((~basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_i_dj) & (~basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_i_dk));
    end
    basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_o_valid <= basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_i_valid;
    csrtransform_rxpipeline_rxpacketdetect_state <= csrtransform_rxpipeline_rxpacketdetect_next_state;
    if (basesoc_cdcusb_cdcusbphy_usb_core_rx_detect_reset) begin
        csrtransform_rxpipeline_rxpacketdetect_state <= 3'd0;
    end
    basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_o_data <= basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_data;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_o_stall <= (basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_drop_bit | (~basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_valid));
    basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_o_error <= ((basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_drop_bit & basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_data) & basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_i_valid);
    csrtransform_rxpipeline_rxbitstuffremover_state <= csrtransform_rxpipeline_rxbitstuffremover_next_state;
    if (basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_reset) begin
        basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_o_data <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_o_error <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_o_stall <= 1'd1;
        csrtransform_rxpipeline_rxbitstuffremover_state <= 3'd0;
    end
    basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_o_put <= ((basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_shift_reg[7] & (~basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_shift_reg[8])) & basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_i_valid);
    if (basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_i_valid) begin
        if (basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_shift_reg[8]) begin
            basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_shift_reg <= {slice_proxy[7:0], basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_i_data};
        end else begin
            basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_shift_reg <= {basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_shift_reg[7:0], basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_i_data};
        end
    end
    if (basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_reset) begin
        basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_o_put <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_shift_reg <= 9'd1;
    end
    basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q_binary <= basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q_next_binary;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q <= basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q_next;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q_binary <= basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q_next_binary;
    basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q <= basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q_next;
    if (usb_48_rst) begin
        basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_o_usbp <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_o_usbn <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_tx_nrzi_o_oe <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_phase <= 2'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_valid <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dj1 <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_dk1 <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_se01 <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_line_state_se11 <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_reset_counter <= 7'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_o_valid <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_o_data <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_o_se0 <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_nrzi_last_data <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_o_data <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_o_error <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_bitstuff_o_stall <= 1'd1;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_last_reset <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_o_put <= 1'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_shifter_shift_reg <= 9'd1;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q <= 2'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter0_q_binary <= 2'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q <= 2'd0;
        basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter0_q_binary <= 2'd0;
        csrtransform_txnrziencoder_state <= 3'd0;
        csrtransform_rxpipeline_state <= 3'd0;
        csrtransform_rxpipeline_rxpacketdetect_state <= 3'd0;
        csrtransform_rxpipeline_rxbitstuffremover_state <= 3'd0;
    end
    multiregimpl00 <= basesoc_cdcusb_cdcusbphy_usb_core_tx_fit_dat;
    multiregimpl01 <= multiregimpl00;
    multiregimpl02 <= multiregimpl01;
    multiregimpl10 <= basesoc_cdcusb_cdcusbphy_usb_core_tx_fit_oe;
    multiregimpl11 <= multiregimpl10;
    multiregimpl12 <= multiregimpl11;
    multiregimpl40 <= basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_graycounter1_q;
    multiregimpl41 <= multiregimpl40;
    multiregimpl60 <= basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_graycounter1_q;
    multiregimpl61 <= multiregimpl60;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory mem: 38-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:37];
initial begin
	$readmemh("kosagi_fomu_pvt_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= csr_bankarray_adr;
end
assign csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage_1: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 8 
// Port 1 | Read: Sync  | Write: ---- | 
reg [7:0] storage_1[0:1];
reg [7:0] storage_1_dat0;
reg [7:0] storage_1_dat1;
always @(posedge usb_48_clk) begin
	if (basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_wrport_we)
		storage_1[basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_wrport_adr] <= basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_wrport_adr];
end
always @(posedge usb_12_clk) begin
	storage_1_dat1 <= storage_1[basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_rdport_adr];
end
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_wrport_dat_r = storage_1_dat0;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_payloadFifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 2-words x 2-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 2 
// Port 1 | Read: Sync  | Write: ---- | 
reg [1:0] storage_2[0:1];
reg [1:0] storage_2_dat0;
reg [1:0] storage_2_dat1;
always @(posedge usb_48_clk) begin
	if (basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_wrport_we)
		storage_2[basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_wrport_adr] <= basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_wrport_dat_w;
	storage_2_dat0 <= storage_2[basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_wrport_adr];
end
always @(posedge usb_12_clk) begin
	storage_2_dat1 <= storage_2[basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_rdport_adr];
end
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_wrport_dat_r = storage_2_dat0;
assign basesoc_cdcusb_cdcusbphy_usb_core_rx_flagsFifo_rdport_dat_r = storage_2_dat1;


//------------------------------------------------------------------------------
// Memory storage_3: 10-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 8 
// Port 1 | Read: Sync  | Write: ---- | 
reg [7:0] storage_3[0:9];
reg [7:0] storage_3_dat0;
reg [7:0] storage_3_dat1;
always @(posedge usb_12_clk) begin
	if (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_wrport_we)
		storage_3[basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_wrport_adr] <= basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_wrport_dat_w;
	storage_3_dat0 <= storage_3[basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_wrport_adr];
end
always @(posedge usb_12_clk) begin
	if (basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_rdport_re)
		storage_3_dat1 <= storage_3[basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_rdport_adr];
end
assign basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_wrport_dat_r = storage_3_dat0;
assign basesoc_cdcusb_cdcusbphy_setuphandler_setuphandlerinner_rdport_dat_r = storage_3_dat1;


//------------------------------------------------------------------------------
// Memory storage_4: 64-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 8 
// Port 1 | Read: Sync  | Write: ---- | 
reg [7:0] storage_4[0:63];
reg [7:0] storage_4_dat0;
reg [7:0] storage_4_dat1;
always @(posedge usb_12_clk) begin
	if (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_wrport_we)
		storage_4[basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_wrport_adr] <= basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_wrport_dat_w;
	storage_4_dat0 <= storage_4[basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_wrport_adr];
end
always @(posedge usb_12_clk) begin
	if (basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_rdport_re)
		storage_4_dat1 <= storage_4[basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_rdport_adr];
end
assign basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_wrport_dat_r = storage_4_dat0;
assign basesoc_cdcusb_cdcusbphy_inhandler_syncfifobuffered_rdport_dat_r = storage_4_dat1;


//------------------------------------------------------------------------------
// Memory storage_5: 66-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 8 
// Port 1 | Read: Sync  | Write: ---- | 
reg [7:0] storage_5[0:65];
reg [7:0] storage_5_dat0;
reg [7:0] storage_5_dat1;
always @(posedge usb_12_clk) begin
	if (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_wrport_we)
		storage_5[basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_wrport_adr] <= basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_wrport_dat_w;
	storage_5_dat0 <= storage_5[basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_wrport_adr];
end
always @(posedge usb_12_clk) begin
	if (basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_rdport_re)
		storage_5_dat1 <= storage_5[basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_rdport_adr];
end
assign basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_wrport_dat_r = storage_5_dat0;
assign basesoc_cdcusb_cdcusbphy_outhandler_syncfifobuffered_rdport_dat_r = storage_5_dat1;


//------------------------------------------------------------------------------
// Memory mem_1: 219-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem_1[0:218];
initial begin
	$readmemh("kosagi_fomu_pvt_mem_1.init", mem_1);
end
reg [7:0] mem_1_adr0;
always @(posedge usb_12_clk) begin
	mem_1_adr0 <= basesoc_cdcusb_cdcusbphy_adr;
end
assign basesoc_cdcusb_cdcusbphy_dat_r = mem_1[mem_1_adr0];


//------------------------------------------------------------------------------
// Memory storage_6: 4-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_6[0:3];
reg [9:0] storage_6_dat0;
reg [9:0] storage_6_dat1;
always @(posedge sys_usb_clk) begin
	if (basesoc_cdcusb_asyncfifo0_wrport_we)
		storage_6[basesoc_cdcusb_asyncfifo0_wrport_adr] <= basesoc_cdcusb_asyncfifo0_wrport_dat_w;
	storage_6_dat0 <= storage_6[basesoc_cdcusb_asyncfifo0_wrport_adr];
end
always @(posedge usb_12_clk) begin
	storage_6_dat1 <= storage_6[basesoc_cdcusb_asyncfifo0_rdport_adr];
end
assign basesoc_cdcusb_asyncfifo0_wrport_dat_r = storage_6_dat0;
assign basesoc_cdcusb_asyncfifo0_rdport_dat_r = storage_6_dat1;


//------------------------------------------------------------------------------
// Memory storage_7: 4-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_7[0:3];
reg [9:0] storage_7_dat0;
reg [9:0] storage_7_dat1;
always @(posedge usb_12_clk) begin
	if (basesoc_cdcusb_asyncfifo1_wrport_we)
		storage_7[basesoc_cdcusb_asyncfifo1_wrport_adr] <= basesoc_cdcusb_asyncfifo1_wrport_dat_w;
	storage_7_dat0 <= storage_7[basesoc_cdcusb_asyncfifo1_wrport_adr];
end
always @(posedge sys_usb_clk) begin
	storage_7_dat1 <= storage_7[basesoc_cdcusb_asyncfifo1_rdport_adr];
end
assign basesoc_cdcusb_asyncfifo1_wrport_dat_r = storage_7_dat0;
assign basesoc_cdcusb_asyncfifo1_rdport_dat_r = storage_7_dat1;


//------------------------------------------------------------------------------
// Instance SB_SPRAM256KA of SB_SPRAM256KA Module.
//------------------------------------------------------------------------------
SB_SPRAM256KA SB_SPRAM256KA(
	// Inputs.
	.ADDRESS    (bus_adr[13:0]),
	.CHIPSELECT (1'd1),
	.CLOCK      (sys_clk),
	.DATAIN     (datain0),
	.MASKWREN   (maskwren0),
	.POWEROFF   (1'd1),
	.SLEEP      (1'd0),
	.STANDBY    (1'd0),
	.WREN       (wren0),

	// Outputs.
	.DATAOUT    (dataout0)
);

//------------------------------------------------------------------------------
// Instance SB_SPRAM256KA_1 of SB_SPRAM256KA Module.
//------------------------------------------------------------------------------
SB_SPRAM256KA SB_SPRAM256KA_1(
	// Inputs.
	.ADDRESS    (bus_adr[13:0]),
	.CHIPSELECT (1'd1),
	.CLOCK      (sys_clk),
	.DATAIN     (datain1),
	.MASKWREN   (maskwren1),
	.POWEROFF   (1'd1),
	.SLEEP      (1'd0),
	.STANDBY    (1'd0),
	.WREN       (wren1),

	// Outputs.
	.DATAOUT    (dataout1)
);

//------------------------------------------------------------------------------
// Instance SB_SPRAM256KA_2 of SB_SPRAM256KA Module.
//------------------------------------------------------------------------------
SB_SPRAM256KA SB_SPRAM256KA_2(
	// Inputs.
	.ADDRESS    (bus_adr[13:0]),
	.CHIPSELECT (1'd1),
	.CLOCK      (sys_clk),
	.DATAIN     (datain2),
	.MASKWREN   (maskwren2),
	.POWEROFF   (1'd1),
	.SLEEP      (1'd0),
	.STANDBY    (1'd0),
	.WREN       (wren2),

	// Outputs.
	.DATAOUT    (dataout2)
);

//------------------------------------------------------------------------------
// Instance SB_SPRAM256KA_3 of SB_SPRAM256KA Module.
//------------------------------------------------------------------------------
SB_SPRAM256KA SB_SPRAM256KA_3(
	// Inputs.
	.ADDRESS    (bus_adr[13:0]),
	.CHIPSELECT (1'd1),
	.CLOCK      (sys_clk),
	.DATAIN     (datain3),
	.MASKWREN   (maskwren3),
	.POWEROFF   (1'd1),
	.SLEEP      (1'd0),
	.STANDBY    (1'd0),
	.WREN       (wren3),

	// Outputs.
	.DATAOUT    (dataout3)
);

//------------------------------------------------------------------------------
// Instance SB_PLL40_CORE of SB_PLL40_CORE Module.
//------------------------------------------------------------------------------
SB_PLL40_CORE #(
	// Parameters.
	.DIVF          (4'd15),
	.DIVQ          (3'd6),
	.DIVR          (1'd0),
	.FEEDBACK_PATH ("SIMPLE"),
	.FILTER_RANGE  (3'd4)
) SB_PLL40_CORE (
	// Inputs.
	.REFERENCECLK (crg_clkin),
	.RESETB       ((~crg_reset)),

	// Outputs.
	.LOCK         (crg_locked),
	.PLLOUTGLOBAL (crg_clkout)
);

//------------------------------------------------------------------------------
// Instance SB_DFFS of SB_DFFS Module.
//------------------------------------------------------------------------------
SB_DFFS SB_DFFS(
	// Inputs.
	.C (usb_12_clk),
	.D (1'd0),
	.S (((~crg_por_done) | (~crg_locked))),

	// Outputs.
	.Q (rst10)
);

//------------------------------------------------------------------------------
// Instance SB_DFFS_1 of SB_DFFS Module.
//------------------------------------------------------------------------------
SB_DFFS SB_DFFS_1(
	// Inputs.
	.C (usb_12_clk),
	.D (rst10),
	.S (((~crg_por_done) | (~crg_locked))),

	// Outputs.
	.Q (usb_12_rst)
);

//------------------------------------------------------------------------------
// Instance SB_DFFS_2 of SB_DFFS Module.
//------------------------------------------------------------------------------
SB_DFFS SB_DFFS_2(
	// Inputs.
	.C (usb_48_clk),
	.D (1'd0),
	.S (((~crg_por_done) | (~crg_locked))),

	// Outputs.
	.Q (rst11)
);

//------------------------------------------------------------------------------
// Instance SB_DFFS_3 of SB_DFFS Module.
//------------------------------------------------------------------------------
SB_DFFS SB_DFFS_3(
	// Inputs.
	.C (usb_48_clk),
	.D (rst11),
	.S (((~crg_por_done) | (~crg_locked))),

	// Outputs.
	.Q (usb_48_rst)
);

//------------------------------------------------------------------------------
// Instance SB_DFFS_4 of SB_DFFS Module.
//------------------------------------------------------------------------------
SB_DFFS SB_DFFS_4(
	// Inputs.
	.C (sys_clk),
	.D (1'd0),
	.S (((~crg_por_done) | (~crg_locked))),

	// Outputs.
	.Q (rst12)
);

//------------------------------------------------------------------------------
// Instance SB_DFFS_5 of SB_DFFS Module.
//------------------------------------------------------------------------------
SB_DFFS SB_DFFS_5(
	// Inputs.
	.C (sys_clk),
	.D (rst12),
	.S (((~crg_por_done) | (~crg_locked))),

	// Outputs.
	.Q (sys_rst)
);

//------------------------------------------------------------------------------
// Instance SB_IO of SB_IO Module.
//------------------------------------------------------------------------------
SB_IO #(
	// Parameters.
	.PIN_TYPE (6'd52)
) SB_IO (
	// Inputs.
	.D_OUT_0       (basesoc_usb_iobuf_usb_p_tx),
	.INPUT_CLK     (usb_48_clk),
	.OUTPUT_CLK    (usb_48_clk),
	.OUTPUT_ENABLE (basesoc_usb_iobuf_usb_tx_en),

	// Outputs.
	.D_IN_0        (basesoc_usb_iobuf_usb_p_t_i),

	// InOuts.
	.PACKAGE_PIN   (usb_d_p)
);

//------------------------------------------------------------------------------
// Instance SB_IO_1 of SB_IO Module.
//------------------------------------------------------------------------------
SB_IO #(
	// Parameters.
	.PIN_TYPE (6'd52)
) SB_IO_1 (
	// Inputs.
	.D_OUT_0       (basesoc_usb_iobuf_usb_n_tx),
	.INPUT_CLK     (usb_48_clk),
	.OUTPUT_CLK    (usb_48_clk),
	.OUTPUT_ENABLE (basesoc_usb_iobuf_usb_tx_en),

	// Outputs.
	.D_IN_0        (basesoc_usb_iobuf_usb_n_t_i),

	// InOuts.
	.PACKAGE_PIN   (usb_d_n)
);

//------------------------------------------------------------------------------
// Instance SB_IO_2 of SB_IO Module.
//------------------------------------------------------------------------------
SB_IO #(
	// Parameters.
	.IO_STANDARD ("SB_LVCMOS"),
	.PIN_TYPE    (6'd21)
) SB_IO_2 (
	// Inputs.
	.CLOCK_ENABLE  (1'd1),
	.D_OUT_0       (spiflash_phy_clk),
	.OUTPUT_CLK    (sys_clk),
	.OUTPUT_ENABLE (1'd1),

	// InOuts.
	.PACKAGE_PIN   (spiflash4x_clk)
);

//------------------------------------------------------------------------------
// Instance SB_IO_3 of SB_IO Module.
//------------------------------------------------------------------------------
SB_IO #(
	// Parameters.
	.IO_STANDARD ("SB_LVCMOS"),
	.PIN_TYPE    (6'd21)
) SB_IO_3 (
	// Inputs.
	.CLOCK_ENABLE  (1'd1),
	.D_OUT_0       (spiflash_phy_cs_n),
	.OUTPUT_CLK    (sys_clk),
	.OUTPUT_ENABLE (1'd1),

	// InOuts.
	.PACKAGE_PIN   (spiflash4x_cs_n)
);

//------------------------------------------------------------------------------
// Instance SB_IO_4 of SB_IO Module.
//------------------------------------------------------------------------------
SB_IO #(
	// Parameters.
	.PIN_TYPE (6'd52)
) SB_IO_4 (
	// Inputs.
	.D_OUT_0       (spiflash_phy_dq_o[0]),
	.INPUT_CLK     (sys_clk),
	.OUTPUT_CLK    (sys_clk),
	.OUTPUT_ENABLE (spiflash_phy_dq_oe[0]),

	// Outputs.
	.D_IN_0        (spiflash_phy_dq_i[0]),

	// InOuts.
	.PACKAGE_PIN   (spiflash4x_dq[0])
);

//------------------------------------------------------------------------------
// Instance SB_IO_5 of SB_IO Module.
//------------------------------------------------------------------------------
SB_IO #(
	// Parameters.
	.PIN_TYPE (6'd52)
) SB_IO_5 (
	// Inputs.
	.D_OUT_0       (spiflash_phy_dq_o[1]),
	.INPUT_CLK     (sys_clk),
	.OUTPUT_CLK    (sys_clk),
	.OUTPUT_ENABLE (spiflash_phy_dq_oe[1]),

	// Outputs.
	.D_IN_0        (spiflash_phy_dq_i[1]),

	// InOuts.
	.PACKAGE_PIN   (spiflash4x_dq[1])
);

//------------------------------------------------------------------------------
// Instance SB_IO_6 of SB_IO Module.
//------------------------------------------------------------------------------
SB_IO #(
	// Parameters.
	.PIN_TYPE (6'd52)
) SB_IO_6 (
	// Inputs.
	.D_OUT_0       (spiflash_phy_dq_o[2]),
	.INPUT_CLK     (sys_clk),
	.OUTPUT_CLK    (sys_clk),
	.OUTPUT_ENABLE (spiflash_phy_dq_oe[2]),

	// Outputs.
	.D_IN_0        (spiflash_phy_dq_i[2]),

	// InOuts.
	.PACKAGE_PIN   (spiflash4x_dq[2])
);

//------------------------------------------------------------------------------
// Instance SB_IO_7 of SB_IO Module.
//------------------------------------------------------------------------------
SB_IO #(
	// Parameters.
	.PIN_TYPE (6'd52)
) SB_IO_7 (
	// Inputs.
	.D_OUT_0       (spiflash_phy_dq_o[3]),
	.INPUT_CLK     (sys_clk),
	.OUTPUT_CLK    (sys_clk),
	.OUTPUT_ENABLE (spiflash_phy_dq_oe[3]),

	// Outputs.
	.D_IN_0        (spiflash_phy_dq_i[3]),

	// InOuts.
	.PACKAGE_PIN   (spiflash4x_dq[3])
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-08-07 12:15:49.
//------------------------------------------------------------------------------
